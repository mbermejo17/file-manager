{"version":3,"sources":["js/node_modules/browser-pack/_prelude.js","js/js/dashboard.js","js/js/modules/fileManager.js","js/js/modules/general.js","js/js/modules/user.js","js/js/vendor/dataTables.js","js/js/vendor/js-cookie.js","js/js/vendor/md5.min.js","js/js/vendor/modalDialog.js","js/node_modules/axios/index.js","js/node_modules/axios/lib/adapters/xhr.js","js/node_modules/axios/lib/axios.js","js/node_modules/axios/lib/cancel/Cancel.js","js/node_modules/axios/lib/cancel/CancelToken.js","js/node_modules/axios/lib/cancel/isCancel.js","js/node_modules/axios/lib/core/Axios.js","js/node_modules/axios/lib/core/InterceptorManager.js","js/node_modules/axios/lib/core/createError.js","js/node_modules/axios/lib/core/dispatchRequest.js","js/node_modules/axios/lib/core/enhanceError.js","js/node_modules/axios/lib/core/settle.js","js/node_modules/axios/lib/core/transformData.js","js/node_modules/axios/lib/defaults.js","js/node_modules/axios/lib/helpers/bind.js","js/node_modules/axios/lib/helpers/btoa.js","js/node_modules/axios/lib/helpers/buildURL.js","js/node_modules/axios/lib/helpers/combineURLs.js","js/node_modules/axios/lib/helpers/cookies.js","js/node_modules/axios/lib/helpers/isAbsoluteURL.js","js/node_modules/axios/lib/helpers/isURLSameOrigin.js","js/node_modules/axios/lib/helpers/normalizeHeaderName.js","js/node_modules/axios/lib/helpers/parseHeaders.js","js/node_modules/axios/lib/helpers/spread.js","js/node_modules/axios/lib/utils.js","js/node_modules/babel-polyfill/lib/index.js","js/node_modules/core-js/fn/regexp/escape.js","js/node_modules/core-js/modules/_a-function.js","js/node_modules/core-js/modules/_a-number-value.js","js/node_modules/core-js/modules/_add-to-unscopables.js","js/node_modules/core-js/modules/_an-instance.js","js/node_modules/core-js/modules/_an-object.js","js/node_modules/core-js/modules/_array-copy-within.js","js/node_modules/core-js/modules/_array-fill.js","js/node_modules/core-js/modules/_array-from-iterable.js","js/node_modules/core-js/modules/_array-includes.js","js/node_modules/core-js/modules/_array-methods.js","js/node_modules/core-js/modules/_array-reduce.js","js/node_modules/core-js/modules/_array-species-constructor.js","js/node_modules/core-js/modules/_array-species-create.js","js/node_modules/core-js/modules/_bind.js","js/node_modules/core-js/modules/_classof.js","js/node_modules/core-js/modules/_cof.js","js/node_modules/core-js/modules/_collection-strong.js","js/node_modules/core-js/modules/_collection-to-json.js","js/node_modules/core-js/modules/_collection-weak.js","js/node_modules/core-js/modules/_collection.js","js/node_modules/core-js/modules/_core.js","js/node_modules/core-js/modules/_create-property.js","js/node_modules/core-js/modules/_ctx.js","js/node_modules/core-js/modules/_date-to-iso-string.js","js/node_modules/core-js/modules/_date-to-primitive.js","js/node_modules/core-js/modules/_defined.js","js/node_modules/core-js/modules/_descriptors.js","js/node_modules/core-js/modules/_dom-create.js","js/node_modules/core-js/modules/_enum-bug-keys.js","js/node_modules/core-js/modules/_enum-keys.js","js/node_modules/core-js/modules/_export.js","js/node_modules/core-js/modules/_fails-is-regexp.js","js/node_modules/core-js/modules/_fails.js","js/node_modules/core-js/modules/_fix-re-wks.js","js/node_modules/core-js/modules/_flags.js","js/node_modules/core-js/modules/_flatten-into-array.js","js/node_modules/core-js/modules/_for-of.js","js/node_modules/core-js/modules/_global.js","js/node_modules/core-js/modules/_has.js","js/node_modules/core-js/modules/_hide.js","js/node_modules/core-js/modules/_html.js","js/node_modules/core-js/modules/_ie8-dom-define.js","js/node_modules/core-js/modules/_inherit-if-required.js","js/node_modules/core-js/modules/_invoke.js","js/node_modules/core-js/modules/_iobject.js","js/node_modules/core-js/modules/_is-array-iter.js","js/node_modules/core-js/modules/_is-array.js","js/node_modules/core-js/modules/_is-integer.js","js/node_modules/core-js/modules/_is-object.js","js/node_modules/core-js/modules/_is-regexp.js","js/node_modules/core-js/modules/_iter-call.js","js/node_modules/core-js/modules/_iter-create.js","js/node_modules/core-js/modules/_iter-define.js","js/node_modules/core-js/modules/_iter-detect.js","js/node_modules/core-js/modules/_iter-step.js","js/node_modules/core-js/modules/_iterators.js","js/node_modules/core-js/modules/_library.js","js/node_modules/core-js/modules/_math-expm1.js","js/node_modules/core-js/modules/_math-fround.js","js/node_modules/core-js/modules/_math-log1p.js","js/node_modules/core-js/modules/_math-scale.js","js/node_modules/core-js/modules/_math-sign.js","js/node_modules/core-js/modules/_meta.js","js/node_modules/core-js/modules/_metadata.js","js/node_modules/core-js/modules/_microtask.js","js/node_modules/core-js/modules/_new-promise-capability.js","js/node_modules/core-js/modules/_object-assign.js","js/node_modules/core-js/modules/_object-create.js","js/node_modules/core-js/modules/_object-dp.js","js/node_modules/core-js/modules/_object-dps.js","js/node_modules/core-js/modules/_object-forced-pam.js","js/node_modules/core-js/modules/_object-gopd.js","js/node_modules/core-js/modules/_object-gopn-ext.js","js/node_modules/core-js/modules/_object-gopn.js","js/node_modules/core-js/modules/_object-gops.js","js/node_modules/core-js/modules/_object-gpo.js","js/node_modules/core-js/modules/_object-keys-internal.js","js/node_modules/core-js/modules/_object-keys.js","js/node_modules/core-js/modules/_object-pie.js","js/node_modules/core-js/modules/_object-sap.js","js/node_modules/core-js/modules/_object-to-array.js","js/node_modules/core-js/modules/_own-keys.js","js/node_modules/core-js/modules/_parse-float.js","js/node_modules/core-js/modules/_parse-int.js","js/node_modules/core-js/modules/_perform.js","js/node_modules/core-js/modules/_promise-resolve.js","js/node_modules/core-js/modules/_property-desc.js","js/node_modules/core-js/modules/_redefine-all.js","js/node_modules/core-js/modules/_redefine.js","js/node_modules/core-js/modules/_replacer.js","js/node_modules/core-js/modules/_same-value.js","js/node_modules/core-js/modules/_set-collection-from.js","js/node_modules/core-js/modules/_set-collection-of.js","js/node_modules/core-js/modules/_set-proto.js","js/node_modules/core-js/modules/_set-species.js","js/node_modules/core-js/modules/_set-to-string-tag.js","js/node_modules/core-js/modules/_shared-key.js","js/node_modules/core-js/modules/_shared.js","js/node_modules/core-js/modules/_species-constructor.js","js/node_modules/core-js/modules/_strict-method.js","js/node_modules/core-js/modules/_string-at.js","js/node_modules/core-js/modules/_string-context.js","js/node_modules/core-js/modules/_string-html.js","js/node_modules/core-js/modules/_string-pad.js","js/node_modules/core-js/modules/_string-repeat.js","js/node_modules/core-js/modules/_string-trim.js","js/node_modules/core-js/modules/_string-ws.js","js/node_modules/core-js/modules/_task.js","js/node_modules/core-js/modules/_to-absolute-index.js","js/node_modules/core-js/modules/_to-index.js","js/node_modules/core-js/modules/_to-integer.js","js/node_modules/core-js/modules/_to-iobject.js","js/node_modules/core-js/modules/_to-length.js","js/node_modules/core-js/modules/_to-object.js","js/node_modules/core-js/modules/_to-primitive.js","js/node_modules/core-js/modules/_typed-array.js","js/node_modules/core-js/modules/_typed-buffer.js","js/node_modules/core-js/modules/_typed.js","js/node_modules/core-js/modules/_uid.js","js/node_modules/core-js/modules/_user-agent.js","js/node_modules/core-js/modules/_validate-collection.js","js/node_modules/core-js/modules/_wks-define.js","js/node_modules/core-js/modules/_wks-ext.js","js/node_modules/core-js/modules/_wks.js","js/node_modules/core-js/modules/core.get-iterator-method.js","js/node_modules/core-js/modules/core.regexp.escape.js","js/node_modules/core-js/modules/es6.array.copy-within.js","js/node_modules/core-js/modules/es6.array.every.js","js/node_modules/core-js/modules/es6.array.fill.js","js/node_modules/core-js/modules/es6.array.filter.js","js/node_modules/core-js/modules/es6.array.find-index.js","js/node_modules/core-js/modules/es6.array.find.js","js/node_modules/core-js/modules/es6.array.for-each.js","js/node_modules/core-js/modules/es6.array.from.js","js/node_modules/core-js/modules/es6.array.index-of.js","js/node_modules/core-js/modules/es6.array.is-array.js","js/node_modules/core-js/modules/es6.array.iterator.js","js/node_modules/core-js/modules/es6.array.join.js","js/node_modules/core-js/modules/es6.array.last-index-of.js","js/node_modules/core-js/modules/es6.array.map.js","js/node_modules/core-js/modules/es6.array.of.js","js/node_modules/core-js/modules/es6.array.reduce-right.js","js/node_modules/core-js/modules/es6.array.reduce.js","js/node_modules/core-js/modules/es6.array.slice.js","js/node_modules/core-js/modules/es6.array.some.js","js/node_modules/core-js/modules/es6.array.sort.js","js/node_modules/core-js/modules/es6.array.species.js","js/node_modules/core-js/modules/es6.date.now.js","js/node_modules/core-js/modules/es6.date.to-iso-string.js","js/node_modules/core-js/modules/es6.date.to-json.js","js/node_modules/core-js/modules/es6.date.to-primitive.js","js/node_modules/core-js/modules/es6.date.to-string.js","js/node_modules/core-js/modules/es6.function.bind.js","js/node_modules/core-js/modules/es6.function.has-instance.js","js/node_modules/core-js/modules/es6.function.name.js","js/node_modules/core-js/modules/es6.map.js","js/node_modules/core-js/modules/es6.math.acosh.js","js/node_modules/core-js/modules/es6.math.asinh.js","js/node_modules/core-js/modules/es6.math.atanh.js","js/node_modules/core-js/modules/es6.math.cbrt.js","js/node_modules/core-js/modules/es6.math.clz32.js","js/node_modules/core-js/modules/es6.math.cosh.js","js/node_modules/core-js/modules/es6.math.expm1.js","js/node_modules/core-js/modules/es6.math.fround.js","js/node_modules/core-js/modules/es6.math.hypot.js","js/node_modules/core-js/modules/es6.math.imul.js","js/node_modules/core-js/modules/es6.math.log10.js","js/node_modules/core-js/modules/es6.math.log1p.js","js/node_modules/core-js/modules/es6.math.log2.js","js/node_modules/core-js/modules/es6.math.sign.js","js/node_modules/core-js/modules/es6.math.sinh.js","js/node_modules/core-js/modules/es6.math.tanh.js","js/node_modules/core-js/modules/es6.math.trunc.js","js/node_modules/core-js/modules/es6.number.constructor.js","js/node_modules/core-js/modules/es6.number.epsilon.js","js/node_modules/core-js/modules/es6.number.is-finite.js","js/node_modules/core-js/modules/es6.number.is-integer.js","js/node_modules/core-js/modules/es6.number.is-nan.js","js/node_modules/core-js/modules/es6.number.is-safe-integer.js","js/node_modules/core-js/modules/es6.number.max-safe-integer.js","js/node_modules/core-js/modules/es6.number.min-safe-integer.js","js/node_modules/core-js/modules/es6.number.parse-float.js","js/node_modules/core-js/modules/es6.number.parse-int.js","js/node_modules/core-js/modules/es6.number.to-fixed.js","js/node_modules/core-js/modules/es6.number.to-precision.js","js/node_modules/core-js/modules/es6.object.assign.js","js/node_modules/core-js/modules/es6.object.create.js","js/node_modules/core-js/modules/es6.object.define-properties.js","js/node_modules/core-js/modules/es6.object.define-property.js","js/node_modules/core-js/modules/es6.object.freeze.js","js/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","js/node_modules/core-js/modules/es6.object.get-own-property-names.js","js/node_modules/core-js/modules/es6.object.get-prototype-of.js","js/node_modules/core-js/modules/es6.object.is-extensible.js","js/node_modules/core-js/modules/es6.object.is-frozen.js","js/node_modules/core-js/modules/es6.object.is-sealed.js","js/node_modules/core-js/modules/es6.object.is.js","js/node_modules/core-js/modules/es6.object.keys.js","js/node_modules/core-js/modules/es6.object.prevent-extensions.js","js/node_modules/core-js/modules/es6.object.seal.js","js/node_modules/core-js/modules/es6.object.set-prototype-of.js","js/node_modules/core-js/modules/es6.object.to-string.js","js/node_modules/core-js/modules/es6.parse-float.js","js/node_modules/core-js/modules/es6.parse-int.js","js/node_modules/core-js/modules/es6.promise.js","js/node_modules/core-js/modules/es6.reflect.apply.js","js/node_modules/core-js/modules/es6.reflect.construct.js","js/node_modules/core-js/modules/es6.reflect.define-property.js","js/node_modules/core-js/modules/es6.reflect.delete-property.js","js/node_modules/core-js/modules/es6.reflect.enumerate.js","js/node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","js/node_modules/core-js/modules/es6.reflect.get-prototype-of.js","js/node_modules/core-js/modules/es6.reflect.get.js","js/node_modules/core-js/modules/es6.reflect.has.js","js/node_modules/core-js/modules/es6.reflect.is-extensible.js","js/node_modules/core-js/modules/es6.reflect.own-keys.js","js/node_modules/core-js/modules/es6.reflect.prevent-extensions.js","js/node_modules/core-js/modules/es6.reflect.set-prototype-of.js","js/node_modules/core-js/modules/es6.reflect.set.js","js/node_modules/core-js/modules/es6.regexp.constructor.js","js/node_modules/core-js/modules/es6.regexp.flags.js","js/node_modules/core-js/modules/es6.regexp.match.js","js/node_modules/core-js/modules/es6.regexp.replace.js","js/node_modules/core-js/modules/es6.regexp.search.js","js/node_modules/core-js/modules/es6.regexp.split.js","js/node_modules/core-js/modules/es6.regexp.to-string.js","js/node_modules/core-js/modules/es6.set.js","js/node_modules/core-js/modules/es6.string.anchor.js","js/node_modules/core-js/modules/es6.string.big.js","js/node_modules/core-js/modules/es6.string.blink.js","js/node_modules/core-js/modules/es6.string.bold.js","js/node_modules/core-js/modules/es6.string.code-point-at.js","js/node_modules/core-js/modules/es6.string.ends-with.js","js/node_modules/core-js/modules/es6.string.fixed.js","js/node_modules/core-js/modules/es6.string.fontcolor.js","js/node_modules/core-js/modules/es6.string.fontsize.js","js/node_modules/core-js/modules/es6.string.from-code-point.js","js/node_modules/core-js/modules/es6.string.includes.js","js/node_modules/core-js/modules/es6.string.italics.js","js/node_modules/core-js/modules/es6.string.iterator.js","js/node_modules/core-js/modules/es6.string.link.js","js/node_modules/core-js/modules/es6.string.raw.js","js/node_modules/core-js/modules/es6.string.repeat.js","js/node_modules/core-js/modules/es6.string.small.js","js/node_modules/core-js/modules/es6.string.starts-with.js","js/node_modules/core-js/modules/es6.string.strike.js","js/node_modules/core-js/modules/es6.string.sub.js","js/node_modules/core-js/modules/es6.string.sup.js","js/node_modules/core-js/modules/es6.string.trim.js","js/node_modules/core-js/modules/es6.symbol.js","js/node_modules/core-js/modules/es6.typed.array-buffer.js","js/node_modules/core-js/modules/es6.typed.data-view.js","js/node_modules/core-js/modules/es6.typed.float32-array.js","js/node_modules/core-js/modules/es6.typed.float64-array.js","js/node_modules/core-js/modules/es6.typed.int16-array.js","js/node_modules/core-js/modules/es6.typed.int32-array.js","js/node_modules/core-js/modules/es6.typed.int8-array.js","js/node_modules/core-js/modules/es6.typed.uint16-array.js","js/node_modules/core-js/modules/es6.typed.uint32-array.js","js/node_modules/core-js/modules/es6.typed.uint8-array.js","js/node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","js/node_modules/core-js/modules/es6.weak-map.js","js/node_modules/core-js/modules/es6.weak-set.js","js/node_modules/core-js/modules/es7.array.flat-map.js","js/node_modules/core-js/modules/es7.array.flatten.js","js/node_modules/core-js/modules/es7.array.includes.js","js/node_modules/core-js/modules/es7.asap.js","js/node_modules/core-js/modules/es7.error.is-error.js","js/node_modules/core-js/modules/es7.global.js","js/node_modules/core-js/modules/es7.map.from.js","js/node_modules/core-js/modules/es7.map.of.js","js/node_modules/core-js/modules/es7.map.to-json.js","js/node_modules/core-js/modules/es7.math.clamp.js","js/node_modules/core-js/modules/es7.math.deg-per-rad.js","js/node_modules/core-js/modules/es7.math.degrees.js","js/node_modules/core-js/modules/es7.math.fscale.js","js/node_modules/core-js/modules/es7.math.iaddh.js","js/node_modules/core-js/modules/es7.math.imulh.js","js/node_modules/core-js/modules/es7.math.isubh.js","js/node_modules/core-js/modules/es7.math.rad-per-deg.js","js/node_modules/core-js/modules/es7.math.radians.js","js/node_modules/core-js/modules/es7.math.scale.js","js/node_modules/core-js/modules/es7.math.signbit.js","js/node_modules/core-js/modules/es7.math.umulh.js","js/node_modules/core-js/modules/es7.object.define-getter.js","js/node_modules/core-js/modules/es7.object.define-setter.js","js/node_modules/core-js/modules/es7.object.entries.js","js/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","js/node_modules/core-js/modules/es7.object.lookup-getter.js","js/node_modules/core-js/modules/es7.object.lookup-setter.js","js/node_modules/core-js/modules/es7.object.values.js","js/node_modules/core-js/modules/es7.observable.js","js/node_modules/core-js/modules/es7.promise.finally.js","js/node_modules/core-js/modules/es7.promise.try.js","js/node_modules/core-js/modules/es7.reflect.define-metadata.js","js/node_modules/core-js/modules/es7.reflect.delete-metadata.js","js/node_modules/core-js/modules/es7.reflect.get-metadata-keys.js","js/node_modules/core-js/modules/es7.reflect.get-metadata.js","js/node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js","js/node_modules/core-js/modules/es7.reflect.get-own-metadata.js","js/node_modules/core-js/modules/es7.reflect.has-metadata.js","js/node_modules/core-js/modules/es7.reflect.has-own-metadata.js","js/node_modules/core-js/modules/es7.reflect.metadata.js","js/node_modules/core-js/modules/es7.set.from.js","js/node_modules/core-js/modules/es7.set.of.js","js/node_modules/core-js/modules/es7.set.to-json.js","js/node_modules/core-js/modules/es7.string.at.js","js/node_modules/core-js/modules/es7.string.match-all.js","js/node_modules/core-js/modules/es7.string.pad-end.js","js/node_modules/core-js/modules/es7.string.pad-start.js","js/node_modules/core-js/modules/es7.string.trim-left.js","js/node_modules/core-js/modules/es7.string.trim-right.js","js/node_modules/core-js/modules/es7.symbol.async-iterator.js","js/node_modules/core-js/modules/es7.symbol.observable.js","js/node_modules/core-js/modules/es7.system.global.js","js/node_modules/core-js/modules/es7.weak-map.from.js","js/node_modules/core-js/modules/es7.weak-map.of.js","js/node_modules/core-js/modules/es7.weak-set.from.js","js/node_modules/core-js/modules/es7.weak-set.of.js","js/node_modules/core-js/modules/web.dom.iterable.js","js/node_modules/core-js/modules/web.immediate.js","js/node_modules/core-js/modules/web.timers.js","js/node_modules/core-js/shim.js","js/node_modules/is-buffer/index.js","js/node_modules/js-base64/base64.js","js/node_modules/moment/moment.js","js/node_modules/process/browser.js","js/node_modules/regenerator-runtime/runtime.js","js/node_modules/uuid/lib/bytesToUuid.js","js/node_modules/uuid/lib/rng-browser.js","js/node_modules/uuid/v4.js"],"names":[],"mappings":"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I,kBAAkB,MAAtB,EAA8B;AAC1B,qBAAS,aAAT,CAAuB,4BAAvB,EAAqD,KAArD,CAA2D,OAA3D,GAAqE,OAArE;AACH,SAFD,MAEO;AACH,qBAAS,aAAT,CAAuB,4BAAvB,EAAqD,KAArD,CAA2D,OAA3D,GAAqE,MAArE;AACH;;AAED;AACA,YAAI,kBAAkB,OAAtB,EAA+B;AAC3B,qBAAS,aAAT,CAAuB,6BAAvB,EAAsD,KAAtD,CAA4D,OAA5D,GAAsE,OAAtE;AACH,SAFD,MAEO;AACH,qBAAS,aAAT,CAAuB,6BAAvB,EAAsD,KAAtD,CAA4D,OAA5D,GAAsE,MAAtE;AACH;;AAID,0BAAkB,UAAlB,CAA6B,OAA7B,GAAuC,kBAAkB,UAAzD;AACA,0BAAkB,aAAlB,CAAgC,OAAhC,GAA0C,kBAAkB,cAA5D;AACA,0BAAkB,cAAlB,CAAiC,OAAjC,GAA2C,kBAAkB,eAA7D;;AAEA,eAAO,gBAAP,GAA0B,iBAA1B;AACH;AAGJ;;;ACxpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphepRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrvxhuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dashboard.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* jshint laxbreak: true */\r\n/* experimental: [asyncawait, asyncreqawait] */\r\n\r\n\"use sctrict\";\r\nimport \"babel-polyfill\";\r\n\r\n//import ajax from \"./vendor/ajax\";\r\nimport axios from \"axios\";\r\n//import axiosMethodOverride from 'axios-method-override';\r\nimport {\r\n    Base64\r\n} from \"js-base64\";\r\nimport md5 from \"./vendor/md5.min\";\r\nimport Cookies from \"./vendor/js-cookie\";\r\nimport {\r\n    editUser,\r\n    showAddUserForm\r\n} from \"./modules/user\";\r\n\r\nimport {\r\n    getRealPath,\r\n    serializeObject\r\n} from \"./modules/general\";\r\nimport {\r\n    shareFile,\r\n    shareFileManage,\r\n    deleteSelected,\r\n    download,\r\n    upload,\r\n    newFolder,\r\n    showSharedFiles\r\n} from \"./modules/fileManager\";\r\nimport {\r\n    modalDialog\r\n} from \"./vendor/modalDialog\";\r\n\r\nwindow.userData = {\r\n    UserName: Cookies.get(\"UserName\"),\r\n    UserRole: Cookies.get(\"UserRole\"),\r\n    CompanyName: Cookies.get(\"CompanyName\"),\r\n    RealRootPath: Cookies.get(\"RootPath\"),\r\n    Token: Cookies.get(\"token\"),\r\n    AccessString: JSON.parse(Cookies.get(\"AccessString\")),\r\n    RunMode: Cookies.get(\"RunMode\"),\r\n    MaxFileSize: Cookies.get('MaxFileSize')\r\n};\r\n\r\nwindow.appData = {\r\n    rootPath: \"/\",\r\n    currentPath: \"/\",\r\n    aSelectedFiles: {name:[], size: []}, \r\n    aSelectedFolders: []\r\n};\r\n\r\n\r\n(function(w, d) {\r\n    let\r\n        AllowDownload = userData.AccessString.download,\r\n        AllowUpload = userData.AccessString.upload,\r\n        AllowDeleteFile = userData.AccessString.deletefile,\r\n        AllowDeleteFolder = userData.AccessString.deletefolder,\r\n        AllowNewFolder = userData.AccessString.addfolder,\r\n        AllowShareFile = userData.AccessString.sharefiles;\r\n\r\n\r\n    let aFolders = [];\r\n    let aFiles = [];\r\n    let currentTopToast = 30;\r\n    let topToast = 0;\r\n\r\n    const logout = () => {\r\n        Cookies.remove(\"UserName\");\r\n        Cookies.remove(\"UserRole\");\r\n        Cookies.remove(\"sessionId\");\r\n        Cookies.remove(\"token\");\r\n        Cookies.remove(\"wssURL\");\r\n        Cookies.remove(\"RootPath\");\r\n        Cookies.remove(\"CompanyName\");\r\n        Cookies.remove(\"AccessString\");\r\n        Cookies.remove(\"MaxFileSize\");\r\n        document.location.href = \"/\";\r\n    };\r\n\r\n\r\n    /* axiosMethodOverride(axios);\r\n\r\n    const instance = axios.create();\r\n    axiosMethodOverride(instance); */\r\n\r\n    //////////////////////////////////\r\n    //  Tools module\r\n    //////////////////////////////////\r\n\r\n    const cleanArray = arr => {\r\n        let temp = [];\r\n        for (let i of arr) i && temp.push(i);\r\n        return temp;\r\n    };\r\n\r\n    window.FetchHandleErrors = function(response) {\r\n        if (!response.ok) {\r\n            //throw Error(response.statusText);\r\n            if (response.statusCode == 401) {\r\n                logout();\r\n            }\r\n        }\r\n        return response;\r\n    };\r\n\r\n    // TODO --> replace execFetch by axios\r\n\r\n    /* window.execFetch = async function(uri, met, data) {\r\n    const header = new Headers();\r\n    const bodyData = data ? JSON.stringify(data) : null;\r\n    header.append(\"Content-Type\", \"application/json\");\r\n    header.append(\"Authorization\", \"Bearer \" + userData.Token);\r\n\r\n    const initData = {\r\n      method: met,\r\n      headers: header,\r\n      body: bodyData\r\n    };\r\n\r\n    const resp = await fetch(uri, initData);\r\n    const json = await resp.json();\r\n    return json;\r\n  };\r\n */\r\n\r\n    ////////////////////////////////////////\r\n    // Global Function Show Toast notifications\r\n    ////////////////////////////////////////\r\n    window.showToast = function(title, msg, type, icon = true) {\r\n        toast.create({\r\n            title: title,\r\n            text: msg,\r\n            type: type,\r\n            icon: icon\r\n        });\r\n    };\r\n\r\n    /////////////////////////////////\r\n    //  End Tools\r\n    ////////////////////////////////\r\n\r\n    ////////////////////////////////////////\r\n    // Change Path\r\n    ////////////////////////////////////////\r\n    const changePath = newPath => {\r\n        let fullNewPath = \"\";\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"changePath:newPath \", newPath);\r\n        if (newPath !== \"/\") {\r\n            fullNewPath = getNewPath(newPath);\r\n        } else {\r\n            fullNewPath = newPath;\r\n        }\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"changePath:fullNewPath \", fullNewPath);\r\n        appData.currentPath = fullNewPath.trim();\r\n        refreshPath(appData.currentPath);\r\n        refreshBarMenu();\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Get content from new Path\r\n    ////////////////////////////////////////\r\n    let getNewPath = pathSelected => {\r\n        let splitPath = appData.currentPath.split(\"/\");\r\n        let newPath = \"\";\r\n        let temp = [];\r\n\r\n        splitPath = cleanArray(splitPath);\r\n\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"Current Path: \", appData.currentPath);\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"Path Selected: \", pathSelected);\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"splitPath : \", splitPath);\r\n        if (splitPath.length == 0) {\r\n            newPath += \"/\" + pathSelected;\r\n        } else {\r\n            for (let x = 0; x < splitPath.length; x++) {\r\n                if (splitPath[x] !== pathSelected) {\r\n                    newPath += \"/\" + splitPath[x];\r\n                } else {\r\n                    if (splitPath[x] === pathSelected) {\r\n                        newPath += \"/\" + splitPath[x];\r\n                        if (userData.RunMode === \"DEBUG\")\r\n                            console.log(\"New Path: \", newPath);\r\n                        return newPath;\r\n                    }\r\n                }\r\n            }\r\n            newPath += \"/\" + pathSelected;\r\n        }\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"New Path: \", newPath);\r\n        return newPath;\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Got to back Folder\r\n    ////////////////////////////////////////\r\n    const goBackFolder = folder => {\r\n        let newPath = \"\";\r\n        let splitPath = appData.currentPath.split(\"/\");\r\n\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"goBackFolder:folder \", folder);\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"goBackFolder:appData.currentPath \", appData.currentPath);\r\n\r\n        splitPath = cleanArray(splitPath);\r\n        splitPath.pop();\r\n\r\n        if (appData.currentPath !== \"/\" && folder == \"..\") {\r\n            if (splitPath.length > 0) {\r\n                newPath += splitPath[splitPath.length - 1];\r\n            } else {\r\n                newPath = \"/\";\r\n            }\r\n        }\r\n\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"goBackFolder:newPath \" + newPath);\r\n        changePath(newPath.trim());\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Refres Content Path\r\n    ////////////////////////////////////////\r\n    const refreshPath = cPath => {\r\n        let newLinePath = [];\r\n        let newHtmlContent = `<li><label id=\"currentpath\">Path:</label></li>\r\n                              <li><spand>&nbsp;</spand><a class=\"breadcrumb-line-path\" href=\"#!\">/</a></li>`;\r\n\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"init path: \", cPath);\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"cPath lenght:\", cPath.length);\r\n        $u(\"#waiting\").addClass(\"active\");\r\n\r\n        if (cPath.length > 1) {\r\n            let cPathArray = cPath.split(\"/\");\r\n            cPathArray = cleanArray(cPathArray);\r\n\r\n            if (userData.RunMode === \"DEBUG\")\r\n                console.log(\"refreshPath:cPathArray \", cPathArray);\r\n\r\n            if (cPathArray.length > 0) {\r\n                for (let x = 0; x < cPathArray.length; x++) {\r\n                    if (x == 0) {\r\n                        newHtmlContent += `<li><spand>&nbsp;</spand><a class=\"breadcrumb-line-path\" href=\"#!\">${\r\n              cPathArray[x]\r\n            }</a></li>`;\r\n                    } else {\r\n                        newHtmlContent += `<li><spand>&nbsp/&nbsp;</spand><a class=\"breadcrumb-line-path\" href=\"#!\">${\r\n              cPathArray[x]\r\n            }</a></li>`;\r\n                    }\r\n                    if (cPathArray[x] === cPath) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            $u(\"#waiting\").removeClass(\"active\");\r\n        }\r\n\r\n        $u(\"#currentPath\").html(newHtmlContent);\r\n\r\n        $u(\".breadcrumb-line-path\").on(\"click\", e => {\r\n            changePath(e.target.innerText);\r\n        });\r\n\r\n        //const headers = new Headers();\r\n        //headers.append(\"Authorization\", \"Bearer \" + userData.Token);\r\n        let realpath = getRealPath(cPath);\r\n\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\r\n                \"userData.RealRootPath: \" +\r\n                userData.RealRootPath +\r\n                \" realpath:\" +\r\n                realpath\r\n            );\r\n        /* fetch(\"/files?path=\" + encodeURI(realpath), {\r\n      method: \"GET\",\r\n      headers: {\"Authorization\": \"Bearer \" + userData.Token},\r\n      timeout: 720000\r\n    }) */\r\n\r\n        axios.get(\r\n                \"/files?path=\" + encodeURI(realpath), {\r\n                    headers: {\r\n                        \"Authorization\": \"Bearer \" + userData.Token,\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    timeout: 720000\r\n                }\r\n            )\r\n            .then(data => {\r\n                if (userData.RunMode === \"DEBUG\") console.log(data);\r\n                refreshFilesTable(data.data);\r\n                $u(\"#waiting\").removeClass(\"active\");\r\n            })\r\n            .catch(err => {\r\n                if (userData.RunMode === \"DEBUG\") console.log(err);\r\n                $u(\"#waiting\").removeClass(\"active\");\r\n            });\r\n    };\r\n\r\n    //////////////////////////////////\r\n    // Select all Files & Folders\r\n    /////////////////////////////////\r\n\r\n    const selectAll = e => {\r\n        var allCkeckbox = document.querySelectorAll(\".check\");\r\n        let v = document.querySelector(\"#selectAllFiles\").checked;\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"selectAllFiles :\", v);\r\n        allCkeckbox.forEach(function(element, i) {\r\n            if (!allCkeckbox[i].disabled) {\r\n                allCkeckbox[i].checked = v;\r\n            }\r\n        });\r\n        if (userData.RunMode === \"DEBUG\") console.log(getCheckedFiles());\r\n        if (userData.RunMode === \"DEBUG\") console.log(getCheckedFolder());\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Get List Checked Files\r\n    ////////////////////////////////////////\r\n    const getCheckedFiles = function() {\r\n        var checkedFiles = [];\r\n        var allElements = document.querySelectorAll(\".typeFile\");\r\n        allElements.forEach(function(element, i) {\r\n            if (userData.RunMode === \"DEBUG\") console.log(\"element: \", element);\r\n            if (userData.RunMode === \"DEBUG\")\r\n                console.log(\r\n                    \"children: \",\r\n                    element.parentElement.parentElement.children[0].children[0]\r\n                    .children[0].checked\r\n                );\r\n                if (userData.RunMode === \"DEBUG\")\r\n                console.log(\r\n                    \"size: \",\r\n                    element.parentElement.parentElement.children[2].innerHTML\r\n                );    \r\n            if (element.parentElement.parentElement.children[0].children[0].children[0].checked) {\r\n                appData.aSelectedFiles.name.push(element.innerHTML);\r\n                appData.aSelectedFiles.size.push(element.parentElement.parentElement.children[2].innerHTML);\r\n                checkedFiles.push(element.innerHTML);\r\n                // c(element.children[1].innerHTML)\r\n            } else {\r\n                const idx = appData.aSelectedFiles.name.indexOf(element.innerHTML);\r\n                if (idx > -1) {\r\n                    appData.aSelectedFiles.name.splice(idx, 1);\r\n                    appData.aSelectedFiles.size.splice(idx, 1);\r\n                }\r\n            }\r\n        });\r\n        return checkedFiles;\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Get List Checked Folders\r\n    ////////////////////////////////////////\r\n    const getCheckedFolder = function() {\r\n        var checkedFolders = [];\r\n        var allElements = document.querySelectorAll(\".dashboard-path\");\r\n        allElements.forEach(function(v, i) {\r\n            if (userData.RunMode === \"DEBUG\") console.log(\"element v: \", v);\r\n            if (userData.RunMode === \"DEBUG\")\r\n                console.log(\"check \", v.children[0].checked);\r\n            if (userData.RunMode === \"DEBUG\")\r\n                console.log(\r\n                    \"text \",\r\n                    v.parentElement.parentElement.children[1].children[1].text\r\n                );\r\n            if (v.children[0].checked) {\r\n                appData.aSelectedFolders.push(\r\n                    v.parentElement.parentElement.children[1].children[1].text\r\n                );\r\n                checkedFolders.push(\r\n                    v.parentElement.parentElement.children[1].children[1].text\r\n                );\r\n            } else {\r\n                const idx = appData.aSelectedFolders.indexOf(\r\n                    v.parentElement.parentElement.children[1].children[1].text\r\n                );\r\n                if (idx > -1) {\r\n                    appData.aSelectedFolders.splice(idx, 1);\r\n                }\r\n            }\r\n        });\r\n        return checkedFolders;\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Modal Daialog\r\n    ////////////////////////////////////////\r\n    window.showDialogYesNo = (title, content, yesCb, noCb) => {\r\n        let w = 32;\r\n        let h = 440;\r\n        let result = null;\r\n        let htmlContent = `<div id=\"modal-header\">\r\n                            <h5>${title}</h5>\r\n                            <a class=\"modal_close\" id=\"logoutModalClose\" href=\"#hola\"></a>\r\n                        </div>\r\n                        <div class=\"modal-content\">\r\n                            <p>${content}</p>\r\n                        </div>\r\n                        <div class=\"modal-footer\">\r\n                            <a class=\"modal-action modal-close waves-effect waves-teal btn-flat btn2-unify\" id=\"btnYes\" href=\"#\">Yes</a>\r\n                            <a class=\"modal-action modal-close waves-effect waves-teal btn-flat btn2-unify\" id=\"btnNO\" href=\"#\">NO</a>\r\n                        </div>`;\r\n        $u(\"#modal\")\r\n            .html(htmlContent)\r\n            .css(\"width: \" + w + \"%;height: \" + h + \"px;text-align: center;\");\r\n        //$('.modal-content').css('width: 350px;');\r\n        $u(\".modal\").css(\"width: 40% !important\");\r\n        $u(\"#modal\").show();\r\n        $u(\"#lean-overlay\").show();\r\n        $u(\"#btnYes\").on(\"click\", e => {\r\n            e.preventDefault();\r\n            $u(\"#modal\").hide();\r\n            $u(\"#lean-overlay\").hide();\r\n            yesCb(\"YES\");\r\n        });\r\n        $u(\"#btnNO\").on(\"click\", e => {\r\n            e.preventDefault();\r\n            $u(\"#modal\").hide();\r\n            $u(\"#lean-overlay\").hide();\r\n            noCb(\"NO\");\r\n        });\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Format file size\r\n    ////////////////////////////////////////\r\n    const formatSize = bytes => {\r\n        if (bytes >= 1073741824) {\r\n            bytes = parseInt(bytes / 1000000000) + \" GB\";\r\n        } else if (bytes >= 1048576) {\r\n            bytes = parseInt(bytes / 1000000) + \" MB\";\r\n        } else if (bytes >= 1024) {\r\n            bytes = parseInt(bytes / 1000) + \" KB\";\r\n        } else if (bytes > 1) {\r\n            bytes = bytes + \" bytes\";\r\n        } else if (bytes == 1) {\r\n            bytes = bytes + \" byte\";\r\n        } else {\r\n            bytes = \"0 byte\";\r\n        }\r\n        return bytes;\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Render View Files & Folders\r\n    ////////////////////////////////////////\r\n    const renderFilesTable = (aFol, aFil) => {\r\n        let newHtmlContent = ``;\r\n        const tbodyContent = document\r\n            .getElementById(\"tbl-files\")\r\n            .getElementsByTagName(\"tbody\")[0];\r\n\r\n        newHtmlContent += `<tr><td><span>&nbsp;</span></td>\r\n              <td><i class=\"fa fa-folder filesTable\"></i><a href=\"#\" id=\"goBackFolder\" class=\"file-Name typeFolder\">..</a></td>\r\n              <td>&nbsp;</td><td>&nbsp;</td></tr>`;\r\n        aFol.forEach((val, idx, array) => {\r\n            newHtmlContent += `<tr><td><div class=\"md-checkbox dashboard-path\"><input class=\"checkFolder check\" id=\"${\r\n        val.name\r\n      }\" type=\"checkbox\">\r\n              <label class=\"checkbox left\" for=\"${\r\n                val.name\r\n              }\"></label></div></td>`;\r\n            newHtmlContent += `<td><i class=\"fa fa-folder filesTable\"></i><a href=\"#\" class=\"file-Name typeFolder\">${\r\n        val.name\r\n      }</a></td>`;\r\n            newHtmlContent += `<td>&nbsp;</td><td>${\r\n        val.date\r\n      }</td></tr>`;\r\n        });\r\n\r\n        aFil.forEach((val, idx, array) => {\r\n            let fileSize = formatSize(val.size);\r\n            newHtmlContent += `<tr><td><div class=\"md-checkbox\"><input class=\"checkFile check\" id=\"${\r\n        val.name\r\n      }\" type=\"checkbox\">\r\n            <label class=\"checkbox left\" for=\"${val.name}\"></label></div></td>`;\r\n            newHtmlContent += `<td><i class=\"fa fa-file filesTable\"></i><span class=\"typeFile\">${\r\n        val.name\r\n      }</span></td>`;\r\n            newHtmlContent += `<td>${fileSize}</td><td>${\r\n        val.date\r\n      }</td></tr>`;\r\n        });\r\n        tbodyContent.innerHTML = newHtmlContent;\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Refresh Files and Folders View\r\n    ////////////////////////////////////////\r\n    const refreshFilesTable = data => {\r\n        const tbodyContent = document\r\n            .getElementById(\"tbl-files\")\r\n            .getElementsByTagName(\"tbody\")[0];\r\n\r\n        if (userData.RunMode === \"DEBUG\") console.log(data);\r\n        aFolders = [];\r\n        aFiles = [];\r\n        if (data.message) return null;\r\n        data.forEach((val, idx, array) => {\r\n            let fileSize = val.size / 1024;\r\n            if (val.isFolder) {\r\n                aFolders.push({\r\n                    name: val.name,\r\n                    date: val.date\r\n                });\r\n            } else {\r\n                if (!val.name.startsWith(\"upload_\")) {\r\n                    aFiles.push({\r\n                        name: val.name,\r\n                        size: val.size,\r\n                        date: val.date\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        aFolders.sort((a, b) => {\r\n            return a.name.localeCompare(b.name);\r\n        });\r\n        aFiles.sort((a, b) => {\r\n            return a.date.localeCompare(b.date);\r\n        });\r\n\r\n        renderFilesTable(aFolders, aFiles);\r\n\r\n        $u(\".file-Name\").on(\"click\", e => {\r\n            if (userData.RunMode === \"DEBUG\") console.log(e);\r\n            if (userData.RunMode === \"DEBUG\")\r\n                console.log(\"Current Path: \", appData.currentPath);\r\n            let newPath = \"\";\r\n            if (e.target.innerText != \"..\") {\r\n                newPath = getNewPath(e.target.innerText);\r\n                if (userData.RunMode === \"DEBUG\")\r\n                    console.log(\"New Path: \", newPath.trim());\r\n                refreshPath(newPath.trim());\r\n                appData.currentPath = newPath.trim();\r\n                refreshBarMenu();\r\n            } else {\r\n                if (appData.currentPath !== appData.rootPath)\r\n                    goBackFolder(e.target.innerText);\r\n            }\r\n        });\r\n\r\n        $u(\".check\").on(\"click\", e => {\r\n            console.log(\"check: \", e);\r\n            selectDeselect(e);\r\n            if (userData.RunMode === \"DEBUG\") {\r\n                console.log(\"checked: \", e.target.checked);\r\n                console.log(e.target.className.split(/\\s+/).indexOf(\"checkFile\"));\r\n                console.log(e.target.parentNode.parentNode.parentNode.rowIndex);\r\n                console.log(e.target.parentNode.children[1].htmlFor);\r\n            }\r\n        });\r\n\r\n        $u(\"#goBackFolder\").on(\"click\", e => {\r\n            e.preventDefault();\r\n            goBackFolder();\r\n        });\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Select / Deselect Files & Folders\r\n    ////////////////////////////////////////\r\n    const selectDeselect = e => {\r\n        const isChecked = e.target.checked;\r\n        const contentType = e.target.className.split(/\\s+/).indexOf(\"checkFile\");\r\n        const name = e.target.parentNode.children[1].htmlFor;\r\n        const size = e.target.parentNode.parentNode.parentNode.children[2].innerHTML;\r\n\r\n        if (contentType != -1) {\r\n            if (isChecked) {\r\n                appData.aSelectedFiles.name.push(name);\r\n                appData.aSelectedFiles.size.push(size);\r\n            } else {\r\n                const idx = appData.aSelectedFiles.name.indexOf(name);\r\n                if (idx > -1) {\r\n                    appData.aSelectedFiles.name.splice(idx, 1);\r\n                    appData.aSelectedFiles.size.splice(idx, 1);\r\n                }\r\n            }\r\n        } else {\r\n            if (isChecked) {\r\n                appData.aSelectedFolders.push(name);\r\n            } else {\r\n                const idx = appData.aSelectedFolders.indexOf(name);\r\n                if (idx > -1) {\r\n                    appData.aSelectedFolders.splice(idx, 1);\r\n                }\r\n            }\r\n        }\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(appData.aSelectedFiles, appData.aSelectedFolders);\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // User Profile\r\n    ////////////////////////////////////////\r\n    const showUserProfile = (w, h, t) => {\r\n        let ModalTitle = t;\r\n        console.log('access string: ', userData.AccessString);\r\n        let ModalContent = `<table id=\"tableUserProfile\" class=\"striped highlight\">\r\n                    <tr><td>User Name:</td><td>${userData.UserName}</td></tr>\r\n                    <tr><td>User Role:</td><td>${userData.UserRole}</td></tr> \r\n                    <tr><td>Company Name:</td><td>${\r\n                      userData.CompanyName\r\n                    }</td></tr>\r\n                    <tr><td colspan=\"2\" style=\"text-align:center;border-botom:1px solid #CCC\">&nbsp;</td></tr>\r\n                    <tr><td>Allow new Folder:</td><td>`;\r\n        ModalContent += userData.AccessString.addfolder === true ? \"Allow\" : \"Deny\";\r\n        ModalContent += `</td></tr>\r\n                    <tr><td>Allow Share Files:</td><td>`;\r\n        ModalContent += userData.AccessString.sharefiles === true ? \"Allow\" : \"Deny\";\r\n        ModalContent += `</td></tr>\r\n                    <tr><td>Allow delete Folder:</td><td>`;\r\n        ModalContent += userData.AccessString.deletefolder === true ? \"Allow\" : \"Deny\";\r\n        ModalContent += `</td></tr>\r\n                    <tr><td>Allow delete File:</td><td>`;\r\n        ModalContent += userData.AccessString.deletefile === true ? \"Allow\" : \"Deny\";\r\n        ModalContent += `</td></tr>\r\n                    <tr><td>Allow Upload:</td><td>`;\r\n        ModalContent += userData.AccessString.upload === true ? \"Allow\" : \"Deny\";\r\n        ModalContent += `</td></tr>\r\n                    <tr><td>Allow Download:</td><td>`;\r\n        ModalContent += userData.AccessString.download === true ? \"Allow\" : \"Deny\";\r\n        ModalContent += `</td></tr>\r\n                </table>`;\r\n        let htmlContent = `${ModalContent}`;\r\n        /* $u(\"#modal\")\r\n          .html(htmlContent)\r\n          .css(\"width: \" + w + \"%;height: \" + h + \"px;\");\r\n        $u(\"#modal\").show();\r\n        $u(\"#lean-overlay\").show();\r\n        $u(\"#ModalClose\").on(\"click\", () => {\r\n          $u(\"#modal\").hide();\r\n          $u(\"#lean-overlay\").hide();\r\n        });\r\n        $u(\"#modalClose\").on(\"click\", () => {\r\n          $u(\"#modal\").hide();\r\n          $u(\"#lean-overlay\").hide();\r\n        }); */\r\n\r\n        let modalDialogOptions = {\r\n            cancel: true,\r\n            cancelText: \"Close\",\r\n            confirm: false,\r\n            confirmText: \"\",\r\n            type: '',\r\n            width: '400px'\r\n        };\r\n        modalDialog(\r\n            \"User Profile\",\r\n            htmlContent,\r\n            modalDialogOptions\r\n        );\r\n\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // New Folder\r\n    ////////////////////////////////////////\r\n    const showNewFolder = (w, h, t) => {\r\n        let modalDialogOptions = {\r\n            cancel: true,\r\n            cancelText: \"Cancel\",\r\n            confirm: true,\r\n            confirmText: \"OK\",\r\n            type: 'prompt',\r\n            width: '400px'\r\n        };\r\n\r\n        modalDialogOptions.confirmCallBack = async (e, data) => {\r\n            if (userData.RunMode === \"DEBUG\") console.log(\"newFolderName: \", data);\r\n            if (data || data.trim() !== '') {\r\n                let parseFolderName = data.replace(/\\s/g, \"_\");\r\n                newFolder(parseFolderName);\r\n            }\r\n        };\r\n        modalDialogOptions.cancelCallBack = async (e, data) => {\r\n            console.log(data);\r\n        };\r\n        modalDialog(\r\n            \"New Folder\",\r\n            \"Folder Name\",\r\n            modalDialogOptions\r\n        );\r\n\r\n        /*  document.getElementById(\"newFolderName\").addEventListener(\"keyup\", e => {\r\n           e.preventDefault();\r\n           if (e.keyCode === 13) {\r\n             document.getElementById(\"AcceptNewFolder\").click();\r\n           }\r\n         }); */\r\n\r\n    };\r\n\r\n    ////////////////////////////////////////\r\n    // Change User Password\r\n    ////////////////////////////////////////\r\n    const showChangeUserPassword = (w, h, t) => {\r\n        let ModalTitle = t;\r\n        /* let ModalContent = `<div class=\"row\">\r\n                              <div class=\"input-field col s12\">\r\n                                <input id=\"newpassword\" type=\"password\"/>\r\n                                <label for=\"newpassword\">New Password</label>\r\n                              </div>\r\n                              <div class=\"input-field col s12\">\r\n                                <input id=\"newpassword2\" type=\"password\"/>\r\n                                <label for=\"newpassword2\">Repeat Password</label>\r\n                              </div>\r\n                          </div>`;\r\n    let htmlContent = `<div id=\"modal-header\">\r\n                          <h5><i class=\"fas fa-user-lock icon-title\"></i>${ModalTitle}</h5>\r\n                        <a class=\"modal_close\" id=\"modalClose\" href=\"#hola\"></a>\r\n                      </div>\r\n                      <div class=\"modal-content\">\r\n                        <p>${ModalContent}</p>\r\n                      </div>\r\n                      <div class=\"modal-footer\">\r\n                          <a class=\"modal-action modal-close waves-effect waves-teal btn-flat btn2-unify\" id=\"ModalClose\" href=\"#!\">Close</a>\r\n                          <a class=\"modal-action modal-close waves-effect waves-teal btn-flat btn2-unify\" id=\"AcceptChangeUserPassword\" href=\"#!\">Accept</a>\r\n                      </div>    `;\r\n */\r\n        let modalDialogOptions = {\r\n            cancel: true,\r\n            cancelText: \"Cancel\",\r\n            confirm: true,\r\n            confirmText: \"OK\",\r\n            type: 'changePassword',\r\n            width: '340px'\r\n        };\r\n        modalDialogOptions.confirmCallBack = async (e, data1, data2) => {\r\n            await axios\r\n                .post(\r\n                    \"/changepasswd\", {\r\n                        username: userData.UserName,\r\n                        newpassword: Base64.encode(md5(data1))\r\n                    }, {\r\n                        headers: {\r\n                            Authorization: \"Bearer \" + userData.Token,\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        timeout: 290000\r\n                    }\r\n                )\r\n                .then(d => {\r\n                    $u(\"#waiting\").removeClass(\"active\");\r\n                    if (userData.RunMode === \"DEBUG\") console.log(\"changePassword: \", d);\r\n                    if (d.data.status === \"FAIL\") {\r\n                        showToast(\"Change User Password\", d.data.message, \"error\");\r\n                        d.querySelector(\"#message\").innerHTML = d.data.message;\r\n                    } else {\r\n                        showToast(\"Change User Password\", d.data.message, \"success\");\r\n                        if (userData.RunMode === \"DEBUG\") console.log(d.data.message);\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    $u(\"#waiting\").removeClass(\"active\");\r\n                    showToast(\"Change User Password\", e, \"error\");\r\n                    if (userData.RunMode === \"DEBUG\") console.log(e);\r\n                });\r\n        };\r\n        modalDialog(\r\n            \"Change User Password\",\r\n            '<div class=\"input-field\">' +\r\n            '<input id=\"newpassword\" class=\"ModalDialog-input\" type=\"password\"/>' +\r\n            '<label for=\"newpassword\" class=\"ModalDialog-label\">New Password</label>' +\r\n            '</div>' +\r\n            '<div class=\"input-field\">' +\r\n            '<input id=\"newpassword2\" class=\"ModalDialog-input\" type=\"password\"/>' +\r\n            '<label for=\"newpassword2\" class=\"ModalDialog-label\">Repeat Password</label>' +\r\n            '</div>',\r\n            modalDialogOptions\r\n        );\r\n\r\n\r\n\r\n        /* $u(\"#modal\").html(htmlContent);\r\n        $u(\"#modal\").removeClass(\"modal-changePassword\");\r\n        $u(\"#modal\").addClass(\"modal-changePassword\");\r\n        $u(\".modal-changePassword\").css(\"height: \" + h + \"px;text-align: center;\");\r\n        $u(\"#modal\").show();\r\n        $u(\"#lean-overlay\").show();\r\n        $u(\"#AcceptChangeUserPassword\").on(\"click\", e => {\r\n          e.preventDefault();\r\n          let username = userData.UserName;\r\n          let newpassword = $(\"#newpassword\").val();\r\n          if (userData.RunMode === \"DEBUG\") console.log(username, newpassword);\r\n          $u(\"#waiting\").addClass(\"active\");\r\n          \r\n        });\r\n        $u(\"#modalClose\").on(\"click\", () => {\r\n          $u(\"#modal\").hide();\r\n          $u(\"#lean-overlay\").hide();\r\n        });\r\n        $u(\"#ModalClose\").on(\"click\", () => {\r\n          $u(\"#modal\").hide();\r\n          $u(\"#lean-overlay\").hide();\r\n        }); */\r\n    };\r\n\r\n    const refreshBarMenu = () => {\r\n        if (userData.AccessString.addfolder === true) {\r\n            $u(\"#newFolder\").removeClass(\"disabled\");\r\n        } else {\r\n            $u(\"#newFolder\").removeClass(\"disabled\");\r\n            $u(\"#newFolder\").addClass(\"disabled\");\r\n        }\r\n        if (userData.AccessString.deletefolder === true && userData.AccessString.deletefile === true) {\r\n            $u(\"#delete\").removeClass(\"disabled\");\r\n        } else {\r\n            $u(\"#delete\").removeClass(\"disabled\");\r\n            $u(\"#delete\").addClass(\"disabled\");\r\n        }\r\n        if (userData.AccessString.sharefiles === true) {\r\n            $u(\"#share\").removeClass(\"disabled\");\r\n        } else {\r\n            $u(\"#share\").removeClass(\"disabled\");\r\n            $u(\"#share\").addClass(\"disabled\");\r\n        }\r\n        if (userData.AccessString.upload == true) {\r\n            $u(\"#upload\").removeClass(\"disabled\");\r\n        } else {\r\n            $u(\"#upload\").removeClass(\"disabled\")\r\n            $u(\"#upload\").addClass(\"disabled\");\r\n        }\r\n\r\n        if (userData.AccessString.download == true) {\r\n            $u(\"#download\").removeClass(\"disabled\");\r\n        } else {\r\n            $u(\"#download\").removeClass(\"disabled\")\r\n            $u(\"#download\").addClass(\"disabled\");\r\n        }\r\n        if (userData.UserRole.toUpperCase() == \"ADMIN\") {\r\n            $u(\"#settings\").removeClass(\"hide\");\r\n        } else {\r\n            $u(\"#settings\").addClass(\"hide\");\r\n        }\r\n        $u(\"#usertrigger\").html(userData.UserName);\r\n    };\r\n\r\n    $u(\"#selectAllFiles\").on(\"click\", e => {\r\n        selectAll(e.target.htmlFor);\r\n    });\r\n\r\n    const userTrigger = function() {\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log($u(\"#Usersdropdown\").css(\"display\"));\r\n        let position1 = document.getElementById(\"usertrigger\").offsetLeft;\r\n        let position2 = document.getElementById(\"usertrigger\").offsetWidth;\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"position1: \", position1);\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"position2: \", position2);\r\n        let newPosition = parseInt(position1 + position2) + \"px\";\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"newPosition: \", newPosition);\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"Desiplay: \", $u(\"#Usersdropdown\").css(\"display\"));\r\n        if (\r\n            $u(\"#Usersdropdown\").css(\"display\") === \"block\" ||\r\n            $u(\"#Usersdropdown\").css(\"display\") == \"\"\r\n        ) {\r\n            $u(\"#usertrigger\").removeClass(\"selected\");\r\n            $u(\"#Usersdropdown\").hide();\r\n        } else {\r\n            $u(\"#usertrigger\").addClass(\"selected\");\r\n            document.getElementById(\"Usersdropdown\").style.right =\r\n                position2 + 10 + \"px\";\r\n            document.getElementById(\"Usersdropdown\").style.top = \"60px\";\r\n            $u(\"#Usersdropdown\").show();\r\n        }\r\n    };\r\n\r\n    /////////////////////////////////////////\r\n    //  Events handlers\r\n    /////////////////////////////////////////\r\n\r\n    // Add User\r\n\r\n    $u(\"#userAdd\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\"))\r\n            showAddUserForm(\"New User\", null);\r\n    });\r\n\r\n    // Edit user\r\n\r\n    $u(\"#userMod\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) editUser();\r\n    });\r\n\r\n    // Edit App Settings\r\n\r\n    $u(\"#settings\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (userData.RunMode === \"DEBUG\") console.log(e);\r\n        console.log(\"setting left:\", $u(e.target.id).position().left);\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"settingdropdown left:\", $u(\"#Settingdropdown\").css(\"left\"));\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log($u(\"#Settingdropdown\").css(\"display\"));\r\n        let position = document.querySelector(\"#settings\").offsetLeft;\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"position: \", position);\r\n        let newPosition = position + \"px\";\r\n        if ($u(\"#Settingdropdown\").css(\"display\") === \"block\") {\r\n            document.getElementById(\"settings\").classList ?\r\n                document.getElementById(\"settings\").classList.remove(\"selected\") :\r\n                (document.getElementById(\"settings\").className = \"\");\r\n            //document.getElementById('Settingdropdown').classList.remove('setting');\r\n            document.getElementById(\"Settingdropdown\").style.display = \"none\";\r\n        } else {\r\n            if (!$u(\"#settings\").hasClass(\"selected\")) {\r\n                $u(\"#settings\").addClass(\"selected\");\r\n            }\r\n            //addClass(document.getElementById('Settingdropdown'),'setting');\r\n            document.getElementById(\"Settingdropdown\").style.left = newPosition;\r\n            document.getElementById(\"Settingdropdown\").style.display = \"block\";\r\n            if (userData.RunMode === \"DEBUG\")\r\n                console.log(\"newPosition: \", newPosition);\r\n            if (userData.RunMode === \"DEBUG\")\r\n                console.log(\r\n                    \"Settingdropdown new position\",\r\n                    document.getElementById(\"Settingdropdown\").style.left\r\n                );\r\n        }\r\n    });\r\n\r\n    // Hide User Options Panel\r\n\r\n    $u(\"#Usersdropdown\").on(\"mouseleave\", () => {\r\n        $u(\"#Usersdropdown\").hide();\r\n        $u(\"#usertrigger\").removeClass(\"selected\");\r\n    });\r\n    $u(\"#Settingdropdown\").on(\"mouseleave\", () => {\r\n        $u(\"#Settingdropdown\").hide();\r\n        $u(\"#settings\").removeClass(\"selected\");\r\n    });\r\n\r\n    // User Options\r\n\r\n    $u(\"#usertrigger\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) userTrigger();\r\n    });\r\n\r\n    // Refresh view\r\n\r\n    $u(\"#refresh\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        refreshPath(appData.currentPath);\r\n    });\r\n\r\n    // Share File\r\n\r\n    $u(\"#share\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            if (appData.aSelectedFiles.name.length > 0) {\r\n                /* if (appData.aSelectedFiles.length > 1) {\r\n                    showToast(\r\n                        \"Share File\",\r\n                        \"No pueden seleccionarse más de un archivo\",\r\n                        \"warning\"\r\n                    );\r\n                } */\r\n                shareFile();\r\n            } else {\r\n                showToast(\r\n                    \"Share File\",\r\n                    \"No se ha seleccionado archivo para compartir\",\r\n                    \"warning\"\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    // User Logout\r\n\r\n    $u(\"#userLogout\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            $u(\"#Usersdropdown\").hide();\r\n            let modalDialogOptions = {\r\n                cancel: true,\r\n                cancelText: \"No\",\r\n                confirm: true,\r\n                confirmText: \"Yes\",\r\n                type: '',\r\n                width: '400px'\r\n            };\r\n\r\n            modalDialogOptions.confirmCallBack = async (e, data) => {\r\n                if (userData.RunMode === \"DEBUG\") console.log(\"data: \", data);\r\n                logout();\r\n            };\r\n            modalDialogOptions.cancelCallBack = async (e, data) => {\r\n                console.log(data);\r\n            };\r\n            modalDialog(\r\n                \"Close User session\",\r\n                \"Do you want to exit?\",\r\n                modalDialogOptions\r\n            );\r\n        } else {\r\n            showToast(\"User Logout\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n    // Show modal User Logout\r\n\r\n    $u(\"#ModalUserLogout\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            $u(\"#logoutmodal\").hide();\r\n            logout();\r\n        } else {\r\n            showToast(\"User Logout\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n    // Show Modal Dialog Change User Password\r\n\r\n    $u(\"#userChangePassword\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            $u(\"#Usersdropdown\").hide();\r\n            showChangeUserPassword(32, 380, \"Change User Password\");\r\n        } else {\r\n            showToast(\"Change User Password\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n\r\n    // Manage Shared Files\r\n\r\n    $u(\"#userSharedFiles\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            $u(\"#Usersdropdown\").hide();\r\n            showSharedFiles(32, 380, \"Manage Shared Files\");\r\n        } else {\r\n            showToast(\"Change User Password\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n\r\n    // Show User Profile\r\n\r\n    $u(\"#userProfile\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            $u(\"#Usersdropdown\").hide();\r\n            showUserProfile(40, 440, \"User Profile\");\r\n        } else {\r\n            showToast(\"User Profile\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n    // Cancel Modal Dialog option\r\n\r\n    $u(\"#cancel\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            $u(\"#logoutmodal\").hide();\r\n        } else {\r\n            showToast(\"User Logout\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n    // Go to Home Path\r\n\r\n    $u(\"#home\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        console.log(e);\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            appData.currentPath = appData.rootPath;\r\n            refreshPath(appData.currentPath);\r\n        } else {\r\n            showToast(\"Home\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n    // Show Modal Dialog Add New Folder\r\n\r\n    $u(\"#newFolder\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        console.log(e);\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            showNewFolder(32, 440, \"New Folder\");\r\n        } else {\r\n            showToast(\"New Folder\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n    // Delete Files / Folders\r\n\r\n    $u(\"#delete\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            if (\r\n                appData.aSelectedFolders.length > 0 ||\r\n                appData.aSelectedFiles.name.length > 0\r\n            ) {\r\n                deleteSelected();\r\n            } else {\r\n                showToast(\r\n                    \"Delete\",\r\n                    \"No se han seleccionado archivos o carpetas\",\r\n                    \"error\"\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    // Upload Files\r\n\r\n    $u(\"#upload\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            upload(userData.Token);\r\n        } else {\r\n            showToast(\"Upload\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n    // Download Files\r\n\r\n    $u(\"#download\").on(\"click\", e => {\r\n        e.preventDefault();\r\n        if (!$u(\"#\" + e.target.id).hasClass(\"disabled\")) {\r\n            if (appData.aSelectedFiles.name.length > 0) {\r\n                if (appData.aSelectedFiles.name.length > 5) {\r\n                    showToast(\r\n                        \"Download\",\r\n                        \"No se pueden descargar más de 5 archivos a la vez\",\r\n                        \"error\"\r\n                    );\r\n                }\r\n                download(appData.aSelectedFiles, \"File\");\r\n            } else {\r\n                showToast(\r\n                    \"Download\",\r\n                    \"No se han seleccionado archivos para descargar\",\r\n                    \"error\"\r\n                );\r\n            }\r\n        } else {\r\n            showToast(\"Download\", \"Opcion no permitida\", \"error\");\r\n        }\r\n    });\r\n\r\n    ///////////////////////////////////\r\n    //  End event handlers\r\n    ///////////////////////////////////\r\n\r\n    $u(\"#usertrigger\").html(userData.UserName);\r\n    $u(\"#usertrigger\").attr(\"title\", \"Empresa: \" + userData.CompanyName);\r\n\r\n    $u(\"#waiting\").removeClass(\"active\");\r\n\r\n    console.log(userData.AccessString);\r\n\r\n    refreshPath(appData.currentPath);\r\n    refreshBarMenu();\r\n\r\n})(window, document);","/* jshint laxbreak: true */\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport { getRealPath, serializeObject } from \"./general\";\r\n\r\nimport { modalDialog } from \"../vendor/modalDialog\";\r\n\r\nimport uuidv4 from \"uuid/v4\";\r\nimport DataTable from \"../vendor/dataTables\";\r\n\r\n////////////////////////////////////\r\n// Files and Folder module\r\n///////////////////////////////////\r\n\r\nlet htmlShareFile = `\r\n<div id=\"shareFileModal\">\r\n  <div id=\"modal-header\">\r\n    <h5>Share File</h5>\r\n    <a class=\"modal_close\" id=\"sharedModalClose\" href=\"#hola\"></a>\r\n  </div>\r\n  <br>\r\n  <div class=\"userForm-row\" id=\"\">\r\n    <div class=\"input-field col s1 m1\">\r\n    </div>\r\n    <div class=\"input-field col s5\">\r\n      \r\n      <input id=\"destUserName\" type=\"email\" autocomplete=\"off\" pattern=\".+@globex.com\" class=\"userForm-input\" required/>\r\n      <label for=\"destUserName\">Send URL to</label>\r\n    </div>\r\n    <div class=\"input-field col s3 m3\">\r\n        <input class=\"datepicker\" id=\"FileExpirateDate\" type=\"date\" class=\"userForm-input\"/>\r\n        <label for=\"FileExpirateDate\">Expiration Date</label>\r\n    </div>\r\n    <div class=\"input-field col s3 m3\">\r\n    </div>\r\n  </div>  \r\n  <div class=\"row\"> \r\n    <div class=\"input-field col s9 m9\">\r\n      <input class=\"check\" id=\"delFileAfterExpired\" type=\"checkbox\">\r\n      <label class=\"checkbox\" for=\"delFileAfterExpired\"></label> \r\n      <span>Delete file when expires</span>  \r\n    </div>\r\n    <div class=\"input-field col s1 m1\">\r\n      <button class=\"waves-effect waves-teal btn-flat btn2-unify right\" id=\"btn-ShareFileCancel\" type=\"submit\" name=\"action\">Cancel</button>\r\n    </div>\r\n    <div class=\"input-field col s1 m1\">  \r\n      <button class=\"waves-effect waves-teal btn-flat btn2-unify left\" id=\"btn-ShareFileAccept\" type=\"submit\" name=\"action\">Send</button>\r\n    </div>\r\n  </div>    \r\n</div>`;\r\n\r\nlet htmlSearchSharedFilesTemplate = `\r\n<div>\r\n      <div class=\"head-Title\">Edit Shared Files</div> \r\n      <table id=\"SharedFilesTableList\" class=\"tableList\">\r\n        <thead>\r\n          <tr>\r\n            <th>Id</th>\r\n            <th>User</th>\r\n            <th>Dest User Name</th>\r\n            <th>File Name</th>\r\n            <th>State</th>\r\n            <th data-type=\"date\" data-format=\"YYYY/MM/DD\">Expirate Date</th>\r\n            <th>Delete</div>\r\n            <th>Group Id</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody id=\"bodyList\">    \r\n        </tbody>\r\n      </table>\r\n      <div class=\"AddUserModalContent-footer\">\r\n        <div class=\"button-container\">\r\n            <button class=\"waves-effect waves-teal btn-flat btn2-unify\" id=\"btn-EditSharedFileCancel\" type=\"submit\" name=\"action\">Close</button>\r\n        </div> \r\n      </div>\r\n</div>\r\n`;\r\n\r\nlet htmlUploadDownloadTemplate = `\r\n<ul class=\"preloader-file\" id=\"DownloadfileList\">\r\n    <li id=\"li0\">\r\n        <div class=\"li-content\">\r\n            <div class=\"li-filename\" id=\"li-filename0\"></div>\r\n            <div class=\"progress-content\">\r\n                <div class=\"progress-bar\" id=\"progress-bar0\"></div>\r\n                <div class=\"percent\" id=\"percent0\"></div>               \r\n            </div>\r\n            <div class=\"abort-task\">\r\n                  <a class=\"file-abort\" id=\"abort0\" href=\"#\" title=\"Cancel file download\"></a>\r\n            </div>\r\n        </div>\r\n    </li>\r\n    <li id=\"li1\">\r\n        <div class=\"li-content\">\r\n            <div class=\"li-filename\" id=\"li-filename1\"></div>\r\n            <div class=\"progress-content\">\r\n                <div class=\"progress-bar\" id=\"progress-bar1\"></div>\r\n                <div class=\"percent\" id=\"percent1\"></div>\r\n            </div>\r\n            <div class=\"abort-task\">\r\n              <a class=\"file-abort\" id=\"abort1\" href=\"#\" title=\"Cancel file download\"></a>\r\n            </div> \r\n        </div>\r\n    </li>\r\n    <li id=\"li2\">\r\n        <div class=\"li-content\">\r\n            <div class=\"li-filename\" id=\"li-filename2\"></div>\r\n            <div class=\"progress-content\">\r\n                <div class=\"progress-bar\" id=\"progress-bar2\"></div>\r\n                <div class=\"percent\" id=\"percent2\"></div>\r\n            </div>  \r\n            <div class=\"abort-task\">\r\n              <a class=\"file-abort\" id=\"abort2\" href=\"#\" title=\"Cancel file download\"></a>\r\n            </div> \r\n        </div>\r\n    </li>\r\n    <li id=\"li3\">\r\n        <div class=\"li-content\">\r\n            <div class=\"li-filename\" id=\"li-filename3\"></div>\r\n            <div class=\"progress-content\">\r\n                <div class=\"progress-bar\" id=\"progress-bar3\"></div>\r\n                <div class=\"percent\" id=\"percent3\"></div>\r\n            </div>\r\n            <div class=\"abort-task\">\r\n                  <a class=\"file-abort\" id=\"abort3\" href=\"#\" title=\"Cancel file download\"></a>\r\n                </div>   \r\n        </div>\r\n    </li>\r\n    <li id=\"li4\">\r\n        <div class=\"li-content\">\r\n            <div class=\"li-filename\" id=\"li-filename4\"></div>\r\n            <div class=\"progress-content\">\r\n                <div class=\"progress-bar\" id=\"progress-bar4\"></div>\r\n                <div class=\"percent\" id=\"percent4\"></div>  \r\n            </div>\r\n            <div class=\"abort-task\">\r\n                  <a class=\"file-abort\" id=\"abort4\" href=\"#\" title=\"Cancel file download\"></a>\r\n                </div> \r\n        </div>\r\n    </li>\r\n</ul>`;\r\n\r\nconst _getUID = () => {\r\n  let uid = uuidv4();\r\n  return uid.replace(/-/g, \"\");\r\n};\r\n\r\nconst sendEmail = (toEmail, fromEmail, subject, body_message) => {\r\n  let mailto_link =\r\n    \"mailto:\" + toEmail + \"?subject=\" + subject + \"&body=\" + body_message;\r\n  let win = window.open(mailto_link, \"emailWindow\");\r\n  if (win && window.open && !window.closed) window.close();\r\n};\r\n\r\nconst _showAbortMessage = (el, msg) => {\r\n  el.style.backgroundColor = \"white\";\r\n  el.style.color = \"red\";\r\n  el.innerHTML = msg;\r\n  el.style.width = \"100%\";\r\n};\r\n\r\nconst _deselectAllFolders = () => {\r\n  let allElements = document.querySelectorAll(\".dashboard-path\");\r\n  allElements.forEach(function(v, i) {\r\n    if (v.children[0].checked) {\r\n      v.children[0].checked = false;\r\n    }\r\n  });\r\n  document.querySelector(\"#selectAllFiles\").checked = false;\r\n  appData.aSelectedFolders = [];\r\n};\r\n\r\nconst _deselectAllFiles = () => {\r\n  let allElements = document.querySelectorAll(\".typeFile\");\r\n  /* [].call.forEach(document.querySelectorAll(\".typeFile\"), function(element) {\r\n    if (element.parentElement.parentElement.children[0].children[0].children[0].checked) {\r\n      element.parentElement.parentElement.children[0].children[0].children[0].checked = false;\r\n    }\r\n  }); */\r\n  allElements.forEach(function(element, i) {\r\n        if (element.parentElement.parentElement.children[0].children[0].children[0].checked) {\r\n            element.parentElement.parentElement.children[0].children[0].children[0].checked = false;\r\n        }\r\n  });\r\n  document.querySelector(\"#selectAllFiles\").checked = false;\r\n  appData.aSelectedFiles.name = [];\r\n  appData.aSelectedFiles.size = [];\r\n};\r\n\r\nlet validateSize = f => {\r\n  return true;\r\n};\r\n\r\nexport function shareFile() {\r\n  let searchUserModalContent = document.getElementById(\r\n    \"searchUserModalContent\"\r\n  );\r\n  let AddUserModalContent = document.getElementById(\"AddUserModalContent\");\r\n  let containerOverlay = document.querySelector(\".container-overlay\");\r\n  let validations = {\r\n    email: [\r\n      /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/,\r\n      \"Please enter a valid email address\"\r\n    ]\r\n  };\r\n\r\n  const _shareFile = d => {\r\n    let tmpDate = new Date(d.FileExpirateDate);\r\n    let strTime = \"\";\r\n    let groupID = null;\r\n    let data = {};\r\n    if (d.FileExpirateDate === \"\") {\r\n      strTime = moment(Date.now()).format(\"YYYY/MM/DD HH:mm:ss\");\r\n    } else {\r\n      strTime = moment(d.FileExpirateDate).format(\"YYYY/MM/DD HH:mm:ss\");\r\n    }\r\n\r\n    if (d.destUserName !== \"\") {\r\n      if (userData.RunMode === \"DEBUG\") console.log(d.destUserName);\r\n      if (userData.RunMode === \"DEBUG\")\r\n        console.log(\"FileExpirateDate: \", d.FileExpirateDate);\r\n      if (appData.aSelectedFiles.name.length > 1) {\r\n        groupID = _getUID();\r\n      }\r\n      let nFiles = appData.aSelectedFiles.name.length;\r\n      let fileList = \"\";\r\n      for (let x = 0; x < nFiles; x++) {\r\n        fileList += `\r\n                    - ${appData.aSelectedFiles.name[x]}  ${appData.aSelectedFiles.size[x]}`;  \r\n        data = {\r\n          fileName: appData.aSelectedFiles.name[x],\r\n          fileSize: appData.aSelectedFiles.size[x],\r\n          path: appData.currentPath,\r\n          userName: userData.UserName,\r\n          destUserName: d.destUserName,\r\n          expirationDate: strTime,\r\n          unixDate: moment(strTime).format(\"x\"),\r\n          deleteExpiredFile: d.delFileAfterExpired ? 1 : 0,\r\n          groupID: groupID\r\n        };\r\n        if (userData.RunMode === \"DEBUG\")\r\n          console.log(\"_shareFile.data: \", data);\r\n        axios\r\n          .post(\"/files/share\", data, {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: \"Bearer \" + userData.Token\r\n            },\r\n            timeout: 30000\r\n          })\r\n          .then(d => {\r\n            if (userData.RunMode === \"DEBUG\") console.log(d.data);\r\n            if (d.data.status === \"OK\") {\r\n              //containerOverlay.style.display = \"none\";\r\n              if (nFiles === 1) {\r\n                    document.querySelector(\"#urlFile\").innerHTML = `https://filebox.unifyspain.es/files/share/${d.data.data.UrlCode}`;\r\n                    let emailBody = encodeURIComponent('El usuario '+ userData.UserName.toUpperCase() +' ha compartido el archivo '+ appData.aSelectedFiles.name[x] + ' ' + appData.aSelectedFiles.size[x] +'\\r\\n\\r\\n' +\r\n                    'puede descargarlo del link: https://filebox.unifyspain.es/files/share/'+ d.data.data.UrlCode) ;\r\n                    sendEmail(\r\n                        d.data.data.DestUser,\r\n                        \"filemanager@filebox.unifyspain.es\",\r\n                        \"URL para descarga de archivo\",\r\n                        emailBody\r\n                    );\r\n                    appData.aSelectedFiles.name = [];\r\n                    appData.aSelectedFiles.size = [];\r\n                    appData.aSelectedFolders = [];\r\n                    document.getElementById(\"refresh\").click();\r\n                    document.getElementById(\r\n                        \"ModalDialog-button-confirm\"\r\n                    ).style.display = \"none\";\r\n                    document.getElementById(\"ModalDialog-button-cancel\").innerHTML =\r\n                        \"OK\";\r\n              } else {\r\n                  console.log('x:',x);\r\n                  if( x === nFiles -1 ) { \r\n                    document.querySelector(\"#urlFile\").innerHTML = `https://filebox.unifyspain.es/files/share/${groupID}`;\r\n                    let emailBody = encodeURIComponent('El usuario '+ userData.UserName.toUpperCase() +' ha compartido los archivos: \\r\\n'+ fileList + '\\r\\n\\r\\n' +\r\n                    'puede descargarlos del link: https://filebox.unifyspain.es/files/share/'+ groupID) ;\r\n                    sendEmail(\r\n                        d.data.data.DestUser,\r\n                        \"filemanager@filebox.unifyspain.es\",\r\n                        \"URL para descarga de archivos\",\r\n                        emailBody\r\n                    );\r\n                    appData.aSelectedFiles.name = [];\r\n                    appData.aSelectedFiles.size = [];\r\n                    appData.aSelectedFolders = [];\r\n                    document.getElementById(\"refresh\").click();\r\n                    document.getElementById(\r\n                        \"ModalDialog-button-confirm\"\r\n                    ).style.display = \"none\";\r\n                    document.getElementById(\"ModalDialog-button-cancel\").innerHTML =\r\n                        \"OK\";\r\n                  }\r\n              }\r\n            } else {\r\n              let el = document.querySelector(\"#ModalDialog-wrap\");\r\n              el.parentNode.removeChild(el);\r\n              _deselectAllFiles();\r\n              _deselectAllFolders();\r\n              showToast(\r\n                \"Share files\",\r\n                \"Error al compartir archivo \" +\r\n                  data.fileName +\r\n                  \".<br>Err:\" +\r\n                  d.data.message,\r\n                \"error\"\r\n              );\r\n            }\r\n          })\r\n          .catch(e => {\r\n            let el = document.querySelector(\"#ModalDialog-wrap\");\r\n            el.parentNode.removeChild(el);\r\n            _deselectAllFiles();\r\n            _deselectAllFolders();\r\n            showToast(\r\n              \"Share files\",\r\n              \"Error al compartir archivo \" + data.fileName + \".<br>Err:\" + e,\r\n              \"error\"\r\n            );\r\n            if (userData.RunMode === \"DEBUG\") console.log(e);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  let modalDialogOptions = {\r\n    cancel: true,\r\n    cancelText: \"Cancel\",\r\n    confirm: true,\r\n    confirmText: \"Share\",\r\n    type: \"shareFile\"\r\n  };\r\n\r\n  modalDialogOptions.confirmCallBack = async function(e, data) {\r\n    if (userData.RunMode === \"DEBUG\") console.log(\"shareFile: \", data);\r\n    if (data || data.destUserName.trim() !== \"\") {\r\n      _shareFile(data);\r\n    }\r\n  };\r\n  modalDialogOptions.cancelCallBack = async function(e, data) {\r\n    console.log(data);\r\n  };\r\n  modalDialog(\r\n    \"Share File\",\r\n    `      <input id=\"destUserName\" type=\"email\" autocomplete=\"off\" pattern=\".+@globex.com\" required class=\"ModalDialog-input\"/>\r\n                    <label for=\"destUserName\" class=\"ModalDialog-label share\">Send URL to</label>\r\n                    <input class=\"datepicker ModalDialog-input\" id=\"FileExpirateDate\" type=\"date\"/>\r\n                    <label for=\"FileExpirateDate\" class=\"ModalDialog-label datepicker share\">Expiration Date</label>\r\n                    <br>\r\n                    <input id=\"delFileAfterExpired\" type=\"checkbox\" class=\"ModalDialog-check-input share\">\r\n                    <label for=\"delFileAfterExpired\" class=\"ModalDialog-check-label share\">Delete File</label>\r\n                    <br><br>\r\n                    <label id=\"urlFile\" class=\"label-url-share\"></label>`,\r\n    modalDialogOptions\r\n  );\r\n\r\n  /**/\r\n  //htmlShareFile;\r\n}\r\n\r\n//////////////////////\r\n// Show Shared Files\r\n//////////////////////\r\n\r\nexport function showSharedFiles() {\r\n  let AddUserModalContent = document.querySelector(\"#AddUserModalContent\");\r\n  let containerOverlay = document.querySelector(\".container-overlay\");\r\n\r\n  AddUserModalContent.innerHTML = htmlSearchSharedFilesTemplate;\r\n  $u(\"#AddUserModalContent\").addClass(\"edit\");\r\n  AddUserModalContent.style.display = \"block\";\r\n  containerOverlay.style.display = \"block\";\r\n  document.querySelector(\"#waiting\").classList.add(\"active\");\r\n  axios\r\n    .get(\"/files/shared/user/\" + userData.UserName, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + userData.Token\r\n      },\r\n      timeout: 30000\r\n    })\r\n    .then(d => {\r\n      document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n      if (userData.RunMode === \"DEBUG\") console.log(\"Hello: \", d.data.status);\r\n      if (d.data.status === \"OK\") {\r\n        let files = d.data.data;\r\n        let i;\r\n        let htmlListContent = \"\";\r\n        let bodyList = document.querySelector(\"#bodyList\");\r\n        if (userData.RunMode === \"DEBUG\") console.log(\"files: \", files.length);\r\n        for (i = 0; i < files.length; i++) {\r\n          let sDate = files[i].ExpirateDate ? files[i].ExpirateDate : \"never\";\r\n          let d = files[i].DeleteExpiredFile === 1 ? true : false;\r\n          htmlListContent += `\r\n                  <tr class=\"data-row\">\r\n                    <td>${files[i].id}</td>\r\n                    <td>${files[i].User}</td>\r\n                    <td>${files[i].DestUser}</td>\r\n                    <td>${files[i].FileName}</td>\r\n                    <td>${files[i].State}</td>\r\n                    <td>${files[i].ExpirateDate}</td>\r\n                    <td>${d}</td>\r\n                    <td>${files[i].GroupId}</td>\r\n                    <td>\r\n                    <i id=\"${\r\n                      files[i].Id\r\n                    }-id\" class=\"fas fa-pencil edit-ShareFile-icon\" title=\"Editar Archivo\"></i>`;\r\n          htmlListContent += `\r\n                    <i id=\"${\r\n                      files[i].Id\r\n                    }-id\" class=\"fas fa-times del-SharedFile-icon\" title=\"Borrar Archivo\"></i></td>\r\n                  </tr>`;\r\n\r\n          //console.log('User Role. ',users[i].UserRole.trim().toUpperCase());\r\n        }\r\n        bodyList.innerHTML = htmlListContent;\r\n\r\n        let table = new DataTable(\r\n          document.querySelector(\"#SharedFilesTableList\"),\r\n          {\r\n            searchable: true,\r\n            fixedHeight: true,\r\n            info: false,\r\n            perPageSelect: null,\r\n            perPage: 200\r\n          }\r\n        );\r\n\r\n        [].forEach.call(\r\n          document.querySelectorAll(\".del-SahredFile-icon\"),\r\n          function(el) {\r\n            el.addEventListener(\"click\", function(e) {\r\n              let userId = e.target.id.slice(0, -3);\r\n              let userName =\r\n                e.target.parentNode.parentNode.children[1].innerHTML;\r\n              userName = userName.charAt(0).toUpperCase() + userName.slice(1);\r\n              console.log(\"userId: \", userId);\r\n              _removeUser(userId, userName, d => {\r\n                showToast(\r\n                  \"Delete User\",\r\n                  `Usuario ${userName} borrado`,\r\n                  \"success\"\r\n                );\r\n                AddUserModalContent.style.display = \"none\";\r\n                $u(\"#AddUserModalContent\").removeClass(\"edit\");\r\n                containerOverlay.style.display = \"none\";\r\n                document.getElementById(\"userMod\").click();\r\n              });\r\n            });\r\n          }\r\n        );\r\n\r\n        [].forEach.call(\r\n          document.querySelectorAll(\".edit-SharedFile-icon\"),\r\n          function(el) {\r\n            el.addEventListener(\"click\", function(e) {\r\n              let userId = e.target.id.slice(0, -3);\r\n              console.log(\"userId: \", userId);\r\n              _editUser(userId, d => {\r\n                document.querySelector(\"#AddUserModalContent\").style.display =\r\n                  \"none\";\r\n                $u(\"#AddUserModalContent\").removeClass(\"edit\");\r\n                document.querySelector(\".container-overlay\").style.display =\r\n                  \"none\";\r\n                showAddUserForm(\"Edit User\", d);\r\n              });\r\n            });\r\n          }\r\n        );\r\n\r\n        document\r\n          .querySelector(\"#btn-EditSharedFileCancel\")\r\n          .addEventListener(\"click\", e => {\r\n            e.preventDefault();\r\n            AddUserModalContent.style.display = \"none\";\r\n            $u(\"#AddUserModalContent\").removeClass(\"edit\");\r\n            containerOverlay.style.display = \"none\";\r\n          });\r\n      } else {\r\n        showToast(\"Users\", d.data.data.message, \"error\");\r\n      }\r\n    })\r\n    .catch(e => {\r\n      document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n      if (userData.RunMode === \"DEBUG\") console.log(e);\r\n      showToast(\"Users\", e, \"error\");\r\n    });\r\n}\r\n\r\n/////////////////////////////////////\r\n// Delete Files & Folders selected\r\n/////////////////////////////////////\r\n\r\nexport function deleteSelected() {\r\n  if (userData.RunMode === \"DEBUG\")\r\n    console.log(\"aSelectedFolders: \", appData.aSelectedFolders.length);\r\n  let modalDialogOptions = {\r\n    cancel: true,\r\n    cancelText: \"Cancel\",\r\n    confirm: true,\r\n    confirmText: \"OK\",\r\n    width: \"340px\"\r\n  };\r\n  if (appData.aSelectedFolders.length > 0) {\r\n    let result = 0;\r\n    modalDialogOptions.confirmCallBack = async () => {\r\n      await deleteFolder(appData.currentPath);\r\n      await _deselectAllFolders();\r\n      if (appData.aSelectedFiles.name.length > 0) {\r\n        modalDialogOptions.confirmCallBack = async () => {\r\n          await deleteFile(appData.currentPath);\r\n        };\r\n        modalDialogOptions.confirmText = \"OK\";\r\n        modalDialog(\r\n          \"Delete Files\",\r\n          \"Delete selected files?\",\r\n          modalDialogOptions\r\n        );\r\n      } else {\r\n        document.getElementById(\"refresh\").click();\r\n      }\r\n    };\r\n    modalDialogOptions.cancelCallBack = async () => {\r\n      await _deselectAllFolders();\r\n      if (appData.aSelectedFiles.name.length > 0) {\r\n        modalDialogOptions.confirmCallBack = async () => {\r\n          await deleteFile(appData.currentPath);\r\n        };\r\n        modalDialogOptions.cancelCallBack = async () => {\r\n          await _deselectAllFiles();\r\n        };\r\n        modalDialogOptions.confirmText = \"OK\";\r\n        modalDialog(\r\n          \"Delete Files\",\r\n          \"Delete selected files?\",\r\n          modalDialogOptions\r\n        );\r\n      }\r\n    };\r\n    modalDialogOptions.confirmText = \"Yes, I'm very sure\";\r\n    modalDialog(\r\n      \"Delete Folders\",\r\n      `<div class=\"warning-lbl\">WARNING:</div>\r\n            <div class=\"warning-msg\">All selected folders and their contents will be deleted.!!</div>\r\n            <div class=\"msg\">Are you sure?</div>`,\r\n      modalDialogOptions\r\n    );\r\n  } else {\r\n    if (appData.aSelectedFiles.name.length > 0) {\r\n      modalDialogOptions.confirmCallBack = async () => {\r\n        await deleteFile(appData.currentPath);\r\n        document.getElementById(\"refresh\").click();\r\n      };\r\n      modalDialogOptions.cancelCallBack = async () => {\r\n        await _deselectAllFiles();\r\n      };\r\n      modalDialog(\"Delete Files\", \"Delete selected files?\", modalDialogOptions);\r\n    }\r\n  }\r\n}\r\n\r\n/////////////////////////////////////\r\n// Add new Folder\r\n/////////////////////////////////////\r\n\r\nexport function newFolder(folderName) {\r\n  const headers = new Headers();\r\n  headers.append(\"Authorization\", \"Bearer \" + userData.Token);\r\n  headers.append(\"Content-Type\", \"application/json\");\r\n  fetch(\"/files/newfolder\", {\r\n    method: \"POST\",\r\n    headers: headers,\r\n    body: JSON.stringify({\r\n      path: getRealPath(appData.currentPath),\r\n      folderName: folderName\r\n    }),\r\n    timeout: 10000\r\n  })\r\n    .then(r => r.json())\r\n    .then(data => {\r\n      if (userData.RunMode === \"DEBUG\") console.log(data);\r\n      if (data.status == \"OK\") {\r\n        $u(\"#modal\").hide();\r\n        $u(\"#lean-overlay\").hide();\r\n        $u(\"#refresh\").trigger(\"click\");\r\n        showToast(\r\n          \"New Folder\",\r\n          \"Creada nueva carpeta \" + data.data.folderName,\r\n          \"success\"\r\n        );\r\n      } else {\r\n        showToast(\r\n          \"Error\",\r\n          \"Error al crear la carpeta \" +\r\n            folderName +\r\n            \" <br>Error: \" +\r\n            data.message,\r\n          \"error\"\r\n        );\r\n      }\r\n    })\r\n    .catch(err => {\r\n      showToast(\r\n        \"Error\",\r\n        \"Error al crear la carpeta \" +\r\n          folderName +\r\n          \" <br>Error: error no identificado\",\r\n        \"error\"\r\n      );\r\n      if (userData.RunMode === \"DEBUG\") console.log(err);\r\n    });\r\n}\r\n\r\n/////////////////////////////////////\r\n// Delete selected Files\r\n/////////////////////////////////////\r\n\r\nexport function deleteFile(path) {\r\n  const headers = new Headers();\r\n  let x = 0;\r\n  let aF = appData.aSelectedFiles.name.slice();\r\n  if (userData.RunMode === \"DEBUG\") console.log(aF);\r\n  headers.append(\"Authorization\", \"Bearer \" + userData.Token);\r\n  headers.append(\"Content-Type\", \"application/json\");\r\n  $(\"#waiting\").addClass(\"active\");\r\n  for (x = 0; x < aF.length; x++) {\r\n    if (userData.RunMode === \"DEBUG\")\r\n      console.log(\"Deleting file \" + aF[x] + \" ...\");\r\n    fetch(\"/files/delete\", {\r\n      method: \"POST\",\r\n      headers: headers,\r\n      body: JSON.stringify({\r\n        path: getRealPath(path),\r\n        fileName: aF[x]\r\n      }),\r\n      timeout: 720000\r\n    })\r\n      .then(FetchHandleErrors)\r\n      .then(r => r.json())\r\n      .then(d => {\r\n        if (userData.RunMode === \"DEBUG\") console.log(d);\r\n        if (d.status == \"OK\") {\r\n          appData.aSelectedFiles.name.shift();\r\n          appData.aSelectedFiles.size.shift();\r\n          showToast(\r\n            \"Delete file\",\r\n            \"Archivo \" + d.data.fileName + \" borrado\",\r\n            \"success\"\r\n          );\r\n          $u(\"#refresh\").trigger(\"click\");\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (userData.RunMode === \"DEBUG\") console.log(err);\r\n        showToast(\"Error\", err, \"error\");\r\n      });\r\n  }\r\n  $(\"#waiting\").removeClass(\"active\");\r\n}\r\n\r\n/////////////////////////////////////\r\n// Delete selected Folders\r\n/////////////////////////////////////\r\n\r\nexport function deleteFolder(path) {\r\n  const headers = new Headers();\r\n  let x = 0;\r\n  let aF = appData.aSelectedFolders.slice();\r\n  if (userData.RunMode === \"DEBUG\") console.log(aF);\r\n  headers.append(\"Authorization\", \"Bearer \" + userData.Token);\r\n  headers.append(\"Content-Type\", \"application/json\");\r\n  $(\"#waiting\").addClass(\"active\");\r\n  for (x = 0; x < aF.length; x++) {\r\n    if (userData.RunMode === \"DEBUG\")\r\n      console.log(\"Deleting folder \" + aF[x] + \" ...\");\r\n    fetch(\"/files/delete\", {\r\n      method: \"POST\",\r\n      headers: headers,\r\n      body: JSON.stringify({\r\n        path: getRealPath(path),\r\n        fileName: aF[x]\r\n      }),\r\n      timeout: 720000\r\n    })\r\n      .then(FetchHandleErrors)\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        if (userData.RunMode === \"DEBUG\") console.log(data);\r\n        if (data.status == \"OK\") {\r\n          showToast(\r\n            \"Delete Folder\",\r\n            \"Carpeta \" + data.data.fileName + \" borrada\",\r\n            \"success\"\r\n          );\r\n          appData.aSelectedFolders.shift();\r\n          $(\"#waiting\").removeClass(\"active\");\r\n          if (appData.aSelectedFiles.name.length === 0) {\r\n            $u(\"#refresh\").trigger(\"click\");\r\n          }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (userData.RunMode === \"DEBUG\") console.log(err);\r\n        $(\"#waiting\").removeClass(\"active\");\r\n      });\r\n  }\r\n  $(\"#waiting\").removeClass(\"active\");\r\n}\r\n\r\n/////////////////////////////////////\r\n// Upload Files\r\n/////////////////////////////////////\r\n\r\nexport function upload(Token) {\r\n  let w = 32;\r\n  let h = 440;\r\n  let aListHandler = [];\r\n  let handlerCounter = 0;\r\n  let uploadFiles = [];\r\n\r\n  let ModalTitle = \"Upload Files\";\r\n  let ModalContent = `\r\n    <label id=\"label-upload-input\" class=\"btn-input waves-effect waves-teal btn2-unify\">\r\n      Select files\r\n      <input id=\"upload-input\" type=\"file\" name=\"uploads[]\" multiple=\"multiple\" class=\"modal-action modal-close\">\r\n    </label>\r\n    <span id=\"sFiles\" class=\"upload-input-message\">Ningun archivo seleccionado</span>`;\r\n\r\n  ModalContent += htmlUploadDownloadTemplate;\r\n  let htmlContent = `\r\n    <div class=\"ModalDialog-alert\">\r\n      <div class=\"ModalDialog-mask\"></div>\r\n      <div class=\"ModalDialog-body download\">\r\n        <div class=\"ModalDialog-title\">\r\n          ${ModalTitle}\r\n        </div>\r\n        <a class=\"modal_close\" id=\"modalClose\" href=\"#\"></a>\r\n        <div class=\"ModalDialog-container\">\r\n          <div class=\"files-progress-content\">\r\n            ${ModalContent}\r\n          </div>\r\n        </div>      \r\n        <div class=\"ModalDialog-button\">\r\n              <!--<input type=\"text\" hidden id=\"destPath\" name=\"destPath\" value=\"\"/>-->\r\n              <a class=\"modal-action modal-close waves-effect waves-teal btn-flat btn2-unify disabled\" id=\"btnCancelAll\" href=\"#!\">Cancel uploads</a>  \r\n              <a class=\"modal-action modal-close waves-effect waves-teal btn-flat btn2-unify\" id=\"btnCloseUpload\" href=\"#!\">Close</a>\r\n        </div>\r\n      </div>\r\n    </div>`;\r\n\r\n  $u(\"#upload\").removeClass(\"disabled\");\r\n  $u(\"#upload\").addClass(\"disabled\");\r\n\r\n  function fnUploadFile(formData, nFile, fileName) {\r\n    $u(\"#li\" + nFile).show();\r\n    $u(\"#li-filename\" + nFile).show();\r\n    $u(\"#li-filename\" + nFile).html(fileName);\r\n    let realpath = getRealPath(appData.currentPath);\r\n    if (userData.RunMode === \"DEBUG\")\r\n      console.log(\"Upload:appData.currentPath \" + appData.currentPath);\r\n    if (userData.RunMode === \"DEBUG\")\r\n      console.log(\"Upload:REAL_ROOT_PATH \" + userData.REAL_ROOT_PATH);\r\n    if (userData.RunMode === \"DEBUG\")\r\n      console.log(\"Upload:realPath \" + realpath);\r\n    let CancelToken = axios.CancelToken;\r\n    let progressBar = document.querySelector(\"#progress-bar\" + nFile);\r\n    let percentLabel = document.querySelector(\"#percent\" + nFile);\r\n\r\n    document.querySelector(\"#upload-input\").disabled = true;\r\n\r\n    axios\r\n      .post(\"/files/upload?destPath=\" + realpath, formData, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + userData.Token,\r\n          destPath: realpath\r\n        },\r\n        timeout: 290000,\r\n        cancelToken: new CancelToken(function executor(c) {\r\n          aListHandler[nFile] = c;\r\n        }),\r\n        onUploadProgress: function(progressEvent) {\r\n          let _this = this;\r\n          //console.log(\"progressEvent: \", progressEvent);\r\n          let percentComplete = 0;\r\n          let evt = progressEvent;\r\n          //aListHandler[nFile].upload.addEventListener(\r\n          //  \"progress\",\r\n          //  function(evt) {\r\n          //console.log(fileName + \" File size: \", evt.total);\r\n          if (evt.total > userData.MaxFileSize) {\r\n            showToast(\r\n              \"Error\",\r\n              `${fileName} excede del tamaño soportado (${\r\n                userData.MaxFileSize\r\n              } Bytes)`,\r\n              \"error\"\r\n            );\r\n            aListHandler[nFile]();\r\n            _showAbortMessage(progressBar, \"Aborted by server\");\r\n            percentLabel.style.display = \"none\";\r\n            document.querySelector(\"#abort\" + nFile).style.display = \"none\";\r\n\r\n            handlerCounter = handlerCounter - 1;\r\n            if (handlerCounter == 0) {\r\n              document\r\n                .querySelector(\"#btnCancelAll\")\r\n                .classList.remove(\"disabled\");\r\n              document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n            }\r\n            //audit(userData.UserName,'UPLOAD',uploadFiles[nFile].fileName + ' [' + uploadFiles[nFile].fileSize + '] ->Upload canceled by Server','FAIL');\r\n            console.log(\r\n              \"AUDIT: \" +\r\n                userData.UserName +\r\n                \"UPLOAD\" +\r\n                uploadFiles[nFile].fileName +\r\n                \" [\" +\r\n                uploadFiles[nFile].fileSize +\r\n                \"] ->Upload canceled by Server,FAIL\"\r\n            );\r\n          } else {\r\n            if (evt.lengthComputable) {\r\n              if (progressBar.style.width !== \"100%\") {\r\n                percentComplete = evt.loaded / evt.total;\r\n                percentComplete = parseInt(percentComplete * 100);\r\n                percentLabel.innerHTML = percentComplete + \"%\";\r\n                progressBar.style.width = percentComplete + \"%\";\r\n              }\r\n            }\r\n          }\r\n          //false\r\n          //);\r\n          return aListHandler[nFile];\r\n        }\r\n      })\r\n      .then(data => {\r\n        //let data = JSON.parse(d);\r\n        if (userData.RunMode === \"DEBUG\")\r\n          console.log(\"Upload successful!\\n\", data);\r\n        if (userData.RunMode === \"DEBUG\")\r\n          console.log(\"handlerCounter1: \", handlerCounter);\r\n\r\n        if (data.data.status == \"OK\") {\r\n          showToast(\"Upload\", fileName + \" uploaded sucessfully\", \"success\");\r\n          //audit(userData.UserName,'UPLOAD',uploadFiles[nFile].fileName + ' [' + uploadFiles[nFile].fileSize +']','OK');\r\n          if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"ocultando abort\", nFile);\r\n          if (userData.RunMode === \"DEBUG\")\r\n            console.log(\r\n              \"AUDIT: \" + userData.UserName + \",UPLOAD,\",\r\n              uploadFiles[nFile].fileName +\r\n                \" [\" +\r\n                uploadFiles[nFile].fileSize +\r\n                \"],OK\"\r\n            );\r\n          document.querySelector(\"#abort\" + nFile).style.display = \"none\";\r\n          $u(\"#refresh\").trigger(\"click\");\r\n          handlerCounter = handlerCounter - 1;\r\n          console.log(\"handlerCounter2: \", handlerCounter);\r\n          if (handlerCounter == 0) {\r\n            $u(\"#btnCancelAll\").removeClass(\"disabled\");\r\n            $u(\"#btnCancelAll\").addClass(\"disabled\");\r\n          }\r\n        } else {\r\n          if (data.data.status == \"FAIL\") {\r\n            showToast(\"Error\", \"Error: \" + data.data.message, \"error\");\r\n            document.querySelector(\"#abort\" + nFile).style.dsiplay = \"none\";\r\n            //audit(userData.UserName,'UPLOAD',uploadFiles[nFile].fileName + ' [' + uploadFiles[nFile].fileSize + '] ->' + data.data.message,'FAIL');\r\n            handlerCounter = handlerCounter - 1;\r\n            if (handlerCounter == 0) {\r\n              document\r\n                .querySelector(\"#btnCancelAll\")\r\n                .classList.remove(\"disabled\");\r\n              document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n            }\r\n          }\r\n        }\r\n      })\r\n      .catch(e => {\r\n        console.log(\"Upload Error:\", e);\r\n      });\r\n  }\r\n\r\n  let element = document.createElement(\"div\");\r\n  element.id = \"ModalDialog-wrap\";\r\n  element.innerHTML = htmlContent;\r\n  document.body.appendChild(element);\r\n\r\n  document.querySelector(\"#upload-input\").style.display = \"block\";\r\n\r\n  document.querySelector(\"#btnCloseUpload\").addEventListener(\"click\", e => {\r\n    e.preventDefault();\r\n    let el = document.querySelector(\"#ModalDialog-wrap\");\r\n    el.parentNode.removeChild(el);\r\n    document.querySelector(\"#upload\").classList.remove(\"disabled\");\r\n  });\r\n\r\n  document.querySelector(\"#modalClose\").addEventListener(\"click\", e => {\r\n    e.preventDefault();\r\n    let el = document.querySelector(\"#ModalDialog-wrap\");\r\n    el.parentNode.removeChild(el);\r\n    document.querySelector(\"#upload\").classList.remove(\"disabled\");\r\n  });\r\n\r\n  [].forEach.call(document.querySelectorAll(\".file-abort\"), function(el) {\r\n    document.querySelector(\"#\" + el.id).addEventListener(\"click\", function(e) {\r\n      e.preventDefault();\r\n      let n = parseInt(e.target.id.slice(-1));\r\n      let percentLabel = document.querySelector(\"#percent\" + n);\r\n      let progressBar = document.querySelector(\"#progress-bar\" + n);\r\n      aListHandler[n]();\r\n      _showAbortMessage(progressBar, \"Canceled by user\");\r\n      percentLabel.style.display = \"none\";\r\n      document.querySelector(\"#abort\" + n).style.display = \"none\";\r\n      handlerCounter = handlerCounter - 1;\r\n      console.log(\"handlerCounter: \", handlerCounter);\r\n      if (handlerCounter == 0) {\r\n        document.querySelector(\"#btnCancelAll\").classList.remove(\"disabled\");\r\n        document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n      }\r\n      //audit(userData.UserName,'UPLOAD',uploadFiles[n].fileName + ' [' + uploadFiles[n].fileSize + '] ->Upload canceled by User','FAIL');\r\n      console.log(\r\n        \"AUDIT: \" +\r\n          userData.UserName +\r\n          \"UPLOAD\" +\r\n          uploadFiles[n].fileName +\r\n          \" [\" +\r\n          uploadFiles[n].fileSize +\r\n          \"] ->Upload canceled by User,FAIL\"\r\n      );\r\n    });\r\n  });\r\n\r\n  document.querySelector(\"#btnCancelAll\").addEventListener(\"click\", e => {\r\n    e.preventDefault();\r\n    for (let x = 0; x < 5; x++) {\r\n      let percentLabel = document.querySelector(\"#percent\" + x);\r\n      let progressBar = document.querySelector(\"#progress-bar\" + x);\r\n      if (aListHandler[x]) {\r\n        aListHandler[x]();\r\n        _showAbortMessage(progressBar, \"Canceled by User\");\r\n        percentLabel.style.display = \"none\";\r\n\r\n        document.querySelector(\"#abort\" + x).style.display = \"none\";\r\n        //audit(userData.UserName,'UPLOAD',uploadFiles[x].fileName + ' [' + uploadFiles[x].fileSize + '] ->Upload canceled by User','FAIL');\r\n        console.log(\r\n          \"AUDIT: \" +\r\n            userData.UserName +\r\n            \"UPLOAD\" +\r\n            uploadFiles[x].fileName +\r\n            \" [\" +\r\n            uploadFiles[x].fileSize +\r\n            \"] ->Upload canceled by User,FAIL\"\r\n        );\r\n      }\r\n    }\r\n    handlerCounter = 0;\r\n    document.querySelector(\"#btnCancelAll\").classList.remove(\"disabled\");\r\n    document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n  });\r\n\r\n  document.querySelector(\"#upload-input\").addEventListener(\"change\", e => {\r\n    e.preventDefault();\r\n    let files = document.querySelector(\"#upload-input\").files;\r\n    handlerCounter = files.length;\r\n    let htmlText = files.length > 0 ? '<a href=\"#\" id=\"selectedFiles\">' : \"\";\r\n    htmlText +=\r\n      files.length > 0 ? files.length + \" archivos seleccionados.\" : files[0];\r\n    htmlText += files.length > 0 ? \"</a>\" : \"\";\r\n\r\n    if (document.querySelector(\"#selectedFiles\")) {\r\n      document.querySelector(\"#selectedFiles\").addEventListener(\"click\", e => {\r\n        e.preventDefault();\r\n        $u(\"#sFiles\").removeClass(\"select\");\r\n        document\r\n          .querySelector(\"#label-upload-input\")\r\n          .classList.remove(\"disabled\");\r\n        document.querySelector(\"#label-upload-input\").onclick();\r\n      });\r\n    }\r\n\r\n    /*  if(files.lenght > 0) {\r\n           $u(\"#sFiles\").addClass('select');\r\n           document.querySelector(\"#label-upload-input\").classList.add(\"disabled\");\r\n           document.querySelector(\"#btnCancelAll\").classList.remove(\"disabled\");\r\n         } else {\r\n           $u(\"#sFiles\").removeClass('select');\r\n           document.querySelector(\"#label-upload-input\").classList.remove(\"disabled\");\r\n           document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n         }   */\r\n\r\n    document.querySelector(\"#sFiles\").innerHTML = htmlText;\r\n\r\n    if (userData.RunMode === \"DEBUG\") console.log(files.length);\r\n    if (files.length > 0 && files.length <= 5) {\r\n      document.querySelector(\"#btnCloseUpload\").classList.remove(\"disabled\");\r\n      document.querySelector(\"#btnCloseUpload\").classList.add(\"disabled\");\r\n      document.querySelector(\"#btnCancelAll\").classList.remove(\"disabled\");\r\n\r\n      for (let i = 0; i < files.length; i++) {\r\n        let file = files[i];\r\n        let formData = new FormData();\r\n        // add the files to formData object for the data payload\r\n        /* if(file.size > 1000) {\r\n                  showToast(\r\n                    \"Error\",\r\n                    \"El tamaño de archivo excede del límite\",\r\n                    \"error\"\r\n                  );\r\n                } */\r\n        formData.append(\"uploads[]\", file, file.name);\r\n        uploadFiles.push({\r\n          fileName: file.name,\r\n          fileSize: file.size\r\n        });\r\n        fnUploadFile(formData, i, file.name);\r\n      }\r\n      $(\"#btnCloseUpload\").removeClass(\"disabled\");\r\n    } else {\r\n      showToast(\r\n        \"Error\",\r\n        \"No se pueden subir más de 5 archivos a la vez\",\r\n        \"error\"\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n/////////////////////////////////////\r\n// Download selected Files\r\n/////////////////////////////////////\r\n\r\nexport function download(fileList, text) {\r\n  let reqList = [],\r\n    handlerCounter = 0,\r\n    responseTimeout = [];\r\n  let w = 32;\r\n  let h = 440;\r\n  let ModalTitle = \"Download selected files\";\r\n  let ModalContent = htmlUploadDownloadTemplate;\r\n  let htmlContent = `\r\n    <div class=\"ModalDialog-alert\">\r\n      <div class=\"ModalDialog-mask\"></div>\r\n      <div class=\"ModalDialog-body download\">\r\n        <div class=\"ModalDialog-title\">\r\n          ${ModalTitle}\r\n        </div>\r\n        <a class=\"modal_close\" id=\"modalClose\" href=\"#\"></a>\r\n        <div class=\"ModalDialog-container\">\r\n          <div class=\"files-progress-content\">\r\n            ${ModalContent}\r\n          </div>\r\n        </div>      \r\n        <div class=\"ModalDialog-button\">\r\n              <!--<input type=\"text\" hidden id=\"destPath\" name=\"destPath\" value=\"\"/>-->\r\n              <a class=\"modal-action modal-close waves-effect waves-teal btn-flat btn2-unify disabled\" id=\"btnCancelAll\" href=\"#!\">Cancel Downloads</a>  \r\n              <a class=\"modal-action modal-close waves-effect waves-teal btn-flat btn2-unify\" id=\"btnCloseDownload\" href=\"#!\">Close</a>\r\n        </div>\r\n      </div>\r\n    </div>`;\r\n\r\n  let element = document.createElement(\"div\");\r\n  element.id = \"ModalDialog-wrap\";\r\n  element.innerHTML = htmlContent;\r\n  document.body.appendChild(element);\r\n\r\n  const _closeModal = () => {\r\n    let el = document.querySelector(\"#ModalDialog-wrap\");\r\n    el.parentNode.removeChild(el);\r\n    document.querySelector(\"#download\").classList.remove(\"disabled\");\r\n    _deselectAllFiles();\r\n  };\r\n\r\n  document.querySelector(\"#btnCloseDownload\").addEventListener(\"click\", e => {\r\n    e.preventDefault();\r\n    _closeModal();\r\n  });\r\n\r\n  document.querySelector(\"#modalClose\").addEventListener(\"click\", e => {\r\n    e.preventDefault();\r\n    _closeModal();\r\n  });\r\n\r\n  document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n  document.querySelector(\"#download\").classList.add(\"disabled\");\r\n  document.querySelector(\"#waiting\").classList.add(\"active\");\r\n\r\n  document.querySelector(\"#btnCancelAll\").addEventListener(\"click\", e => {\r\n    for (let x = 0; x < reqList.length; x++) {\r\n      if (reqList[x]) {\r\n        reqList[x].abort();\r\n        let percentLabel = document.querySelector(\"#percent\" + x);\r\n        let progressBar = document.querySelector(\"#progress-bar\" + x);\r\n        _showAbortMessage(progressBar, \"Canceled by user\");\r\n        percentLabel.innerHTML = \"\";\r\n        //audit(userData.UserName,'DOWNLOAD',fileList[x] + ' ->Download canceled by User','FAIL');\r\n        console.log(\r\n          \"AUDIT: \" +\r\n            userData.UserName +\r\n            \"DOWNLOAD\" +\r\n            fileList.name[x] +\r\n            \" ->Upload canceled by User,FAIL\"\r\n        );\r\n      }\r\n    }\r\n    document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n  });\r\n\r\n  [].forEach.call(document.querySelectorAll(\".file-abort\"), function(el) {\r\n    document.querySelector(\"#\" + el.id).addEventListener(\"click\", function(e) {\r\n      e.preventDefault();\r\n      let n = parseInt(e.target.id.slice(-1));\r\n      reqList[n].abort();\r\n      let percentLabel = document.querySelector(\"#percent\" + n);\r\n      let progressBar = document.querySelector(\"#progress-bar\" + n);\r\n      _showAbortMessage(progressBar, \"Canceled by user\");\r\n      percentLabel.innerHTML = \"\";\r\n      document.querySelector(\"#abort\" + n).style.display = \"none\";\r\n      handlerCounter = handlerCounter - 1;\r\n      if (handlerCounter == 0) {\r\n        document.querySelector(\"#btnCancelAll\").classList.remove(\"disabled\");\r\n        document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n      }\r\n      document.querySelector(\"#upload\").classList.remove(\"disabled\");\r\n      //audit(userData.UserName,'DOWNLOAD',fileList[n] + ' ->Download canceled by User','FAIL');\r\n      console.log(\r\n        \"AUDIT: \" +\r\n          userData.UserName +\r\n          \"DOWNLOAD\" +\r\n          fileList.name[n] +\r\n          \" ->Upload canceled by User,FAIL\"\r\n      );\r\n    });\r\n  });\r\n\r\n  let _Download_Loop = i => {\r\n    let fName = fileList.name[i];\r\n    let fSize = fileList.size[i];\r\n    let liNumber = document.querySelector(\"#li\" + i);\r\n    let liFilename = document.querySelector(\"#li-filename\" + i);\r\n    let progressBar = document.querySelector(\"#progress-bar\" + i);\r\n    let percentLabel = document.querySelector(\"#percent\" + i);\r\n    responseTimeout[i] = false;\r\n    fName = fName\r\n      .split(\"\\\\\")\r\n      .pop()\r\n      .split(\"/\")\r\n      .pop();\r\n    reqList[i] = new XMLHttpRequest();\r\n    reqList[i].open(\"POST\", \"/files/download\", true);\r\n    reqList[i].responseType = \"arraybuffer\";\r\n    liNumber.style.display = \"block\";\r\n    liFilename.innerHTML = fName;\r\n    reqList[i].timeout = 36000;\r\n    reqList[i].ontimeout = function() {\r\n      // Download Timeout\r\n      if (userData.RunMode === \"DEBUG\")\r\n        console.log(\r\n          \"** Timeout error ->File:\" +\r\n            fName +\r\n            \" \" +\r\n            reqList[i].status +\r\n            \" \" +\r\n            reqList[i].statusText\r\n        );\r\n      // handlerCount = handlerCount - 1\r\n      _showAbortMessage(progressBar, \"Timeout Error\");\r\n      progressBar.classList.add(\"blink\");\r\n      responseTimeout[i] = true;\r\n    };\r\n    reqList[i].onprogress = function(evt) {\r\n      // Download progress\r\n      if (evt.lengthComputable) {\r\n        let percentComplete = parseInt((evt.loaded / evt.total) * 100);\r\n        progressBar.style.width = percentComplete + \"%\";\r\n        percentLabel.innerHTML = percentComplete + \"%\";\r\n      }\r\n    };\r\n    reqList[i].onabort = function() {\r\n      // Download abort\r\n      showToast(\r\n        \"Download File\",\r\n        \"Descarga de archivo \" + fName + \" cancelada\",\r\n        \"warning\"\r\n      );\r\n    };\r\n    reqList[i].onerror = function() {\r\n      // Download error\r\n      if (userData.RunMode === \"DEBUG\")\r\n        console.log(\r\n          \"** An error occurred during the transaction ->File:\" +\r\n            fName +\r\n            \" \" +\r\n            req.status +\r\n            \" \" +\r\n            req.statusText\r\n        );\r\n      handlerCounter = handlerCounter - 1;\r\n      percentLabel.innerHTML = \"Error\";\r\n      percentLabel.style.color = \"red\";\r\n      document.querySelector(\"#abort\" + i).style.display = \"none\";\r\n      showToast(\r\n        \"Download File\",\r\n        \"Error al descargar archivo \" + fName + \" \" + req.statusText,\r\n        \"error\"\r\n      );\r\n    };\r\n    reqList[i].onloadend = function(e) {\r\n      // Download End\r\n      console.log(\"File n:\" + i + \" ->\", reqList[i].readyState);\r\n      handlerCounter = handlerCounter - 1;\r\n      if (!responseTimeout[i]) {\r\n        progressBar.style.width = \"100%\";\r\n        percentLabel.innerHTML = \"100%\";\r\n        document.querySelector(\"#abort\" + i).style.display = \"none\";\r\n      }\r\n      if (handlerCounter === 0) {\r\n        document.querySelector(\"#btnCancelAll\").classList.add(\"disabled\");\r\n      }\r\n    };\r\n    reqList[i].onloadstart = function() {\r\n      handlerCounter = handlerCounter + 1;\r\n      progressBar.style.width = \"0\";\r\n      percentLabel.innerHTML = \"0%\";\r\n    };\r\n    reqList[i].onload = function() {\r\n      if (reqList[i].readyState === 4 && reqList[i].status === 200) {\r\n        showToast(\r\n          \"Download File\",\r\n          \"Archivo \" + fName + \" descargado\",\r\n          \"success\"\r\n        );\r\n        let filename = \"\";\r\n        let disposition = reqList[i].getResponseHeader(\"Content-Disposition\");\r\n        if (disposition && disposition.indexOf(\"attachment\") !== -1) {\r\n          let filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\r\n          let matches = filenameRegex.exec(disposition);\r\n          if (matches != null && matches[1])\r\n            filename = matches[1].replace(/['\"]/g, \"\");\r\n        }\r\n        let type = reqList[i].getResponseHeader(\"Content-Type\");\r\n        let blob = new Blob([this.response], {\r\n          type: type\r\n        });\r\n        if (typeof window.navigator.msSaveBlob !== \"undefined\") {\r\n          // IE workaround for \"HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed.\"\r\n          window.navigator.msSaveBlob(blob, filename);\r\n        } else {\r\n          let URL = window.URL || window.webkitURL;\r\n          let downloadUrl = URL.createObjectURL(blob);\r\n\r\n          if (filename) {\r\n            // use HTML5 a[download] attribute to specify filename\r\n            let a = document.createElement(\"a\");\r\n            // safari doesn't support this yet\r\n            if (typeof a.download === \"undefined\") {\r\n              window.location = downloadUrl;\r\n              preloader.style.display = \"none\";\r\n            } else {\r\n              a.href = downloadUrl;\r\n              a.download = filename;\r\n              document.body.appendChild(a);\r\n              a.click();\r\n            }\r\n          } else {\r\n            window.open = downloadUrl;\r\n          }\r\n\r\n          setTimeout(function() {\r\n            URL.revokeObjectURL(downloadUrl);\r\n          }, 100); // cleanup\r\n        }\r\n      }\r\n    };\r\n    reqList[i].setRequestHeader(\r\n      \"Content-type\",\r\n      \"application/x-www-form-urlencoded\"\r\n    );\r\n    if (userData.RunMode === \"DEBUG\")\r\n      console.log(getRealPath(appData.currentPath) + \"/\" + fileList.name[i]);\r\n    reqList[i].send(\r\n      serializeObject({\r\n        filename: getRealPath(appData.currentPath) + \"/\" + fileList.name[i]\r\n      })\r\n    );\r\n  };\r\n\r\n  document.querySelector(\"#btnCancelAll\").classList.remove(\"disabled\");\r\n  for (let i = 0; i < fileList.name.length; i++) {\r\n    _Download_Loop(i);\r\n  }\r\n  document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n}\r\n\r\n///////////////////////////////////\r\n// End Files and Folders module\r\n/////////////////////////////////\r\n","export function getRealPath(p) {\r\n      let rPath = \"\";\r\n      \r\n      if (userData.RunMode === \"DEBUG\") console.log(\"getRealPath:p \", p);\r\n      if (userData.RunMode === \"DEBUG\") console.log(\"getRealPath:userData.RealRootPath \", userData.RealRootPath);\r\n      if (p == \"/\" && (userData.RealRootPath === \"/\" || userData.RealRootPath === \"\")) {     \r\n        rPath = p;\r\n      } else {\r\n        if (p == \"/\") {\r\n          rPath = \"/\" + userData.RealRootPath;\r\n        } else {\r\n          if(userData.RealRootPath !== '/'){\r\n            rPath = \"/\" + userData.RealRootPath + p;\r\n          } else {\r\n            if(p.indexOf('/') !== 0) {\r\n              rPath =  userData.RealRootPath + p;\r\n            } else {\r\n              rPath =  p;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (userData.RunMode === \"DEBUG\") console.log(\"getRealPath:rPath \", rPath);\r\n      return rPath;\r\n    }\r\n\r\nexport function serializeObject(dataObject) {\r\n      var stringResult = \"\",\r\n        value = void 0;\r\n      for (var key in dataObject) {\r\n        if (userData.RunMode === \"DEBUG\") console.log(dataObject[key], key);\r\n        value = dataObject[key];\r\n        if (stringResult !== \"\") {\r\n          stringResult += \"&\" + key + \"=\" + value;\r\n        } else {\r\n          stringResult += key + \"=\" + value;\r\n        }\r\n      }\r\n      return stringResult;\r\n    }   \r\n","import axios from \"axios\";\r\nimport {\r\n    Base64\r\n} from \"js-base64\";\r\nimport md5 from \"../vendor/md5.min\";\r\nimport moment from \"moment\";\r\nimport {\r\n    modalDialog\r\n} from \"../vendor/modalDialog\";\r\nimport DataTable from \"../vendor/dataTables\";\r\n\r\n////////////////////////////////////\r\n// Users manage module\r\n///////////////////////////////////\r\nlet htmlUserFormTemplate = `\r\n    <div class=\"userForm-container\">\r\n      <form id=\"formAddUser\" class=\"userForm-content\">\r\n        <div class=\"userForm-row\">\r\n          <div class=\"userForm-title\">New User</div>\r\n        </div>\r\n        <br>\r\n        <div class=\"userForm-row\">\r\n          <div class=\"userForm-group\">\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container\">\r\n              <input id=\"UserName\" type=\"text\" class=\"userForm-input\">\r\n                <label for=\"UserName\" class=\"userForm-label\">Name</label>\r\n            </div>   \r\n             </div>\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container\">\r\n              <input id=\"CompanyName\" type=\"text\" class=\"userForm-input\">\r\n                <label for=\"CompanyName\" class=\"userForm-label\">Company Name</label>\r\n            </div>   \r\n             </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"userForm-row\">\r\n         <div class=\"userForm-group\"> \r\n          <div class=\"userForm-field-content\">\r\n            <div class=\"userForm-input-container\">\r\n              <input id=\"UserPasswd\" type=\"password\" autocomplete=\"off\" class=\"userForm-input\">\r\n                <label for=\"UserPasswd\" class=\"userForm-label\">Password</label>\r\n            </div>    \r\n          </div>\r\n          <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container\">\r\n              <input id=\"repeatUserPasswd\" type=\"password\" autocomplete=\"off\" class=\"userForm-input\">\r\n                <label for=\"repeatUserPasswd\" class=\"userForm-label\">Repeat Password</label>\r\n            </div> \r\n          </div>\r\n          </div>  \r\n        </div>\r\n        <div class=\"userForm-row\">\r\n          <div class=\"userForm-group\">\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container\">\r\n              <input id=\"RootPath\" type=\"text\" class=\"userForm-input\">\r\n                <label for=\"RootPath\" class=\"userForm-label\">Root Path</label>\r\n            </div> \r\n             </div>\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container\">\r\n              <i id=\"FindPath\"></i>\r\n                <input class=\"datepicker userForm-input used\" id=\"ExpirateDate\" type=\"date\">\r\n                <label for=\"ExpirateDateInput\" class=\"userForm-label\">Expiration Date</label>\r\n            </div> \r\n             </div>\r\n          </div> \r\n        </div>\r\n        <div class=\"userForm-row\">\r\n          <div class=\"userForm-title\">Access Rights</div>\r\n        </div>\r\n        <br>\r\n        <div class=\"userForm-row\">            \r\n              <div class=\"userForm-input-field\">\r\n                <label class=\"userForm-select-label\">User Role</label>\r\n                <input id=\"Role\" type=\"hidden\" value=\"\" class=\"userForm-input\">\r\n                <select id=\"RoleOptions\" name=\"optionsname\" required=\"\" class=\"userForm-select\">\r\n                  <option value=\"opt1\">User</option>\r\n                  <option value=\"opt2\">Admin</option>\r\n                  <option value=\"opt3\">Advanced User</option>\r\n                  <option value=\"opt4\">Custom</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n        <br>\r\n        <div class=\"userForm-row\">\r\n          <div class=\"userForm-group\">\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container-switch\">\r\n                  <label class=\"switch-label\">Download</label>\r\n                <label class=\"switch jsSwitcher\" role=\"switch\" aria-label=\"regular switch\" aria-checked=\"false\">\r\n                  <input type=\"checkbox\" class=\"off-screen AccessRightsSwitch\" name=\"switcher\" aria-hidden=\"true\" />\r\n                  <span class=\"switch__off-text\" aria-hidden=\"true\">Deny</span>\r\n                  <span class=\"switch__lever\"></span>\r\n                  <span class=\"switch__on-text\" aria-hidden=\"true\">Allow</span>\r\n                </label>\r\n                </div>\r\n            </div>\r\n            <div class=\"userForm-field-separator\"></div>\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container-switch\">\r\n                  <span class=\"switch-label\">Upload</span>\r\n                <label class=\"switch jsSwitcher\" role=\"switch\" aria-label=\"regular switch\" aria-checked=\"false\">\r\n                  <input type=\"checkbox\" class=\"off-screen AccessRightsSwitch\" name=\"switcher\" aria-hidden=\"true\" />\r\n                  <span class=\"switch__off-text\" aria-hidden=\"true\">Deny</span>\r\n                  <span class=\"switch__lever\"></span>\r\n                  <span class=\"switch__on-text\" aria-hidden=\"true\">Allow</span>\r\n                </label>\r\n                </div>\r\n            </div>\r\n          </div>  \r\n        </div>\r\n        <div class=\"userForm-row\">\r\n          <div class=\"userForm-group\">\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container-switch\">\r\n                  <span class=\"switch-label\">Delete File</span>\r\n                <label class=\"switch jsSwitcher\" role=\"switch\" aria-label=\"regular switch\" aria-checked=\"false\">\r\n                  <input type=\"checkbox\" class=\"off-screen AccessRightsSwitch\" name=\"switcher\" aria-hidden=\"true\" />\r\n                  <span class=\"switch__off-text\" aria-hidden=\"true\">Deny</span>\r\n                  <span class=\"switch__lever\"></span>\r\n                  <span class=\"switch__on-text\" aria-hidden=\"true\">Allow</span>\r\n                </label>\r\n                </div>\r\n            </div>\r\n            <div class=\"userForm-field-separator\"></div>\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container-switch\">\r\n                  <span class=\"switch-label\">Delete Folder</span>\r\n                <label class=\"switch jsSwitcher\" role=\"switch\" aria-label=\"regular switch\" aria-checked=\"false\">\r\n                  <input type=\"checkbox\" class=\"off-screen AccessRightsSwitch\" name=\"switcher\" aria-hidden=\"true\" />\r\n                  <span class=\"switch__off-text\" aria-hidden=\"true\">Deny</span>\r\n                  <span class=\"switch__lever\"></span>\r\n                  <span class=\"switch__on-text\" aria-hidden=\"true\">Allow</span>\r\n                </label>\r\n                </div>\r\n            </div>\r\n          </div>  \r\n        </div>\r\n        <div class=\"userForm-row\">\r\n          <div class=\"userForm-group\">\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container-switch\">\r\n                  <span class=\"switch-label\">Add Folder</span>\r\n                <label class=\"switch jsSwitcher\" role=\"switch\" aria-label=\"regular switch\" aria-checked=\"false\">\r\n                  <input type=\"checkbox\" class=\"off-screen AccessRightsSwitch\" name=\"switcher\" aria-hidden=\"true\" />\r\n                  <span class=\"switch__off-text\" aria-hidden=\"true\">Deny</span>\r\n                  <span class=\"switch__lever\"></span>\r\n                  <span class=\"switch__on-text\" aria-hidden=\"true\">Allow</span>\r\n                </label>\r\n                </div>\r\n            </div>\r\n            <div class=\"userForm-field-separator\"></div>\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container-switch\">\r\n                  <span class=\"switch-label\">Share files</span>\r\n                <label class=\"switch jsSwitcher\" role=\"switch\" aria-label=\"regular switch\" aria-checked=\"false\">\r\n                  <input type=\"checkbox\" class=\"off-screen AccessRightsSwitch\" name=\"switcher\" aria-hidden=\"true\" />\r\n                  <span class=\"switch__off-text\" aria-hidden=\"true\">Deny</span>\r\n                  <span class=\"switch__lever\"></span>\r\n                  <span class=\"switch__on-text\" aria-hidden=\"true\">Allow</span>\r\n                </label>\r\n                </div>\r\n            </div>\r\n          </div>  \r\n        </div>\r\n        <br>\r\n        <div class=\"userForm-footer\">\r\n          <div class=\"userForm-group\">\r\n            <div class=\"userForm-field-content\">\r\n            </div>  \r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container\">\r\n                    <button class=\"waves-effect waves-teal btn-flat btn2-unify\" id=\"btn-addUserCancel\" type=\"submit\" name=\"action\">Cancel</button>\r\n                </div> \r\n             </div>\r\n            <div class=\"userForm-field-content\">\r\n                <div class=\"userForm-input-container\">\r\n                    <button class=\"waves-effect waves-teal btn-flat btn2-unify\" id=\"btn-addUserAcept\" type=\"submit\" name=\"action\">Accept</button>\r\n                </div> \r\n             </div>\r\n             <div class=\"userForm-field-content\">\r\n            </div> \r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>`;\r\n\r\n/* let htmlSearchUserTemplate = `<div id=\"searchUserModal\">\r\n                                  <div class=\"row\"> \r\n                                    <div class=\"input-field col s12 m12\"></div>\r\n                                  </div>\r\n                                  <div class=\"row\" id=\"searchUser\">\r\n                                  <div class=\"input-field col s1 m1\"></div>\r\n                                    <div class=\"input-field col s5\">\r\n                                    <input id=\"searchUserName\" type=\"text\" autocomplete=\"off\" />\r\n                                    <label for=\"usersList\">Search User</label></div>\r\n                                    <div id=\"user-List\" >\r\n                                    </div> \r\n                                    <div class=\"input-field col s2\">\r\n                                      <i class=\"fa fa-search\" id=\"btnSearchUser\"></i>\r\n                                    </div>\r\n                                    <div class=\"input-field col s4 m4\"></div>\r\n                                    <div class=\"row\"> \r\n                                    <div class=\"input-field col s9 m9\"></div>\r\n                                    <div class=\"input-field col s2 m2\">\r\n                                      <button class=\"waves-effect waves-teal btn-flat btn2-unify right\" id=\"btn-SearchUserCancel\" type=\"submit\" name=\"action\">Cancel</button></div>\r\n                                    </div>\r\n                                    <div class=\"input-field col s1 m1\"></div>\r\n                                    </div>\r\n                                </div>`; */\r\n/*let htmlSearchUserTemplate = `\r\n<div class=\"userForm-container\">\r\n  <div id=\"users\" class=\"userForm-content\">\r\n  <input class=\"search\" placeholder=\"Search\" />\r\n  <span class=\"sort\" data-sort=\"UserName\">Sort by name</span>\r\n  <span class=\"sort\" data-sort=\"CompanyName\">Sort by Company Name</span>\r\n  <div class=\"head-list\">\r\n      <div>UserId</div> \r\n      <div>UserName</div>\r\n      <div>CompanyName</div>\r\n      <div>RootPath</div>\r\n      <div>AccessString</div>\r\n      <div>ExpirateDate</div>\r\n  </div>     \r\n  <ul id=\"tableList\" class=\"list\">\r\n  </ul>\r\n  </div>\r\n</div>\r\n`;*/\r\n\r\nlet htmlSearchUserTemplate = `\r\n<div>\r\n      <div class=\"head-Title\">Edit Users</div> \r\n      <table id=\"usersTableList\" class=\"tableList\">\r\n        <thead>\r\n          <tr>\r\n            <th>User Id</th>\r\n            <th>User Name</th>\r\n            <th>User Role</th>\r\n            <th>Company Name</th>\r\n            <th>Root Path</div>\r\n            <th data-type=\"date\" data-format=\"YYYY/MM/DD\">Expirate Date</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody id=\"bodyList\">    \r\n        </tbody>\r\n      </table>\r\n      <div class=\"AddUserModalContent-footer\">\r\n        <div class=\"button-container\">\r\n            <button class=\"waves-effect waves-teal btn-flat btn2-unify\" id=\"btn-EditUserCancel\" type=\"submit\" name=\"action\">Close</button>\r\n        </div> \r\n      </div>\r\n</div>\r\n`;\r\n\r\nconst checkAccessRights = (aSwitch, role, accessRights) => {\r\n    let opt = \"\";\r\n    //let aAccessRights = split(accessRights, \",\");\r\n    \r\n    if (role !== \"Custom\") {\r\n        switch (role.toUpperCase()) {\r\n            case \"USER\":\r\n                opt = \"opt1\";\r\n                break;\r\n            case \"ADMIN\":\r\n                opt = \"opt2\";\r\n                break;\r\n            case \"ADVANCED USER\":\r\n                opt = \"opt3\";\r\n                break;\r\n        }\r\n        changeAccessRights(aSwitch, opt);\r\n    } else {\r\n      aSwitch[0].checked = accessRights.download ;\r\n      aSwitch[1].checked = accessRights.upload;\r\n      aSwitch[2].checked = accessRights.deletefile;\r\n      aSwitch[3].checked = accessRights.deletefolder ;\r\n      aSwitch[4].checked = accessRights.addfolder;\r\n      aSwitch[5].checked = accessRights.sharefiles;    \r\n    }\r\n};\r\n\r\nconst changeAccessRights = (AccessSwitch, opt) => {\r\n    for (let x = 0; x < AccessSwitch.length; x++) {\r\n        AccessSwitch[x].disabled = false;\r\n    }\r\n    switch (opt) {\r\n        case \"opt1\":\r\n            AccessSwitch[0].checked = true; //Download\r\n            AccessSwitch[1].checked = true; //Upload\r\n            AccessSwitch[2].checked = false;\r\n            AccessSwitch[3].checked = false;\r\n            AccessSwitch[5].checked = false;\r\n            AccessSwitch[2].disabled = true;\r\n            AccessSwitch[3].disabled = true;\r\n            AccessSwitch[4].checked = true; // Add Folders\r\n            AccessSwitch[4].disabled = true;\r\n            AccessSwitch[5].disabled = true;\r\n            break;\r\n        case \"opt2\":\r\n            AccessSwitch[0].checked = true;\r\n            AccessSwitch[1].checked = true;\r\n            AccessSwitch[2].checked = true;\r\n            AccessSwitch[3].checked = true;\r\n            AccessSwitch[4].checked = true;\r\n            AccessSwitch[5].checked = true;\r\n            break;\r\n        case \"opt3\":\r\n            AccessSwitch[0].checked = true;\r\n            AccessSwitch[1].checked = true;\r\n            AccessSwitch[2].checked = false; // Delete Files\r\n            AccessSwitch[2].disabled = true;\r\n            AccessSwitch[3].checked = false; // Delete Folders\r\n            AccessSwitch[3].disabled = true;\r\n            AccessSwitch[4].checked = true; // Add Folders\r\n            AccessSwitch[4].disabled = true;\r\n            AccessSwitch[5].checked = true; // Shared Files\r\n            AccessSwitch[5].disabled = true;\r\n            break;\r\n        case \"opt4\":\r\n            AccessSwitch[0].checked = false;\r\n            AccessSwitch[1].checked = false;\r\n            AccessSwitch[2].checked = false;\r\n            AccessSwitch[3].checked = false;\r\n            AccessSwitch[4].checked = false;\r\n            AccessSwitch[5].checked = false;\r\n            break;\r\n    }\r\n};\r\n\r\nconst _editUser = (userId, callback) => {\r\n    document.querySelector(\"#waiting\").classList.add(\"active\");\r\n    axios\r\n        .get(\"/user/\" + userId, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: \"Bearer \" + userData.Token\r\n            },\r\n            timeout: 30000\r\n        })\r\n        .then((d) => {\r\n            document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n            if (userData.RunMode === \"DEBUG\") console.log(d.data.data);\r\n            callback(d.data.data);\r\n        })\r\n        .catch((e) => {\r\n            document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n            showToast(\r\n                \"Search Users\",\r\n                \"Error al buscar usuario.<br>Err:\" + e,\r\n                \"error\"\r\n            );\r\n            if (userData.RunMode === \"DEBUG\") console.log(e);\r\n        });\r\n};\r\n\r\nconst _removeUser = (userId, userName, callback) => {\r\n    document.querySelector(\"#waiting\").classList.add(\"active\");\r\n    axios({\r\n            url: \"/user/\" + userId,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: \"Bearer \" + userData.Token\r\n            },\r\n            timeout: 30000,\r\n            method: 'delete',\r\n            data: {\r\n                userName: userName\r\n            }\r\n        })\r\n        .then((d) => {\r\n            document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n            if (userData.RunMode === \"DEBUG\") console.log(d);\r\n            callback(d.data.data);\r\n        })\r\n        .catch((e) => {\r\n            document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n            showToast(\r\n                \"Search Users\",\r\n                \"Error al borrar usuario.<br>Err:\" + e,\r\n                \"error\"\r\n            );\r\n            if (userData.RunMode === \"DEBUG\") console.log(e);\r\n        });\r\n};\r\n\r\n\r\n\r\nexport function searchUserName(userName) {\r\n    if (userData.RunMode === \"DEBUG\") console.log(userName);\r\n    document.querySelector(\"#waiting\").classList.add(\"active\");\r\n    axios\r\n        .get('/searchuser?userName=\" + userName', {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: \"Bearer \" + userData.Token\r\n            },\r\n            timeout: 30000\r\n        })\r\n        .then(d => {\r\n            document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n            if (userData.RunMode === \"DEBUG\") console.log(d);\r\n            if (d.data.status == \"OK\") {\r\n                showAddUserForm(\"Edit User\", d.data);\r\n            } else {\r\n                showToast(\"Search Users\", d.data.message, \"error\");\r\n            }\r\n        })\r\n        .catch(e => {\r\n            document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n            showToast(\r\n                \"Search Users\",\r\n                \"Error al buscar usuario \" + userName + \".<br>Err:\" + e,\r\n                \"error\"\r\n            );\r\n            if (userData.RunMode === \"DEBUG\") console.log(e);\r\n        });\r\n}\r\n\r\nexport function editUser() {\r\n    let AddUserModalContent = document.querySelector(\"#AddUserModalContent\");\r\n    let containerOverlay = document.querySelector(\".container-overlay\");\r\n\r\n    AddUserModalContent.innerHTML = htmlSearchUserTemplate;\r\n    $u(\"#AddUserModalContent\").addClass(\"edit\");\r\n    AddUserModalContent.style.display = \"block\";\r\n    containerOverlay.style.display = \"block\";\r\n    document.querySelector(\"#waiting\").classList.add(\"active\");\r\n    axios\r\n        .get(\"/users\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: \"Bearer \" + userData.Token\r\n            },\r\n            timeout: 30000\r\n        })\r\n        .then(d => {\r\n            document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n            if (userData.RunMode === \"DEBUG\") console.log(d);\r\n            if (d.data.status === \"OK\") {\r\n                let users = d.data.data;\r\n                let i;\r\n                let htmlListContent = \"\";\r\n                let bodyList = document.querySelector(\"#bodyList\");\r\n                if (userData.RunMode === \"DEBUG\") console.log(\"users: \", users);\r\n                for (i = 0; i < users.length; i++) {\r\n                    let sDate = (users[i].ExpirateDate) ? users[i].ExpirateDate : 'never';\r\n                    htmlListContent += `\r\n                  <tr class=\"data-row\">\r\n                    <td>${users[i].UserId}</td>\r\n                    <td>${users[i].UserName}</td>\r\n                    <td>${users[i].UserRole}</td>\r\n                    <td>${users[i].CompanyName}</td>\r\n                    <td>${users[i].RootPath}</td>\r\n                    <td>${sDate}</td>\r\n                    <td>\r\n                    <i id=\"${users[i].UserId}-id\" class=\"fas fa-user-edit edit-user-icon\" title=\"Editar Usuario\"></i>`;\r\n                    if (users[i].UserRole.trim().toUpperCase() !== 'ADMIN') {\r\n                        htmlListContent += `\r\n                    <i id=\"${users[i].UserId}-id\" class=\"fas fa-user-times del-user-icon\" title=\"Borrar Usuario\"></i></td>\r\n                  </tr>`;\r\n                    } else {\r\n                        htmlListContent += `&nbsp;</td></tr>`;\r\n                    }\r\n                    //console.log('User Role. ',users[i].UserRole.trim().toUpperCase());\r\n                }\r\n                bodyList.innerHTML = htmlListContent;\r\n\r\n                let table = new DataTable(document.querySelector(\"#usersTableList\"), {\r\n                    searchable: true,\r\n                    fixedHeight: true,\r\n                    info: false,\r\n                    perPageSelect: null,\r\n                    perPage: 200\r\n                });\r\n\r\n                [].forEach.call(document.querySelectorAll(\".del-user-icon\"), function(el) {\r\n                    el.addEventListener(\"click\", function(e) {\r\n                        let userId = e.target.id.slice(0, -3);\r\n                        let userName = e.target.parentNode.parentNode.children[1].innerHTML;\r\n                        userName = userName.charAt(0).toUpperCase() + userName.slice(1);\r\n                        console.log(\"userId: \", userId);\r\n                        _removeUser(userId, userName, (d) => {\r\n                            showToast(\r\n                                \"Delete User\",\r\n                                `Usuario ${userName} borrado`,\r\n                                \"success\"\r\n                            );\r\n                            AddUserModalContent.style.display = \"none\";\r\n                            $u(\"#AddUserModalContent\").removeClass(\"edit\");\r\n                            containerOverlay.style.display = \"none\";\r\n                            document.getElementById(\"userMod\").click();\r\n                        });\r\n                    });\r\n                });\r\n\r\n                [].forEach.call(document.querySelectorAll(\".edit-user-icon\"), function(el) {\r\n                    el.addEventListener(\"click\", function(e) {\r\n                        let userId = e.target.id.slice(0, -3);\r\n                        console.log(\"userId: \", userId);\r\n                        _editUser(userId, (d) => {\r\n                            document.querySelector(\"#AddUserModalContent\").style.display = \"none\";\r\n                            $u(\"#AddUserModalContent\").removeClass(\"edit\");\r\n                            document.querySelector(\".container-overlay\").style.display = \"none\";\r\n                            showAddUserForm('Edit User', d);\r\n                        });\r\n                    });\r\n                });\r\n\r\n                document.querySelector(\"#btn-EditUserCancel\").addEventListener(\"click\", e => {\r\n                    e.preventDefault();\r\n                    AddUserModalContent.style.display = \"none\";\r\n                    $u(\"#AddUserModalContent\").removeClass(\"edit\");\r\n                    containerOverlay.style.display = \"none\";\r\n                });\r\n            } else {\r\n                showToast(\"Users\", d.data.data.message, \"error\");\r\n            }\r\n        })\r\n        .catch(e => {\r\n            document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n            if (userData.RunMode === \"DEBUG\") console.log(e);\r\n            showToast(\"Users\", e, \"error\");\r\n        });\r\n}\r\n\r\nexport function selectRole(element, role) {\r\n    if (userData.RunMode === \"DEBUG\") console.log(role);\r\n    for (let x = 0; x < element.options.length; x++) {\r\n        if (userData.RunMode === \"DEBUG\")\r\n            console.log(\"option: \", element.options[x].text);\r\n        if (element.options[x].text.toUpperCase() === role.toUpperCase()) {\r\n            element.options[x].selected = \"selected\";\r\n            element.selectedIndex = x;\r\n            if (userData.RunMode === \"DEBUG\")\r\n                console.log(\"option selected: \", element.options[x].text);\r\n            if (role.toUpperCase() !== \"CUSTOM\") {\r\n                changeAccessRights(\r\n                    document.querySelectorAll(\".AccessRightsSwitch\"),\r\n                    element.options[x].value\r\n                );\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function showAddUserForm(title, data) {\r\n    let AddUserModalContent = document.querySelector(\"#AddUserModalContent\");\r\n    let containerOverlay = document.querySelector(\".container-overlay\");\r\n\r\n    let mode = data ? \"edit\" : \"add\";\r\n    let oldData = null;\r\n\r\n    AddUserModalContent.innerHTML = htmlUserFormTemplate;\r\n    document.querySelector(\"#AddUserModalContent\").classList.remove(\"edit\");\r\n    document.querySelector(\"#AddUserModalContent\").classList.add(\"show\");\r\n    if (data) {\r\n        if (userData.RunMode === \"DEBUG\") console.log('showAddUserForm: ', data);\r\n        oldData = Object.assign({}, data);\r\n        document.querySelector(\".userForm-title\").innerHTML = title;\r\n        document.querySelector(\"#UserName\").value = data.UserName;\r\n        document.querySelector(\"#CompanyName\").value = data.CompanyName;\r\n        document.querySelector(\"#UserPasswd\").value = Base64.decode(data.UserPasswd);\r\n        document.querySelector(\"#repeatUserPasswd\").value = data.UserPasswd;\r\n        document.querySelector(\"#RootPath\").value = data.RootPath;\r\n        document.querySelector(\"#ExpirateDate\").value = data.ExpirateDate;\r\n        //document.querySelector(\"#expirationDate\")\r\n        selectRole(document.querySelector(\"#RoleOptions\"), data.UserRole);\r\n        let aSwitch =  document.querySelectorAll(\".AccessRightsSwitch\");\r\n        if (data.UserRole.toUpperCase() === \"CUSTOM\"){\r\n          checkAccessRights(aSwitch, data.UserRole,JSON.parse(data.AccessString));\r\n        }\r\n\r\n        document.querySelector(\"#UserName\").classList.add(\"used\");\r\n        document.querySelector(\"#CompanyName\").classList.add(\"used\");\r\n        document.querySelector(\"#UserPasswd\").classList.add(\"used\");\r\n        document.querySelector(\"#repeatUserPasswd\").classList.add(\"used\");\r\n        document.querySelector(\"#RootPath\").classList.add(\"used\");\r\n        document.querySelector(\"#UserName\").disabled = true;\r\n        containerOverlay.style.display = \"block\";\r\n        AddUserModalContent.style.display = \"block\";\r\n\r\n        document.querySelector(\"#btn-addUserCancel\").addEventListener(\"click\", e => {\r\n            e.preventDefault();\r\n            //containerOverlay.style.display = \"none\";\r\n            AddUserModalContent.style.display = \"none\";\r\n            $u(\"#AddUserModalContent\").removeClass(\"show\");\r\n            containerOverlay.style.display = \"none\";\r\n        });\r\n\r\n        document.querySelector(\"#btn-addUserAcept\").addEventListener(\"click\", e => {\r\n            e.preventDefault();\r\n            console.log('oldData:', oldData);\r\n            _updateUser(oldData);\r\n        });\r\n    } else {\r\n        document.querySelector(\"#UserName\").classList.remove(\"used\");\r\n        document.querySelector(\"#CompanyName\").classList.remove(\"used\");\r\n        document.querySelector(\"#UserPasswd\").classList.remove(\"used\");\r\n        document.querySelector(\"#repeatUserPasswd\").classList.remove(\"used\");\r\n        document.querySelector(\"#RootPath\").classList.remove(\"used\");\r\n        containerOverlay.style.display = \"block\";\r\n        AddUserModalContent.style.display = \"block\";\r\n        changeAccessRights(\r\n            document.querySelectorAll(\".AccessRightsSwitch\"),\r\n            \"opt1\"\r\n        );\r\n        document\r\n            .querySelector(\"#btn-addUserCancel\")\r\n            .addEventListener(\"click\", e => {\r\n                e.preventDefault();\r\n                containerOverlay.style.display = \"none\";\r\n                $u(\"#AddUserModalContent\").removeClass(\"show\");\r\n                AddUserModalContent.style.display = \"none\";\r\n            });\r\n        document.querySelector(\"#btn-addUserAcept\").addEventListener(\"click\", e => {\r\n            e.preventDefault();\r\n            _addUser();\r\n        });\r\n    }\r\n\r\n    [].forEach.call(document.querySelectorAll(\".userForm-input\"), function(el) {\r\n      el.addEventListener(\"blur\", function(e) {\r\n        if (e.target.value && e.target.id !== 'ExpirateDate') document.querySelector(\"#\" + e.target.id).classList.add(\"used\");\r\n        else document.querySelector(\"#\" + e.target.id).classList.remove(\"used\");\r\n      });\r\n    }); \r\n\r\n    let sel = document.querySelector(\"select\");\r\n\r\n    $(\".AccessRightsSwitch\").change(function() {\r\n        if ($(this).is(\":checked\")) {\r\n            if (userData.RunMode === \"DEBUG\") console.log(\"Is checked\");\r\n        } else {\r\n            if (userData.RunMode === \"DEBUG\") console.log(\"Is Not checked\");\r\n        }\r\n    });\r\n\r\n    sel.addEventListener(\"change\", e => {\r\n        let opt = e.target[e.target.selectedIndex].value;\r\n        let AccessSwitch = document.querySelectorAll(\".AccessRightsSwitch\");\r\n        changeAccessRights(AccessSwitch, opt);\r\n    });\r\n\r\n    const _getUserRole = () => {\r\n        return sel.options[sel.selectedIndex].text;\r\n    };\r\n\r\n    const _getChanges = () => {\r\n        let AccessSwitch = document.querySelectorAll(\".AccessRightsSwitch\");\r\n        let accessString = _getAccessString(AccessSwitch);\r\n        let userRole = _getUserRole();\r\n        let queryString = {};\r\n        if (userData.RunMode === \"DEBUG\") console.log(oldData);\r\n        for (let prop in oldData) {\r\n            if (hasOwnProperty.call(oldData, prop)) {\r\n                console.log(prop);\r\n                if (prop === \"UserRole\") {\r\n                    if (oldData[prop].toUpperCase() !== userRole.toUpperCase()) {\r\n                        queryString.UserRole = userRole;\r\n                        console.warn(oldData[prop], userRole);\r\n                    } else {\r\n                        console.log(oldData[prop], userRole);\r\n                    }\r\n                } else {\r\n                    if (prop === \"AccessString\") {\r\n                        console.log('old accessString: ', oldData[prop]);\r\n                        console.log('new accessString: ', decodeURI(accessString));\r\n                        if (oldData[prop] !== decodeURI(accessString)) {\r\n                            console.warn(oldData[prop], accessString);\r\n                            queryString.AccessString = accessString;\r\n                        } else {\r\n                            console.log(oldData[prop], accessString);\r\n                        }\r\n                    } else {\r\n                        if (prop === \"ExpirateDate\") {\r\n                            if (oldData[prop] === null) oldData[prop] = \"\";\r\n                            if (oldData[prop] !== document.getElementById(prop).value) {\r\n                                queryString.ExpirateDate = document.getElementById(prop).value;\r\n                                queryString.UnixDate = moment(queryString.ExpirateDate).unix()\r\n                                console.warn(\r\n                                    oldData[prop],\r\n                                    document.getElementById(prop).value\r\n                                );\r\n                            } else {\r\n                                console.log(oldData[prop], document.getElementById(prop).value);\r\n                            }\r\n                        } else {\r\n                            if (prop !== \"UserId\" && prop !== 'MaxFileSize') {\r\n                                if (prop === \"UserPasswd\") {\r\n                                    let oPasswd = Base64.decode(oldData[prop]);\r\n                                    let nPasswd = document.getElementById(prop).value;\r\n                                    console.log('Old Pass: ', oPasswd);\r\n                                    console.log('New Pass: ', nPasswd);\r\n                                    if (oPasswd !== nPasswd) {\r\n                                        queryString[prop] = md5(document.getElementById(prop).value);\r\n                                    }\r\n                                } else {\r\n                                    console.log('prop: ',prop);\r\n                                    if (oldData[prop].toUpperCase() !== document.getElementById(prop).value.toUpperCase()) {\r\n                                        queryString[prop] = document.getElementById(prop).value;\r\n                                        console.warn(\r\n                                            oldData[prop],\r\n                                            document.getElementById(prop).value\r\n                                        );\r\n                                    } else {\r\n                                        console.log(oldData[prop], document.getElementById(prop).value);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (userData.RunMode === \"DEBUG\") console.log(queryString);\r\n        return queryString;\r\n    };\r\n\r\n    const _updateUser = (oData) => {\r\n\r\n        console.log(\"====================== oData: \",oData);\r\n\r\n        let _goBack = () => {\r\n            document.querySelector(\"#AddUserModalContent\").style.display = \"none\";\r\n            document.querySelector(\"#AddUserModalContent\").classList.remove(\"show\");\r\n            document.querySelector(\".container-overlay\").style.display = \"none\";\r\n            document.getElementById(\"userMod\").click();\r\n        };\r\n\r\n        let queryString = _getChanges();\r\n        if (Object.keys(queryString).length > 0) {\r\n            let data = {\r\n                userName: oData.UserName,\r\n                userId: oData.UserId,\r\n                queryString: queryString\r\n            };\r\n            console.log(\"====================== userName: \",data.userName);\r\n            document.querySelector(\"#waiting\").classList.add(\"active\");\r\n            axios\r\n                .post(\"/updateuser\", data, {\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: \"Bearer \" + userData.Token\r\n                    },\r\n                    timeout: 30000\r\n                })\r\n                .then(d => {\r\n                    document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n                    if (userData.RunMode === \"DEBUG\") console.log(d);\r\n                    if (d.data.status === \"OK\") {\r\n                        showToast(\r\n                            \"User\",\r\n                            \"Datos usuario \" + data.userName + \" actualizados.\",\r\n                            \"success\"\r\n                        );\r\n                        if (queryString.hasOwnProperty('RootPath')) {\r\n                            document.getElementById(\"refresh\").click();\r\n                        }\r\n                        _goBack();\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n                    if (userData.RunMode === \"DEBUG\") console.log(e);\r\n                    showToast(\r\n                        \"Error al grabar los cambios para el usuario \" +\r\n                        data.userName +\r\n                        \".<br>Err:\" +\r\n                        e,\r\n                        \"error\"\r\n                    );\r\n                });\r\n        } else {\r\n            _goBack();\r\n        }\r\n    };\r\n\r\n    const _getAccessString = AccessSwitch => {\r\n        let accessName = [\r\n      \"download\",\r\n      \"upload\",\r\n      \"deletefile\",\r\n      \"deletefolder\",\r\n      \"addfolder\",\r\n      \"sharefiles\"\r\n    ];\r\n        let result = \"\";\r\n        let v = false;\r\n\r\n        for (let x = 0; x < AccessSwitch.length; x++) {\r\n            if (AccessSwitch[x].checked) {\r\n                v = true;\r\n            } else {\r\n                v = false;\r\n            }\r\n            if (x != 0) {\r\n                result += ',\"' + accessName[x] + '\":' + v;\r\n            } else {\r\n                result += '\"' + accessName[x] + '\":' + v;\r\n            }\r\n        }\r\n        console.log(\"getAccessString: \", result);\r\n        return encodeURI(\"{\" + result + \"}\");\r\n    };\r\n\r\n    const _addUser = () => {\r\n        let AccessSwitch = document.querySelectorAll(\".AccessRightsSwitch\");\r\n        let userName = document.querySelector(\"#UserName\").value;\r\n        let companyName = document.querySelector(\"#CompanyName\").value;\r\n        let userPassword = document.querySelector(\"#UserPasswd\").value;\r\n        let userRole = sel[sel.selectedIndex].innerHTML;\r\n        let userRootPath = document.querySelector(\"#RootPath\").value;\r\n        let expirateDate = document.querySelector(\"#ExpirateDate\").value;\r\n\r\n        if (userRootPath.trim() === \"\" && userRole !== \"Admin\") {\r\n            showToast(\"New User\", \"Empty RootPath \", \"error\");\r\n            return false;\r\n        }\r\n\r\n        let result = _getAccessString(AccessSwitch);\r\n\r\n        let data = {\r\n            userName: userName,\r\n            userPassword: Base64.encode(md5(userPassword)),\r\n            companyName: companyName,\r\n            userRole: userRole,\r\n            expirateDate: expirateDate,\r\n            rootPath: userRootPath,\r\n            accessRights: result,\r\n            unixDate: moment(expirateDate).unix(),\r\n            userEmail: userName\r\n        };\r\n        document.querySelector(\"#waiting\").classList.add(\"active\");\r\n        axios.post(\"/adduser\", data, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: \"Bearer \" + userData.Token\r\n                },\r\n                timeout: 30000\r\n            })\r\n            .then(d => {\r\n                document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n                if (userData.RunMode === \"DEBUG\") console.log(d.data.status);\r\n                if (d.data.status === \"OK\") {\r\n                    showToast(\"Usuario \" + d.data.message, \"success\");\r\n                    document.getElementById(\"refresh\").click();\r\n                    document.querySelector(\"#formAddUser\").reset();\r\n                    [].forEach.call(document.querySelectorAll(\".userForm-input\"), function(el) {\r\n                       if(el.id !== 'ExpirateDate'){ \r\n                        document.querySelector(\"#\" + el.id).classList.remove(\"used\");\r\n                       }\r\n                    }); \r\n                    changeAccessRights(document.querySelectorAll(\".AccessRightsSwitch\"), \"opt1\");\r\n                } else {\r\n                    showToast(\"Usuario \", \"Error al añadir usurio \" + d.data.message, \"error\");\r\n                }\r\n            })\r\n            .catch(e => {\r\n                document.querySelector(\"#waiting\").classList.remove(\"active\");\r\n                showToast(\r\n                    \"User\",\r\n                    \"Error al añadir usuario \" + data.UserName + \".<br>Err:\" + e,\r\n                    \"error\"\r\n                );\r\n                if (userData.RunMode === \"DEBUG\") console.log(e);\r\n            });\r\n    };\r\n}\r\n\r\n////////////////////////////////////\r\n// End user manage module\r\n///////////////////////////////////","/*!\r\n *\r\n * Vanilla-DataTables\r\n * Copyright (c) 2015-2017 Karl Saunders (http://mobius.ovh)\r\n * Licensed under MIT (http://www.opensource.org/licenses/mit-license.php)\r\n *\r\n * Version: 1.6.15\r\n *\r\n */\r\n(function(root, factory) {\r\n  var plugin = \"DataTable\";\r\n\r\n  if (typeof exports === \"object\") {\r\n      module.exports = factory(plugin);\r\n  } else if (typeof define === \"function\" && define.amd) {\r\n      define([], factory(plugin));\r\n  } else {\r\n      root[plugin] = factory(plugin);\r\n  }\r\n})(typeof global !== 'undefined' ? global : this.window || this.global, function(plugin) {\r\n  \"use strict\";\r\n  var win = window,\r\n      doc = document,\r\n      body = doc.body;\r\n\r\n  /**\r\n   * Default configuration\r\n   * @typ {Object}\r\n   */\r\n  var defaultConfig = {\r\n      perPage: 10,\r\n      perPageSelect: [5, 10, 15, 20, 25],\r\n\r\n      sortable: true,\r\n      searchable: true,\r\n      info: true,\r\n\r\n      // Pagination\r\n      nextPrev: true,\r\n      firstLast: false,\r\n      prevText: \"&lsaquo;\",\r\n      nextText: \"&rsaquo;\",\r\n      firstText: \"&laquo;\",\r\n      lastText: \"&raquo;\",\r\n      ellipsisText: \"&hellip;\",\r\n      ascText: \"▴\",\r\n      descText: \"▾\",\r\n      truncatePager: true,\r\n      pagerDelta: 2,\r\n\r\n      fixedColumns: true,\r\n      fixedHeight: false,\r\n\r\n      header: true,\r\n      footer: false,\r\n\r\n      // Customise the display text\r\n      labels: {\r\n          placeholder: \"Search...\", // The search input placeholder\r\n          perPage: \"{select} entries per page\", // per-page dropdown label\r\n          noRows: \"No entries found\", // Message shown when there are no search results\r\n          info: \"Showing {start} to {end} of {rows} entries\" //\r\n      },\r\n\r\n      // Customise the layout\r\n      layout: {\r\n          top: \"{select}{search}\",\r\n          bottom: \"{info}{pager}\"\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Check is item is object\r\n   * @return {Boolean}\r\n   */\r\n  var isObject = function (val) {\r\n      return Object.prototype.toString.call(val) === \"[object Object]\";\r\n  };\r\n\r\n  /**\r\n   * Check is item is array\r\n   * @return {Boolean}\r\n   */\r\n  var isArray = function (val) {\r\n      return Array.isArray(val);\r\n  };\r\n\r\n  /**\r\n   * Check for valid JSON string\r\n   * @param  {String}   str\r\n   * @return {Boolean|Array|Object}\r\n   */\r\n  var isJson = function (str) {\r\n      var t = !1;\r\n      try {\r\n          t = JSON.parse(str);\r\n      } catch (e) {\r\n          return !1;\r\n      }\r\n      return !(null === t || (!isArray(t) && !isObject(t))) && t;\r\n  };\r\n\r\n  /**\r\n   * Merge objects (reccursive)\r\n   * @param  {Object} r\r\n   * @param  {Object} t\r\n   * @return {Object}\r\n   */\r\n  var extend = function (src, props) {\r\n      for (var prop in props) {\r\n          if (props.hasOwnProperty(prop)) {\r\n              var val = props[prop];\r\n              if (val && isObject(val)) {\r\n                  src[prop] = src[prop] || {};\r\n                  extend(src[prop], val);\r\n              } else {\r\n                  src[prop] = val;\r\n              }\r\n          }\r\n      }\r\n      return src;\r\n  };\r\n\r\n  /**\r\n   * Iterator helper\r\n   * @param  {(Array|Object)}   arr     Any object, array or array-like collection.\r\n   * @param  {Function}         fn      Callback\r\n   * @param  {Object}           scope   Change the value of this\r\n   * @return {Void}\r\n   */\r\n  var each = function (arr, fn, scope) {\r\n      var n;\r\n      if (isObject(arr)) {\r\n          for (n in arr) {\r\n              if (Object.prototype.hasOwnProperty.call(arr, n)) {\r\n                  fn.call(scope, arr[n], n);\r\n              }\r\n          }\r\n      } else {\r\n          for (n = 0; n < arr.length; n++) {\r\n              fn.call(scope, arr[n], n);\r\n          }\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Add event listener to target\r\n   * @param  {Object} el\r\n   * @param  {String} e\r\n   * @param  {Function} fn\r\n   */\r\n  var on = function (el, e, fn) {\r\n      el.addEventListener(e, fn, false);\r\n  };\r\n\r\n  /**\r\n   * Create DOM element node\r\n   * @param  {String}   a nodeName\r\n   * @param  {Object}   b properties and attributes\r\n   * @return {Object}\r\n   */\r\n  var createElement = function (a, b) {\r\n      var d = doc.createElement(a);\r\n      if (b && \"object\" == typeof b) {\r\n          var e;\r\n          for (e in b) {\r\n              if (\"html\" === e) {\r\n                  d.innerHTML = b[e];\r\n              } else {\r\n                  d.setAttribute(e, b[e]);\r\n              }\r\n          }\r\n      }\r\n      return d;\r\n  };\r\n\r\n  var flush = function (el, ie) {\r\n      if (el instanceof NodeList) {\r\n          each(el, function (e) {\r\n              flush(e, ie);\r\n          });\r\n      } else {\r\n          if (ie) {\r\n              while (el.hasChildNodes()) {\r\n                  el.removeChild(el.firstChild);\r\n              }\r\n          } else {\r\n              el.innerHTML = \"\";\r\n          }\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Create button helper\r\n   * @param  {String}   c\r\n   * @param  {Number}   p\r\n   * @param  {String}   t\r\n   * @return {Object}\r\n   */\r\n  var button = function (c, p, t) {\r\n      return createElement(\"li\", {\r\n          class: c,\r\n          html: '<a href=\"#\" data-page=\"' + p + '\">' + t + \"</a>\"\r\n      });\r\n  };\r\n\r\n  /**\r\n   * classList shim\r\n   * @type {Object}\r\n   */\r\n  var classList = {\r\n      add: function (s, a) {\r\n          if (s.classList) {\r\n              s.classList.add(a);\r\n          } else {\r\n              if (!classList.contains(s, a)) {\r\n                  s.className = s.className.trim() + \" \" + a;\r\n              }\r\n          }\r\n      },\r\n      remove: function (s, a) {\r\n          if (s.classList) {\r\n              s.classList.remove(a);\r\n          } else {\r\n              if (classList.contains(s, a)) {\r\n                  s.className = s.className.replace(\r\n                      new RegExp(\"(^|\\\\s)\" + a.split(\" \").join(\"|\") + \"(\\\\s|$)\", \"gi\"),\r\n                      \" \"\r\n                  );\r\n              }\r\n          }\r\n      },\r\n      contains: function (s, a) {\r\n          if (s)\r\n              return s.classList ?\r\n                  s.classList.contains(a) :\r\n                  !!s.className &&\r\n                  !!s.className.match(new RegExp(\"(\\\\s|^)\" + a + \"(\\\\s|$)\"));\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Bubble sort algorithm\r\n   */\r\n  var sortItems = function (a, b) {\r\n      var c, d;\r\n      if (1 === b) {\r\n          c = 0;\r\n          d = a.length;\r\n      } else {\r\n          if (b === -1) {\r\n              c = a.length - 1;\r\n              d = -1;\r\n          }\r\n      }\r\n      for (var e = !0; e;) {\r\n          e = !1;\r\n          for (var f = c; f != d; f += b) {\r\n              if (a[f + b] && a[f].value > a[f + b].value) {\r\n                  var g = a[f],\r\n                      h = a[f + b],\r\n                      i = g;\r\n                  a[f] = h;\r\n                  a[f + b] = i;\r\n                  e = !0;\r\n              }\r\n          }\r\n      }\r\n      return a;\r\n  };\r\n\r\n  /**\r\n   * Pager truncation algorithm\r\n   */\r\n  var truncate = function (a, b, c, d, ellipsis) {\r\n      d = d || 2;\r\n      var j,\r\n          e = 2 * d,\r\n          f = b - d,\r\n          g = b + d,\r\n          h = [],\r\n          i = [];\r\n      if (b < 4 - d + e) {\r\n          g = 3 + e;\r\n      } else if (b > c - (3 - d + e)) {\r\n          f = c - (2 + e);\r\n      }\r\n      for (var k = 1; k <= c; k++) {\r\n          if (1 == k || k == c || (k >= f && k <= g)) {\r\n              var l = a[k - 1];\r\n              classList.remove(l, \"active\");\r\n              h.push(l);\r\n          }\r\n      }\r\n      each(h, function (c) {\r\n          var d = c.children[0].getAttribute(\"data-page\");\r\n          if (j) {\r\n              var e = j.children[0].getAttribute(\"data-page\");\r\n              if (d - e == 2) i.push(a[e]);\r\n              else if (d - e != 1) {\r\n                  var f = createElement(\"li\", {\r\n                      class: \"ellipsis\",\r\n                      html: '<a href=\"#\">' + ellipsis + \"</a>\"\r\n                  });\r\n                  i.push(f);\r\n              }\r\n          }\r\n          i.push(c);\r\n          j = c;\r\n      });\r\n\r\n      return i;\r\n  };\r\n\r\n  /**\r\n   * Parse data to HTML table\r\n   */\r\n  var dataToTable = function (data) {\r\n      var thead = false,\r\n          tbody = false;\r\n\r\n      data = data || this.options.data;\r\n\r\n      if (data.headings) {\r\n          thead = createElement(\"thead\");\r\n          var tr = createElement(\"tr\");\r\n          each(data.headings, function (col) {\r\n              var td = createElement(\"th\", {\r\n                  html: col\r\n              });\r\n              tr.appendChild(td);\r\n          });\r\n\r\n          thead.appendChild(tr);\r\n      }\r\n\r\n      if (data.data && data.data.length) {\r\n          tbody = createElement(\"tbody\");\r\n          each(data.data, function (rows) {\r\n              if (data.headings) {\r\n                  if (data.headings.length !== rows.length) {\r\n                      throw new Error(\r\n                          \"The number of rows do not match the number of headings.\"\r\n                      );\r\n                  }\r\n              }\r\n              var tr = createElement(\"tr\");\r\n              each(rows, function (value) {\r\n                  var td = createElement(\"td\", {\r\n                      html: value\r\n                  });\r\n                  tr.appendChild(td);\r\n              });\r\n              tbody.appendChild(tr);\r\n          });\r\n      }\r\n\r\n      if (thead) {\r\n          if (this.table.tHead !== null) {\r\n              this.table.removeChild(this.table.tHead);\r\n          }\r\n          this.table.appendChild(thead);\r\n      }\r\n\r\n      if (tbody) {\r\n          if (this.table.tBodies.length) {\r\n              this.table.removeChild(this.table.tBodies[0]);\r\n          }\r\n          this.table.appendChild(tbody);\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Use moment.js to parse cell contents for sorting\r\n   * @param  {String} content     The datetime string to parse\r\n   * @param  {String} format      The format for moment to use\r\n   * @return {String|Boolean}     Datatime string or false\r\n   */\r\n  var parseDate = function (content, format) {\r\n      var date = false;\r\n\r\n      // moment() throws a fit if the string isn't a valid datetime string\r\n      // so we need to supply the format to the constructor (https://momentjs.com/docs/#/parsing/string-format/)\r\n\r\n      // Converting to YYYYMMDD ensures we can accurately sort the column numerically\r\n\r\n      if (format) {\r\n          switch (format) {\r\n          case \"ISO_8601\":\r\n              date = moment(content, moment.ISO_8601).format(\"YYYYMMDD\");\r\n              break;\r\n          case \"RFC_2822\":\r\n              date = moment(content, \"ddd, MM MMM YYYY HH:mm:ss ZZ\").format(\"YYYYMMDD\");\r\n              break;\r\n          case \"MYSQL\":\r\n              date = moment(content, \"YYYY-MM-DD hh:mm:ss\").format(\"YYYYMMDD\");\r\n              break;\r\n          case \"UNIX\":\r\n              date = moment(content).unix();\r\n              break;\r\n              // User defined format using the data-format attribute or columns[n].format option\r\n          default:\r\n              date = moment(content, format).format(\"YYYYMMDD\");\r\n              break;\r\n          }\r\n      }\r\n\r\n      return date;\r\n  };\r\n\r\n  /**\r\n   * Columns API\r\n   * @param {Object} instance DataTable instance\r\n   * @param {Mixed} columns  Column index or array of column indexes\r\n   */\r\n  var Columns = function (dt) {\r\n      this.dt = dt;\r\n      return this;\r\n  };\r\n\r\n  /**\r\n   * Swap two columns\r\n   * @return {Void}\r\n   */\r\n  Columns.prototype.swap = function (columns) {\r\n      if (columns.length && columns.length === 2) {\r\n          var cols = [];\r\n\r\n          // Get the current column indexes\r\n          each(this.dt.headings, function (h, i) {\r\n              cols.push(i);\r\n          });\r\n\r\n          var x = columns[0];\r\n          var y = columns[1];\r\n          var b = cols[y];\r\n          cols[y] = cols[x];\r\n          cols[x] = b;\r\n\r\n          this.order(cols);\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Reorder the columns\r\n   * @return {Array} columns  Array of ordered column indexes\r\n   */\r\n  Columns.prototype.order = function (columns) {\r\n\r\n      var a, b, c, d, h, s, cell,\r\n          temp = [\r\n              [],\r\n              [],\r\n              [],\r\n              []\r\n          ],\r\n          dt = this.dt;\r\n\r\n      // Order the headings\r\n      each(columns, function (column, x) {\r\n          h = dt.headings[column];\r\n          s = h.getAttribute(\"data-sortable\") !== \"false\";\r\n          a = h.cloneNode(true);\r\n          a.originalCellIndex = x;\r\n          a.sortable = s;\r\n\r\n          temp[0].push(a);\r\n\r\n          if (dt.hiddenColumns.indexOf(column) < 0) {\r\n              b = h.cloneNode(true);\r\n              b.originalCellIndex = x;\r\n              b.sortable = s;\r\n\r\n              temp[1].push(b);\r\n          }\r\n      });\r\n\r\n      // Order the row cells\r\n      each(dt.data, function (row, i) {\r\n          c = row.cloneNode();\r\n          d = row.cloneNode();\r\n\r\n          c.dataIndex = d.dataIndex = i;\r\n\r\n          if (row.searchIndex !== null && row.searchIndex !== undefined) {\r\n              c.searchIndex = d.searchIndex = row.searchIndex;\r\n          }\r\n\r\n          // Append the cell to the fragment in the correct order\r\n          each(columns, function (column, x) {\r\n              cell = row.cells[column].cloneNode(true);\r\n              cell.data = row.cells[column].data;\r\n              c.appendChild(cell);\r\n\r\n              if (dt.hiddenColumns.indexOf(column) < 0) {\r\n                  cell = row.cells[column].cloneNode(true);\r\n                  cell.data = row.cells[column].data;\r\n                  d.appendChild(cell);\r\n              }\r\n          });\r\n\r\n          temp[2].push(c);\r\n          temp[3].push(d);\r\n      });\r\n\r\n      dt.headings = temp[0];\r\n      dt.activeHeadings = temp[1];\r\n\r\n      dt.data = temp[2];\r\n      dt.activeRows = temp[3];\r\n\r\n      // Update\r\n      dt.update();\r\n  };\r\n\r\n  /**\r\n   * Hide columns\r\n   * @return {Void}\r\n   */\r\n  Columns.prototype.hide = function (columns) {\r\n      if (columns.length) {\r\n          var dt = this.dt;\r\n\r\n          each(columns, function (column) {\r\n              if (dt.hiddenColumns.indexOf(column) < 0) {\r\n                  dt.hiddenColumns.push(column);\r\n              }\r\n          });\r\n\r\n          this.rebuild();\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Show columns\r\n   * @return {Void}\r\n   */\r\n  Columns.prototype.show = function (columns) {\r\n      if (columns.length) {\r\n          var index, dt = this.dt;\r\n\r\n          each(columns, function (column) {\r\n              index = dt.hiddenColumns.indexOf(column);\r\n              if (index > -1) {\r\n                  dt.hiddenColumns.splice(index, 1);\r\n              }\r\n          });\r\n\r\n          this.rebuild();\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Check column(s) visibility\r\n   * @return {Boolean}\r\n   */\r\n  Columns.prototype.visible = function (columns) {\r\n      var cols, dt = this.dt;\r\n\r\n      columns = columns || dt.headings.map(function (th) {\r\n          return th.originalCellIndex;\r\n      });\r\n\r\n      if (!isNaN(columns)) {\r\n          cols = dt.hiddenColumns.indexOf(columns) < 0;\r\n      } else if (isArray(columns)) {\r\n          cols = [];\r\n          each(columns, function (column) {\r\n              cols.push(dt.hiddenColumns.indexOf(column) < 0);\r\n          });\r\n      }\r\n\r\n      return cols;\r\n  };\r\n\r\n  /**\r\n   * Add a new column\r\n   * @param {Object} data\r\n   */\r\n  Columns.prototype.add = function (data) {\r\n      var that = this,\r\n          td, th = document.createElement(\"th\");\r\n\r\n      if (!this.dt.headings.length) {\r\n          this.dt.insert({\r\n              headings: [data.heading],\r\n              data: data.data.map(function (i) {\r\n                  return [i];\r\n              })\r\n          });\r\n          this.rebuild();\r\n          return;\r\n      }\r\n\r\n      if (!this.dt.hiddenHeader) {\r\n          if (data.heading.nodeName) {\r\n              th.appendChild(data.heading);\r\n          } else {\r\n              th.innerHTML = data.heading;\r\n          }\r\n      } else {\r\n          th.innerHTML = \"\";\r\n      }\r\n\r\n      this.dt.headings.push(th);\r\n\r\n      each(this.dt.data, function (row, i) {\r\n          if (data.data[i]) {\r\n              td = document.createElement(\"td\");\r\n\r\n              if (data.data[i].nodeName) {\r\n                  td.appendChild(data.data[i]);\r\n              } else {\r\n                  td.innerHTML = data.data[i];\r\n              }\r\n\r\n              td.data = td.innerHTML;\r\n\r\n              if (data.render) {\r\n                  td.innerHTML = data.render.call(that, td.data, td, row);\r\n              }\r\n\r\n              row.appendChild(td);\r\n          }\r\n      });\r\n\r\n      if (data.type) {\r\n          th.setAttribute(\"data-type\", data.type);\r\n      }\r\n      if (data.format) {\r\n          th.setAttribute(\"data-format\", data.format);\r\n      }\r\n\r\n      if (data.hasOwnProperty(\"sortable\")) {\r\n          th.sortable = data.sortable;\r\n          th.setAttribute(\"data-sortable\", data.sortable === true ? \"true\" : \"false\");\r\n      }\r\n\r\n      this.rebuild();\r\n\r\n      this.dt.renderHeader();\r\n  };\r\n\r\n  /**\r\n   * Remove column(s)\r\n   * @param  {Array|Number} select\r\n   * @return {Void}\r\n   */\r\n  Columns.prototype.remove = function (select) {\r\n      if (isArray(select)) {\r\n          // Remove in reverse otherwise the indexes will be incorrect\r\n          select.sort(function (a, b) {\r\n              return b - a;\r\n          });\r\n\r\n          each(select, function (column) {\r\n              this.remove(column);\r\n          }, this);\r\n      } else {\r\n          this.dt.headings.splice(select, 1);\r\n\r\n          each(this.dt.data, function (row) {\r\n              row.removeChild(row.cells[select]);\r\n          });\r\n      }\r\n\r\n      this.rebuild();\r\n  };\r\n\r\n  /**\r\n   * Sort by column\r\n   * @param  {int} column - The column no.\r\n   * @param  {string} direction - asc or desc\r\n   * @return {void}\r\n   */\r\n  Columns.prototype.sort = function (column, direction, init) {\r\n\r\n      var dt = this.dt;\r\n\r\n      // Check column is present\r\n      if (dt.hasHeadings && (column < 1 || column > dt.activeHeadings.length)) {\r\n          return false;\r\n      }\r\n\r\n      dt.sorting = true;\r\n\r\n      // Convert to zero-indexed\r\n      column = column - 1;\r\n\r\n      var dir,\r\n          rows = dt.data,\r\n          alpha = [],\r\n          numeric = [],\r\n          a = 0,\r\n          n = 0,\r\n          th = dt.activeHeadings[column];\r\n\r\n      column = th.originalCellIndex;\r\n\r\n      each(rows, function (tr) {\r\n          var cell = tr.cells[column];\r\n          var content = cell.hasAttribute('data-content') ? cell.getAttribute('data-content') : cell.data;\r\n          var num = content.replace(/(\\$|\\,|\\s|%)/g, \"\");\r\n\r\n          // Check for date format and moment.js\r\n          if (th.getAttribute(\"data-type\") === \"date\" && win.moment) {\r\n              var format = false,\r\n                  formatted = th.hasAttribute(\"data-format\");\r\n\r\n              if (formatted) {\r\n                  format = th.getAttribute(\"data-format\");\r\n              }\r\n\r\n              num = parseDate(content, format);\r\n          }\r\n\r\n          if (parseFloat(num) == num) {\r\n              numeric[n++] = {\r\n                  value: Number(num),\r\n                  row: tr\r\n              };\r\n          } else {\r\n              alpha[a++] = {\r\n                  value: content,\r\n                  row: tr\r\n              };\r\n          }\r\n      });\r\n\r\n      /* Sort according to direction (ascending or descending) */\r\n      var top, btm;\r\n      if (classList.contains(th, \"asc\") || direction == \"asc\") {\r\n          top = sortItems(alpha, -1);\r\n          btm = sortItems(numeric, -1);\r\n          dir = \"descending\";\r\n          classList.remove(th, \"asc\");\r\n          classList.add(th, \"desc\");\r\n      } else {\r\n          top = sortItems(numeric, 1);\r\n          btm = sortItems(alpha, 1);\r\n          dir = \"ascending\";\r\n          classList.remove(th, \"desc\");\r\n          classList.add(th, \"asc\");\r\n      }\r\n\r\n      /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */\r\n      if (dt.lastTh && th != dt.lastTh) {\r\n          classList.remove(dt.lastTh, \"desc\");\r\n          classList.remove(dt.lastTh, \"asc\");\r\n      }\r\n\r\n      dt.lastTh = th;\r\n\r\n      /* Reorder the table */\r\n      rows = top.concat(btm);\r\n\r\n      dt.data = [];\r\n      var indexes = [];\r\n\r\n      each(rows, function (v, i) {\r\n          dt.data.push(v.row);\r\n\r\n          if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {\r\n              indexes.push(i);\r\n          }\r\n      }, dt);\r\n\r\n      dt.searchData = indexes;\r\n\r\n      this.rebuild();\r\n\r\n      dt.update();\r\n\r\n      if (!init) {\r\n          dt.emit(\"datatable.sort\", column, dir);\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Rebuild the columns\r\n   * @return {Void}\r\n   */\r\n  Columns.prototype.rebuild = function () {\r\n      var a, b, c, d, dt = this.dt,\r\n          temp = [];\r\n\r\n      dt.activeRows = [];\r\n      dt.activeHeadings = [];\r\n\r\n      each(dt.headings, function (th, i) {\r\n          th.originalCellIndex = i;\r\n          th.sortable = th.getAttribute(\"data-sortable\") !== \"false\";\r\n          if (dt.hiddenColumns.indexOf(i) < 0) {\r\n              dt.activeHeadings.push(th);\r\n          }\r\n      }, this);\r\n\r\n      // Loop over the rows and reorder the cells\r\n      each(dt.data, function (row, i) {\r\n          a = row.cloneNode();\r\n          b = row.cloneNode();\r\n\r\n          a.dataIndex = b.dataIndex = i;\r\n\r\n          if (row.searchIndex !== null && row.searchIndex !== undefined) {\r\n              a.searchIndex = b.searchIndex = row.searchIndex;\r\n          }\r\n\r\n          // Append the cell to the fragment in the correct order\r\n          each(row.cells, function (cell) {\r\n              c = cell.cloneNode(true);\r\n              c.data = cell.data;\r\n              a.appendChild(c);\r\n\r\n              if (dt.hiddenColumns.indexOf(cell.cellIndex) < 0) {\r\n                  d = cell.cloneNode(true);\r\n                  d.data = cell.data;\r\n                  b.appendChild(d);\r\n              }\r\n          });\r\n\r\n          // Append the fragment with the ordered cells\r\n          temp.push(a);\r\n          dt.activeRows.push(b);\r\n      });\r\n\r\n      dt.data = temp;\r\n\r\n      dt.update();\r\n  };\r\n\r\n  /**\r\n   * Rows API\r\n   * @param {Object} instance DataTable instance\r\n   * @param {Array} rows\r\n   */\r\n  var Rows = function (dt, rows) {\r\n      this.dt = dt;\r\n      this.rows = rows;\r\n\r\n      return this;\r\n  };\r\n\r\n  /**\r\n   * Build a new row\r\n   * @param  {Array} row\r\n   * @return {HTMLElement}\r\n   */\r\n  Rows.prototype.build = function (row) {\r\n      var td, tr = createElement(\"tr\");\r\n\r\n      var headings = this.dt.headings;\r\n\r\n      if (!headings.length) {\r\n          headings = row.map(function () {\r\n              return \"\";\r\n          });\r\n      }\r\n\r\n      each(headings, function (h, i) {\r\n          td = createElement(\"td\");\r\n\r\n          // Fixes #29\r\n          if (!row[i] && !row[i].length) {\r\n              row[i] = \"\";\r\n          }\r\n\r\n          td.innerHTML = row[i];\r\n\r\n          td.data = row[i];\r\n\r\n          tr.appendChild(td);\r\n      });\r\n\r\n      return tr;\r\n  };\r\n\r\n  Rows.prototype.render = function (row) {\r\n      return row;\r\n  };\r\n\r\n  /**\r\n   * Add new row\r\n   * @param {Array} select\r\n   */\r\n  Rows.prototype.add = function (data) {\r\n\r\n      if (isArray(data)) {\r\n          var dt = this.dt;\r\n          // Check for multiple rows\r\n          if (isArray(data[0])) {\r\n              each(data, function (row, i) {\r\n                  dt.data.push(this.build(row));\r\n              }, this);\r\n          } else {\r\n              dt.data.push(this.build(data));\r\n          }\r\n\r\n          // We may have added data to an empty table\r\n          if ( dt.data.length ) {\r\n              dt.hasRows = true;\r\n          }\r\n\r\n\r\n          this.update();\r\n\r\n          dt.columns().rebuild();\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Remove row(s)\r\n   * @param  {Array|Number} select\r\n   * @return {Void}\r\n   */\r\n  Rows.prototype.remove = function (select) {\r\n\r\n      var dt = this.dt;\r\n\r\n      if (isArray(select)) {\r\n          // Remove in reverse otherwise the indexes will be incorrect\r\n          select.sort(function (a, b) {\r\n              return b - a;\r\n          });\r\n\r\n          each(select, function (row, i) {\r\n              dt.data.splice(row, 1);\r\n          });\r\n      } else {\r\n          dt.data.splice(select, 1);\r\n      }\r\n\r\n      this.update();\r\n      dt.columns().rebuild();\r\n  };\r\n\r\n  /**\r\n   * Update row indexes\r\n   * @return {Void}\r\n   */\r\n  Rows.prototype.update = function () {\r\n      each(this.dt.data, function (row, i) {\r\n          row.dataIndex = i;\r\n      });\r\n  };\r\n\r\n  ////////////////////\r\n  //    MAIN LIB    //\r\n  ////////////////////\r\n\r\n  var DataTable = function (table, options) {\r\n      this.initialized = false;\r\n\r\n      // user options\r\n      this.options = extend(defaultConfig, options);\r\n\r\n      if (typeof table === \"string\") {\r\n          table = document.querySelector(table);\r\n      }\r\n\r\n      this.initialLayout = table.innerHTML;\r\n      this.initialSortable = this.options.sortable;\r\n\r\n      // Disable manual sorting if no header is present (#4)\r\n      if (!this.options.header) {\r\n          this.options.sortable = false;\r\n      }\r\n\r\n      if (table.tHead === null) {\r\n          if (!this.options.data ||\r\n              (this.options.data && !this.options.data.headings)\r\n          ) {\r\n              this.options.sortable = false;\r\n          }\r\n      }\r\n\r\n      if (table.tBodies.length && !table.tBodies[0].rows.length) {\r\n          if (this.options.data) {\r\n              if (!this.options.data.data) {\r\n                  throw new Error(\r\n                      \"You seem to be using the data option, but you've not defined any rows.\"\r\n                  );\r\n              }\r\n          }\r\n      }\r\n\r\n      this.table = table;\r\n\r\n      this.init();\r\n  };\r\n\r\n  /**\r\n   * Add custom property or method to extend DataTable\r\n   * @param  {String} prop    - Method name or property\r\n   * @param  {Mixed} val      - Function or property value\r\n   * @return {Void}\r\n   */\r\n  DataTable.extend = function(prop, val) {\r\n      if (typeof val === \"function\") {\r\n          DataTable.prototype[prop] = val;\r\n      } else {\r\n          DataTable[prop] = val;\r\n      }\r\n  };\r\n\r\n  var proto = DataTable.prototype;\r\n\r\n  /**\r\n   * Initialize the instance\r\n   * @param  {Object} options\r\n   * @return {Void}\r\n   */\r\n  proto.init = function (options) {\r\n      if (this.initialized || classList.contains(this.table, \"dataTable-table\")) {\r\n          return false;\r\n      }\r\n\r\n      var that = this;\r\n\r\n      this.options = extend(this.options, options || {});\r\n\r\n      // IE detection\r\n      this.isIE = !!/(msie|trident)/i.test(navigator.userAgent);\r\n\r\n      this.currentPage = 1;\r\n      this.onFirstPage = true;\r\n\r\n      this.hiddenColumns = [];\r\n      this.columnRenderers = [];\r\n      this.selectedColumns = [];\r\n\r\n      this.render();\r\n\r\n      setTimeout(function () {\r\n          that.emit(\"datatable.init\");\r\n          that.initialized = true;\r\n\r\n          if (that.options.plugins) {\r\n              each(that.options.plugins, function(options, plugin) {\r\n                  if (that[plugin] && typeof that[plugin] === \"function\") {\r\n                      that[plugin] = that[plugin](options, {\r\n                          each: each,\r\n                          extend: extend,\r\n                          classList: classList,\r\n                          createElement: createElement\r\n                      });\r\n\r\n                      // Init plugin\r\n                      if (options.enabled && that[plugin].init && typeof that[plugin].init === \"function\") {\r\n                          that[plugin].init();\r\n                      }\r\n                  }\r\n              });\r\n          }\r\n      }, 10);\r\n  };\r\n\r\n  /**\r\n   * Render the instance\r\n   * @param  {String} type\r\n   * @return {Void}\r\n   */\r\n  proto.render = function (type) {\r\n      if (type) {\r\n          switch (type) {\r\n          case \"page\":\r\n              this.renderPage();\r\n              break;\r\n          case \"pager\":\r\n              this.renderPager();\r\n              break;\r\n          case \"header\":\r\n              this.renderHeader();\r\n              break;\r\n          }\r\n\r\n          return false;\r\n      }\r\n\r\n      var that = this,\r\n          o = that.options,\r\n          template = \"\";\r\n\r\n      // Convert data to HTML\r\n      if (o.data) {\r\n          dataToTable.call(that);\r\n      }\r\n\r\n      if (o.ajax) {\r\n          var ajax = o.ajax;\r\n          var xhr = new XMLHttpRequest();\r\n\r\n          var xhrProgress = function (e) {\r\n              that.emit(\"datatable.ajax.progress\", e, xhr);\r\n          };\r\n\r\n          var xhrLoad = function (e) {\r\n              if (xhr.readyState === 4) {\r\n                  that.emit(\"datatable.ajax.loaded\", e, xhr);\r\n\r\n                  if (xhr.status === 200) {\r\n                      var obj = {};\r\n                      obj.data = ajax.load ? ajax.load.call(that, xhr) : xhr.responseText;\r\n\r\n                      obj.type = \"json\";\r\n\r\n                      if (ajax.content && ajax.content.type) {\r\n                          obj.type = ajax.content.type;\r\n\r\n                          obj = extend(obj, ajax.content);\r\n                      }\r\n\r\n                      that.import(obj);\r\n\r\n                      that.setColumns(true);\r\n\r\n                      that.emit(\"datatable.ajax.success\", e, xhr);\r\n                  } else {\r\n                      that.emit(\"datatable.ajax.error\", e, xhr);\r\n                  }\r\n              }\r\n          };\r\n\r\n          var xhrFailed = function (e) {\r\n              that.emit(\"datatable.ajax.error\", e, xhr);\r\n          };\r\n\r\n          var xhrCancelled = function (e) {\r\n              that.emit(\"datatable.ajax.abort\", e, xhr);\r\n          };\r\n\r\n          on(xhr, \"progress\", xhrProgress);\r\n          on(xhr, \"load\", xhrLoad);\r\n          on(xhr, \"error\", xhrFailed);\r\n          on(xhr, \"abort\", xhrCancelled);\r\n\r\n          that.emit(\"datatable.ajax.loading\", xhr);\r\n\r\n          xhr.open(\"GET\", typeof ajax === \"string\" ? o.ajax : o.ajax.url);\r\n          xhr.send();\r\n      }\r\n\r\n      // Store references\r\n      that.body = that.table.tBodies[0];\r\n      that.head = that.table.tHead;\r\n      that.foot = that.table.tFoot;\r\n\r\n      if (!that.body) {\r\n          that.body = createElement(\"tbody\");\r\n\r\n          that.table.appendChild(that.body);\r\n      }\r\n\r\n      that.hasRows = that.body.rows.length > 0;\r\n\r\n      // Make a tHead if there isn't one (fixes #8)\r\n      if (!that.head) {\r\n          var h = createElement(\"thead\");\r\n          var t = createElement(\"tr\");\r\n\r\n          if (that.hasRows) {\r\n              each(that.body.rows[0].cells, function () {\r\n                  t.appendChild(createElement(\"th\"));\r\n              });\r\n\r\n              h.appendChild(t);\r\n          }\r\n\r\n          that.head = h;\r\n\r\n          that.table.insertBefore(that.head, that.body);\r\n\r\n          that.hiddenHeader = !o.ajax;\r\n      }\r\n\r\n      that.headings = [];\r\n      that.hasHeadings = that.head.rows.length > 0;\r\n\r\n      if (that.hasHeadings) {\r\n          that.header = that.head.rows[0];\r\n          that.headings = [].slice.call(that.header.cells);\r\n      }\r\n\r\n      // Header\r\n      if (!o.header) {\r\n          if (that.head) {\r\n              that.table.removeChild(that.table.tHead);\r\n          }\r\n      }\r\n\r\n      // Footer\r\n      if (o.footer) {\r\n          if (that.head && !that.foot) {\r\n              that.foot = createElement(\"tfoot\", {\r\n                  html: that.head.innerHTML\r\n              });\r\n              that.table.appendChild(that.foot);\r\n          }\r\n      } else {\r\n          if (that.foot) {\r\n              that.table.removeChild(that.table.tFoot);\r\n          }\r\n      }\r\n\r\n      // Build\r\n      that.wrapper = createElement(\"div\", {\r\n          class: \"dataTable-wrapper dataTable-loading\"\r\n      });\r\n\r\n      // Template for custom layouts\r\n      template += \"<div class='dataTable-top'>\";\r\n      template += o.layout.top;\r\n      template += \"</div>\";\r\n      template += \"<div class='dataTable-container'></div>\";\r\n      if(defaultConfig.info) {\r\n        template += \"<div class='dataTable-bottom'>\";\r\n        template += o.layout.bottom;\r\n        template += \"</div>\";\r\n        // Info placement\r\n        template = template.replace(\"{info}\", \"<div class='dataTable-info'></div>\");\r\n      }\r\n\r\n      \r\n\r\n      // Per Page Select\r\n      if (o.perPageSelect) {\r\n          var wrap = \"<div class='dataTable-dropdown'><label>\";\r\n          wrap += o.labels.perPage;\r\n          wrap += \"</label></div>\";\r\n\r\n          // Create the select\r\n          var select = createElement(\"select\", {\r\n              class: \"dataTable-selector\"\r\n          });\r\n\r\n          // Create the options\r\n          each(o.perPageSelect, function (val) {\r\n              var selected = val === o.perPage;\r\n              var option = new Option(val, val, selected, selected);\r\n              select.add(option);\r\n          });\r\n\r\n          // Custom label\r\n          wrap = wrap.replace(\"{select}\", select.outerHTML);\r\n\r\n          // Selector placement\r\n          template = template.replace(\"{select}\", wrap);\r\n      } else {\r\n          template = template.replace(\"{select}\", \"\");\r\n      }\r\n\r\n      // Searchable\r\n      if (o.searchable) {\r\n          var form =\r\n              \"<div class='dataTable-search'><input class='dataTable-input' placeholder='\" +\r\n              o.labels.placeholder +\r\n              \"' type='text'></div>\";\r\n\r\n          // Search input placement\r\n          template = template.replace(\"{search}\", form);\r\n      } else {\r\n          template = template.replace(\"{search}\", \"\");\r\n      }\r\n\r\n      if (that.hasHeadings) {\r\n          // Sortable\r\n          this.render(\"header\");\r\n      }\r\n\r\n      // Add table class\r\n      classList.add(that.table, \"dataTable-table\");\r\n\r\n      // Paginator\r\n      var w = createElement(\"div\", {\r\n          class: \"dataTable-pagination\"\r\n      });\r\n      var paginator = createElement(\"ul\");\r\n      w.appendChild(paginator);\r\n\r\n      // Pager(s) placement\r\n      template = template.replace(/\\{pager\\}/g, w.outerHTML);\r\n\r\n      that.wrapper.innerHTML = template;\r\n\r\n      that.container = that.wrapper.querySelector(\".dataTable-container\");\r\n\r\n      that.pagers = that.wrapper.querySelectorAll(\".dataTable-pagination\");\r\n\r\n      that.label = that.wrapper.querySelector(\".dataTable-info\");\r\n\r\n      // Insert in to DOM tree\r\n      that.table.parentNode.replaceChild(that.wrapper, that.table);\r\n      that.container.appendChild(that.table);\r\n\r\n      // Store the table dimensions\r\n      that.rect = that.table.getBoundingClientRect();\r\n\r\n      // Convert rows to array for processing\r\n      that.data = [].slice.call(that.body.rows);\r\n      that.activeRows = that.data.slice();\r\n      that.activeHeadings = that.headings.slice();\r\n\r\n      // Update\r\n      that.update();\r\n\r\n      if (!o.ajax) {\r\n          that.setColumns();\r\n      }\r\n\r\n      // Fix height\r\n      this.fixHeight();\r\n\r\n      // Fix columns\r\n      that.fixColumns();\r\n\r\n      // Class names\r\n      if (!o.header) {\r\n          classList.add(that.wrapper, \"no-header\");\r\n      }\r\n\r\n      if (!o.footer) {\r\n          classList.add(that.wrapper, \"no-footer\");\r\n      }\r\n\r\n      if (o.sortable) {\r\n          classList.add(that.wrapper, \"sortable\");\r\n      }\r\n\r\n      if (o.searchable) {\r\n          classList.add(that.wrapper, \"searchable\");\r\n      }\r\n\r\n      if (o.fixedHeight) {\r\n          classList.add(that.wrapper, \"fixed-height\");\r\n      }\r\n\r\n      if (o.fixedColumns) {\r\n          classList.add(that.wrapper, \"fixed-columns\");\r\n      }\r\n\r\n      that.bindEvents();\r\n  };\r\n\r\n  /**\r\n   * Render the page\r\n   * @return {Void}\r\n   */\r\n  proto.renderPage = function () {\r\n      if (this.hasRows && this.totalPages) {\r\n          if (this.currentPage > this.totalPages) {\r\n              this.currentPage = 1;\r\n          }\r\n\r\n          // Use a fragment to limit touching the DOM\r\n          var index = this.currentPage - 1,\r\n              frag = doc.createDocumentFragment();\r\n\r\n          if (this.hasHeadings) {\r\n              flush(this.header, this.isIE);\r\n\r\n              each(this.activeHeadings, function (th) {\r\n                  this.header.appendChild(th);\r\n              }, this);\r\n          }\r\n\r\n          each(this.pages[index], function (row) {\r\n              frag.appendChild(this.rows().render(row));\r\n          }, this);\r\n\r\n          this.clear(frag);\r\n\r\n          this.onFirstPage = this.currentPage === 1;\r\n          this.onLastPage = this.currentPage === this.lastPage;\r\n      } else {\r\n          this.clear();\r\n      }\r\n\r\n      // Update the info\r\n      var current = 0,\r\n          f = 0,\r\n          t = 0,\r\n          items;\r\n\r\n      if (this.totalPages) {\r\n          current = this.currentPage - 1;\r\n          f = current * this.options.perPage;\r\n          t = f + this.pages[current].length;\r\n          f = f + 1;\r\n          items = !!this.searching ? this.searchData.length : this.data.length;\r\n      }\r\n\r\n      if (this.label && this.options.labels.info.length) {\r\n          // CUSTOM LABELS\r\n          var string = this.options.labels.info\r\n              .replace(\"{start}\", f)\r\n              .replace(\"{end}\", t)\r\n              .replace(\"{page}\", this.currentPage)\r\n              .replace(\"{pages}\", this.totalPages)\r\n              .replace(\"{rows}\", items);\r\n\r\n          this.label.innerHTML = items ? string : \"\";\r\n      }\r\n\r\n      if (this.currentPage == 1) {\r\n          this.fixHeight();\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Render the pager(s)\r\n   * @return {Void}\r\n   */\r\n  proto.renderPager = function () {\r\n      flush(this.pagers, this.isIE);\r\n\r\n      if (this.totalPages > 1) {\r\n          var c = \"pager\",\r\n              frag = doc.createDocumentFragment(),\r\n              prev = this.onFirstPage ? 1 : this.currentPage - 1,\r\n              next = this.onlastPage ? this.totalPages : this.currentPage + 1;\r\n\r\n          // first button\r\n          if (this.options.firstLast) {\r\n              frag.appendChild(button(c, 1, this.options.firstText));\r\n          }\r\n\r\n          // prev button\r\n          if (this.options.nextPrev) {\r\n              frag.appendChild(button(c, prev, this.options.prevText));\r\n          }\r\n\r\n          var pager = this.links;\r\n\r\n          // truncate the links\r\n          if (this.options.truncatePager) {\r\n              pager = truncate(\r\n                  this.links,\r\n                  this.currentPage,\r\n                  this.pages.length,\r\n                  this.options.pagerDelta,\r\n                  this.options.ellipsisText\r\n              );\r\n          }\r\n\r\n          // active page link\r\n          classList.add(this.links[this.currentPage - 1], \"active\");\r\n\r\n          // append the links\r\n          each(pager, function (p) {\r\n              classList.remove(p, \"active\");\r\n              frag.appendChild(p);\r\n          });\r\n\r\n          classList.add(this.links[this.currentPage - 1], \"active\");\r\n\r\n          // next button\r\n          if (this.options.nextPrev) {\r\n              frag.appendChild(button(c, next, this.options.nextText));\r\n          }\r\n\r\n          // first button\r\n          if (this.options.firstLast) {\r\n              frag.appendChild(button(c, this.totalPages, this.options.lastText));\r\n          }\r\n\r\n          // We may have more than one pager\r\n          each(this.pagers, function (pager) {\r\n              pager.appendChild(frag.cloneNode(true));\r\n          });\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Render the header\r\n   * @return {Void}\r\n   */\r\n  proto.renderHeader = function () {\r\n      var that = this;\r\n\r\n      that.labels = [];\r\n\r\n      if (that.headings && that.headings.length) {\r\n          each(that.headings, function (th, i) {\r\n\r\n              that.labels[i] = th.textContent;\r\n\r\n              if (classList.contains(th.firstElementChild, \"dataTable-sorter\")) {\r\n                  th.innerHTML = th.firstElementChild.innerHTML;\r\n              }\r\n\r\n              th.sortable = th.getAttribute(\"data-sortable\") !== \"false\";\r\n\r\n              th.originalCellIndex = i;\r\n              if (that.options.sortable && th.sortable) {\r\n                  var link = createElement(\"a\", {\r\n                      href: \"#\",\r\n                      class: \"dataTable-sorter\",\r\n                      html: th.innerHTML\r\n                  });\r\n\r\n                  th.innerHTML = \"\";\r\n                  th.setAttribute(\"data-sortable\", \"\");\r\n                  th.appendChild(link);\r\n              }\r\n          });\r\n      }\r\n\r\n      that.fixColumns();\r\n  };\r\n\r\n  /**\r\n   * Bind event listeners\r\n   * @return {[type]} [description]\r\n   */\r\n  proto.bindEvents = function () {\r\n      var that = this,\r\n          o = that.options;\r\n\r\n      // Per page selector\r\n      if (o.perPageSelect) {\r\n          var selector = that.wrapper.querySelector(\".dataTable-selector\");\r\n          if (selector) {\r\n              // Change per page\r\n              on(selector, \"change\", function (e) {\r\n                  o.perPage = parseInt(this.value, 10);\r\n                  that.update();\r\n\r\n                  that.fixHeight();\r\n\r\n                  that.emit(\"datatable.perpage\", o.perPage);\r\n              });\r\n          }\r\n      }\r\n\r\n      // Search input\r\n      if (o.searchable) {\r\n          that.input = that.wrapper.querySelector(\".dataTable-input\");\r\n          if (that.input) {\r\n              on(that.input, \"keyup\", function (e) {\r\n                  that.search(this.value);\r\n              });\r\n          }\r\n      }\r\n\r\n      // Pager(s) / sorting\r\n      on(that.wrapper, \"click\", function (e) {\r\n          var t = e.target;\r\n          if (t.nodeName.toLowerCase() === \"a\") {\r\n              if (t.hasAttribute(\"data-page\")) {\r\n                  that.page(t.getAttribute(\"data-page\"));\r\n                  e.preventDefault();\r\n              } else if (\r\n                  o.sortable &&\r\n                  classList.contains(t, \"dataTable-sorter\") &&\r\n                  t.parentNode.getAttribute(\"data-sortable\") != \"false\"\r\n              ) {\r\n                  that.columns().sort(that.activeHeadings.indexOf(t.parentNode) + 1);\r\n                  e.preventDefault();\r\n              }\r\n          }\r\n      });\r\n  };\r\n\r\n  /**\r\n   * Set up columns\r\n   * @return {[type]} [description]\r\n   */\r\n  proto.setColumns = function (ajax) {\r\n\r\n      var that = this;\r\n\r\n      if (!ajax) {\r\n          each(that.data, function (row) {\r\n              each(row.cells, function (cell) {\r\n                  cell.data = cell.innerHTML;\r\n              });\r\n          });\r\n      }\r\n\r\n      // Check for the columns option\r\n      if (that.options.columns && that.headings.length) {\r\n\r\n          each(that.options.columns, function (data) {\r\n\r\n              // convert single column selection to array\r\n              if (!isArray(data.select)) {\r\n                  data.select = [data.select];\r\n              }\r\n\r\n              if (data.hasOwnProperty(\"render\") && typeof data.render === \"function\") {\r\n                  that.selectedColumns = that.selectedColumns.concat(data.select);\r\n\r\n                  that.columnRenderers.push({\r\n                      columns: data.select,\r\n                      renderer: data.render\r\n                  });\r\n              }\r\n\r\n              // Add the data attributes to the th elements\r\n              each(data.select, function (column) {\r\n                  var th = that.headings[column];\r\n                  if (data.type) {\r\n                      th.setAttribute(\"data-type\", data.type);\r\n                  }\r\n                  if (data.format) {\r\n                      th.setAttribute(\"data-format\", data.format);\r\n                  }\r\n                  if (data.hasOwnProperty(\"sortable\")) {\r\n                      th.setAttribute(\"data-sortable\", data.sortable);\r\n                  }\r\n\r\n                  if (data.hasOwnProperty(\"hidden\")) {\r\n                      if (data.hidden !== false) {\r\n                          that.columns().hide(column);\r\n                      }\r\n                  }\r\n\r\n                  if (data.hasOwnProperty(\"sort\") && data.select.length === 1) {\r\n                      that.columns().sort(data.select[0] + 1, data.sort, true);\r\n                  }\r\n              });\r\n          });\r\n      }\r\n\r\n      if (that.hasRows) {\r\n          each(that.data, function (row, i) {\r\n              row.dataIndex = i;\r\n              each(row.cells, function (cell) {\r\n                  cell.data = cell.innerHTML;\r\n              });\r\n          });\r\n\r\n          if (that.selectedColumns.length) {\r\n              each(that.data, function (row) {\r\n                  each(row.cells, function (cell, i) {\r\n                      if (that.selectedColumns.indexOf(i) > -1) {\r\n                          each(that.columnRenderers, function (o) {\r\n                              if (o.columns.indexOf(i) > -1) {\r\n                                  cell.innerHTML = o.renderer.call(that, cell.data, cell, row);\r\n                              }\r\n                          });\r\n                      }\r\n                  });\r\n              });\r\n          }\r\n\r\n          that.columns().rebuild();\r\n      }\r\n\r\n      that.render(\"header\");\r\n  };\r\n\r\n  /**\r\n   * Destroy the instance\r\n   * @return {void}\r\n   */\r\n  proto.destroy = function () {\r\n      this.table.innerHTML = this.initialLayout;\r\n\r\n      // Remove the className\r\n      classList.remove(this.table, \"dataTable-table\");\r\n\r\n      // Remove the containers\r\n      this.wrapper.parentNode.replaceChild(this.table, this.wrapper);\r\n\r\n      this.initialized = false;\r\n  };\r\n\r\n  /**\r\n   * Update the instance\r\n   * @return {Void}\r\n   */\r\n  proto.update = function () {\r\n      classList.remove(this.wrapper, \"dataTable-empty\");\r\n\r\n      this.paginate(this);\r\n      this.render(\"page\");\r\n\r\n      this.links = [];\r\n\r\n      var i = this.pages.length;\r\n      while (i--) {\r\n          var num = i + 1;\r\n          this.links[i] = button(i === 0 ? \"active\" : \"\", num, num);\r\n      }\r\n\r\n      this.sorting = false;\r\n\r\n      this.render(\"pager\");\r\n\r\n      this.rows().update();\r\n\r\n      this.emit(\"datatable.update\");\r\n  };\r\n\r\n  /**\r\n   * Sort rows into pages\r\n   * @return {Number}\r\n   */\r\n  proto.paginate = function () {\r\n      var perPage = this.options.perPage,\r\n          rows = this.activeRows;\r\n\r\n      if (this.searching) {\r\n          rows = [];\r\n\r\n          each(this.searchData, function (index) {\r\n              rows.push(this.activeRows[index]);\r\n          }, this);\r\n      }\r\n\r\n      // Check for hidden columns\r\n      this.pages = rows\r\n          .map(function (tr, i) {\r\n              return i % perPage === 0 ? rows.slice(i, i + perPage) : null;\r\n          })\r\n          .filter(function (page) {\r\n              return page;\r\n          });\r\n\r\n      this.totalPages = this.lastPage = this.pages.length;\r\n\r\n      return this.totalPages;\r\n  };\r\n\r\n  /**\r\n   * Fix column widths\r\n   * @return {Void}\r\n   */\r\n  proto.fixColumns = function () {\r\n\r\n      if (this.options.fixedColumns && this.activeHeadings && this.activeHeadings.length) {\r\n\r\n          var cells,\r\n              hd = false;\r\n\r\n          this.columnWidths = [];\r\n\r\n          // If we have headings we need only set the widths on them\r\n          // otherwise we need a temp header and the widths need applying to all cells\r\n          if (this.table.tHead) {\r\n              // Reset widths\r\n              each(this.activeHeadings, function (cell) {\r\n                  cell.style.width = \"\";\r\n              }, this);\r\n\r\n              each(this.activeHeadings, function (cell, i) {\r\n                  var ow = cell.offsetWidth;\r\n                  var w = ow / this.rect.width * 100;\r\n                  cell.style.width = w + \"%\";\r\n                  this.columnWidths[i] = ow;\r\n              }, this);\r\n          } else {\r\n              cells = [];\r\n\r\n              // Make temperary headings\r\n              hd = createElement(\"thead\");\r\n              var r = createElement(\"tr\");\r\n              var c = this.table.tBodies[0].rows[0].cells;\r\n              each(c, function () {\r\n                  var th = createElement(\"th\");\r\n                  r.appendChild(th);\r\n                  cells.push(th);\r\n              });\r\n\r\n              hd.appendChild(r);\r\n              this.table.insertBefore(hd, this.body);\r\n\r\n              var widths = [];\r\n              each(cells, function (cell, i) {\r\n                  var ow = cell.offsetWidth;\r\n                  var w = ow / this.rect.width * 100;\r\n                  widths.push(w);\r\n                  this.columnWidths[i] = ow;\r\n              }, this);\r\n\r\n              each(this.data, function (row) {\r\n                  each(row.cells, function (cell, i) {\r\n                      if (this.columns(cell.cellIndex).visible())\r\n                          cell.style.width = widths[i] + \"%\";\r\n                  }, this);\r\n              }, this);\r\n\r\n              // Discard the temp header\r\n              this.table.removeChild(hd);\r\n          }\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Fix the container height;\r\n   * @return {Void}\r\n   */\r\n  proto.fixHeight = function () {\r\n      if (this.options.fixedHeight) {\r\n          this.container.style.height = null;\r\n          this.rect = this.container.getBoundingClientRect();\r\n          this.container.style.height = this.rect.height + \"px\";\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Perform a search of the data set\r\n   * @param  {string} query\r\n   * @return {void}\r\n   */\r\n  proto.search = function (query) {\r\n      if (!this.hasRows) return false;\r\n\r\n      var that = this;\r\n\r\n      query = query.toLowerCase();\r\n\r\n      this.currentPage = 1;\r\n      this.searching = true;\r\n      this.searchData = [];\r\n\r\n      if (!query.length) {\r\n          this.searching = false;\r\n          this.update();\r\n          this.emit(\"datatable.search\", query, this.searchData);\r\n          classList.remove(this.wrapper, \"search-results\");\r\n          return false;\r\n      }\r\n\r\n      this.clear();\r\n\r\n      each(this.data, function (row, idx) {\r\n          var inArray = this.searchData.indexOf(row) > -1;\r\n\r\n          // https://github.com/Mobius1/Vanilla-DataTables/issues/12\r\n          var doesQueryMatch = query.split(\" \").reduce(function (bool, word) {\r\n              var includes = false,\r\n                  cell = null,\r\n                  content = null;\r\n\r\n              for (var x = 0; x < row.cells.length; x++) {\r\n                  cell = row.cells[x];\r\n                  content = cell.hasAttribute('data-content') ? cell.getAttribute('data-content') : cell.textContent;\r\n\r\n                  if (\r\n                      content.toLowerCase().indexOf(word) > -1 &&\r\n                      that.columns(cell.cellIndex).visible()\r\n                  ) {\r\n                      includes = true;\r\n                      break;\r\n                  }\r\n              }\r\n\r\n              return bool && includes;\r\n          }, true);\r\n\r\n          if (doesQueryMatch && !inArray) {\r\n              row.searchIndex = idx;\r\n              this.searchData.push(idx);\r\n          } else {\r\n              row.searchIndex = null;\r\n          }\r\n      }, this);\r\n\r\n      classList.add(this.wrapper, \"search-results\");\r\n\r\n      if (!that.searchData.length) {\r\n          classList.remove(that.wrapper, \"search-results\");\r\n\r\n          that.setMessage(that.options.labels.noRows);\r\n      } else {\r\n          that.update();\r\n      }\r\n\r\n      this.emit(\"datatable.search\", query, this.searchData);\r\n  };\r\n\r\n  /**\r\n   * Change page\r\n   * @param  {int} page\r\n   * @return {void}\r\n   */\r\n  proto.page = function (page) {\r\n      // We don't want to load the current page again.\r\n      if (page == this.currentPage) {\r\n          return false;\r\n      }\r\n\r\n      if (!isNaN(page)) {\r\n          this.currentPage = parseInt(page, 10);\r\n      }\r\n\r\n      if (page > this.pages.length || page < 0) {\r\n          return false;\r\n      }\r\n\r\n      this.render(\"page\");\r\n      this.render(\"pager\");\r\n\r\n      this.emit(\"datatable.page\", page);\r\n  };\r\n\r\n  /**\r\n   * Sort by column\r\n   * @param  {int} column - The column no.\r\n   * @param  {string} direction - asc or desc\r\n   * @return {void}\r\n   */\r\n  proto.sortColumn = function (column, direction) {\r\n      // Use columns API until sortColumn method is removed\r\n      this.columns().sort(column, direction);\r\n  };\r\n\r\n  /**\r\n   * Add new row data\r\n   * @param {object} data\r\n   */\r\n  proto.insert = function (data) {\r\n\r\n      var that = this,\r\n          rows = [];\r\n      if (isObject(data)) {\r\n          if (data.headings) {\r\n              if (!that.hasHeadings && !that.hasRows) {\r\n                  var tr = createElement(\"tr\"),\r\n                      th;\r\n                  each(data.headings, function (heading) {\r\n                      th = createElement(\"th\", {\r\n                          html: heading\r\n                      });\r\n\r\n                      tr.appendChild(th);\r\n                  });\r\n                  that.head.appendChild(tr);\r\n\r\n                  that.header = tr;\r\n                  that.headings = [].slice.call(tr.cells);\r\n                  that.hasHeadings = true;\r\n\r\n                  // Re-enable sorting if it was disabled due\r\n                  // to missing header\r\n                  that.options.sortable = that.initialSortable;\r\n\r\n                  // Allow sorting on new header\r\n                  that.render(\"header\");\r\n              }\r\n          }\r\n\r\n          if (data.data && isArray(data.data)) {\r\n              rows = data.data;\r\n          }\r\n      } else if (isArray(data)) {\r\n          each(data, function (row) {\r\n              var r = [];\r\n              each(row, function (cell, heading) {\r\n\r\n                  var index = that.labels.indexOf(heading);\r\n\r\n                  if (index > -1) {\r\n                      r[index] = cell;\r\n                  }\r\n              });\r\n              rows.push(r);\r\n          });\r\n      }\r\n\r\n      if (rows.length) {\r\n          that.rows().add(rows);\r\n\r\n          that.hasRows = true;\r\n      }\r\n\r\n      that.update();\r\n\r\n      that.fixColumns();\r\n  };\r\n\r\n  /**\r\n   * Refresh the instance\r\n   * @return {void}\r\n   */\r\n  proto.refresh = function () {\r\n      if (this.options.searchable) {\r\n          this.input.value = \"\";\r\n          this.searching = false;\r\n      }\r\n      this.currentPage = 1;\r\n      this.onFirstPage = true;\r\n      this.update();\r\n\r\n      this.emit(\"datatable.refresh\");\r\n  };\r\n\r\n  /**\r\n   * Truncate the table\r\n   * @param  {mixes} html - HTML string or HTMLElement\r\n   * @return {void}\r\n   */\r\n  proto.clear = function (html) {\r\n      if (this.body) {\r\n          flush(this.body, this.isIE);\r\n      }\r\n\r\n      var parent = this.body;\r\n      if (!this.body) {\r\n          parent = this.table;\r\n      }\r\n\r\n      if (html) {\r\n          if (typeof html === \"string\") {\r\n              var frag = doc.createDocumentFragment();\r\n              frag.innerHTML = html;\r\n          }\r\n\r\n          parent.appendChild(html);\r\n      }\r\n  };\r\n\r\n  /**\r\n   * Export table to various formats (csv, txt or sql)\r\n   * @param  {Object} options User options\r\n   * @return {Boolean}\r\n   */\r\n  proto.export = function (options) {\r\n      if (!this.hasHeadings && !this.hasRows) return false;\r\n\r\n      var headers = this.activeHeadings,\r\n          rows = [],\r\n          arr = [],\r\n          i,\r\n          x,\r\n          str,\r\n          link;\r\n\r\n      var defaults = {\r\n          download: true,\r\n          skipColumn: [],\r\n\r\n          // csv\r\n          lineDelimiter: \"\\n\",\r\n          columnDelimiter: \",\",\r\n\r\n          // sql\r\n          tableName: \"myTable\",\r\n\r\n          // json\r\n          replacer: null,\r\n          space: 4\r\n      };\r\n\r\n      // Check for the options object\r\n      if (!isObject(options)) {\r\n          return false;\r\n      }\r\n\r\n      var o = extend(defaults, options);\r\n\r\n      if (o.type) {\r\n          if (o.type === \"txt\" || o.type === \"csv\") {\r\n              // Include headings\r\n              rows[0] = this.header;\r\n          }\r\n\r\n          // Selection or whole table\r\n          if (o.selection) {\r\n              // Page number\r\n              if (!isNaN(o.selection)) {\r\n                  rows = rows.concat(this.pages[o.selection - 1]);\r\n              } else if (isArray(o.selection)) {\r\n                  // Array of page numbers\r\n                  for (i = 0; i < o.selection.length; i++) {\r\n                      rows = rows.concat(this.pages[o.selection[i] - 1]);\r\n                  }\r\n              }\r\n          } else {\r\n              rows = rows.concat(this.activeRows);\r\n          }\r\n\r\n          // Only proceed if we have data\r\n          if (rows.length) {\r\n              if (o.type === \"txt\" || o.type === \"csv\") {\r\n                  str = \"\";\r\n\r\n                  for (i = 0; i < rows.length; i++) {\r\n                      for (x = 0; x < rows[i].cells.length; x++) {\r\n                          // Check for column skip and visibility\r\n                          if (\r\n                              o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&\r\n                              this.columns(headers[x].originalCellIndex).visible()\r\n                          ) {\r\n                              var text = rows[i].cells[x].textContent;\r\n                              text = text.trim();\r\n                              text = text.replace(/\\s{2,}/g, ' ');\r\n                              text = text.replace(/\\n/g, '  ');\r\n                              text = text.replace(/\"/g, '\"\"');\r\n                              if (text.indexOf(\",\") > -1)\r\n                                  text = '\"' + text + '\"';\r\n\r\n\r\n                              str += text + o.columnDelimiter;\r\n                          }\r\n                      }\r\n                      // Remove trailing column delimiter\r\n                      str = str.trim().substring(0, str.length - 1);\r\n\r\n                      // Apply line delimiter\r\n                      str += o.lineDelimiter;\r\n                  }\r\n\r\n                  // Remove trailing line delimiter\r\n                  str = str.trim().substring(0, str.length - 1);\r\n\r\n                  if (o.download) {\r\n                      str = \"data:text/csv;charset=utf-8,\" + str;\r\n                  }\r\n              } else if (o.type === \"sql\") {\r\n                  // Begin INSERT statement\r\n                  str = \"INSERT INTO `\" + o.tableName + \"` (\";\r\n\r\n                  // Convert table headings to column names\r\n                  for (i = 0; i < headers.length; i++) {\r\n                      // Check for column skip and column visibility\r\n                      if (\r\n                          o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&\r\n                          this.columns(headers[i].originalCellIndex).visible()\r\n                      ) {\r\n                          str += \"`\" + headers[i].textContent + \"`,\";\r\n                      }\r\n                  }\r\n\r\n                  // Remove trailing comma\r\n                  str = str.trim().substring(0, str.length - 1);\r\n\r\n                  // Begin VALUES\r\n                  str += \") VALUES \";\r\n\r\n                  // Iterate rows and convert cell data to column values\r\n                  for (i = 0; i < rows.length; i++) {\r\n                      str += \"(\";\r\n\r\n                      for (x = 0; x < rows[i].cells.length; x++) {\r\n                          // Check for column skip and column visibility\r\n                          if (\r\n                              o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&\r\n                              this.columns(headers[x].originalCellIndex).visible()\r\n                          ) {\r\n                              str += '\"' + rows[i].cells[x].textContent + '\",';\r\n                          }\r\n                      }\r\n\r\n                      // Remove trailing comma\r\n                      str = str.trim().substring(0, str.length - 1);\r\n\r\n                      // end VALUES\r\n                      str += \"),\";\r\n                  }\r\n\r\n                  // Remove trailing comma\r\n                  str = str.trim().substring(0, str.length - 1);\r\n\r\n                  // Add trailing colon\r\n                  str += \";\";\r\n\r\n                  if (o.download) {\r\n                      str = \"data:application/sql;charset=utf-8,\" + str;\r\n                  }\r\n              } else if (o.type === \"json\") {\r\n                  // Iterate rows\r\n                  for (x = 0; x < rows.length; x++) {\r\n                      arr[x] = arr[x] || {};\r\n                      // Iterate columns\r\n                      for (i = 0; i < headers.length; i++) {\r\n                          // Check for column skip and column visibility\r\n                          if (\r\n                              o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&\r\n                              this.columns(headers[i].originalCellIndex).visible()\r\n                          ) {\r\n                              arr[x][headers[i].textContent] = rows[x].cells[i].textContent;\r\n                          }\r\n                      }\r\n                  }\r\n\r\n                  // Convert the array of objects to JSON string\r\n                  str = JSON.stringify(arr, o.replacer, o.space);\r\n\r\n                  if (o.download) {\r\n                      str = \"data:application/json;charset=utf-8,\" + str;\r\n                  }\r\n              }\r\n\r\n              // Download\r\n              if (o.download) {\r\n                  // Filename\r\n                  o.filename = o.filename || \"datatable_export\";\r\n                  o.filename += \".\" + o.type;\r\n\r\n                  str = encodeURI(str);\r\n\r\n                  // Create a link to trigger the download\r\n                  link = document.createElement(\"a\");\r\n                  link.href = str;\r\n                  link.download = o.filename;\r\n\r\n                  // Append the link\r\n                  body.appendChild(link);\r\n\r\n                  // Trigger the download\r\n                  link.click();\r\n\r\n                  // Remove the link\r\n                  body.removeChild(link);\r\n              }\r\n\r\n              return str;\r\n          }\r\n      }\r\n\r\n      return false;\r\n  };\r\n\r\n  /**\r\n   * Import data to the table\r\n   * @param  {Object} options User options\r\n   * @return {Boolean}\r\n   */\r\n  proto.import = function (options) {\r\n      var obj = false;\r\n      var defaults = {\r\n          // csv\r\n          lineDelimiter: \"\\n\",\r\n          columnDelimiter: \",\"\r\n      };\r\n\r\n      // Check for the options object\r\n      if (!isObject(options)) {\r\n          return false;\r\n      }\r\n\r\n      options = extend(defaults, options);\r\n\r\n      if (options.data.length || isObject(options.data)) {\r\n          // Import CSV\r\n          if (options.type === \"csv\") {\r\n              obj = {\r\n                  data: []\r\n              };\r\n\r\n              // Split the string into rows\r\n              var rows = options.data.split(options.lineDelimiter);\r\n\r\n              if (rows.length) {\r\n\r\n                  if (options.headings) {\r\n                      obj.headings = rows[0].split(options.columnDelimiter);\r\n\r\n                      rows.shift();\r\n                  }\r\n\r\n                  each(rows, function (row, i) {\r\n                      obj.data[i] = [];\r\n\r\n                      // Split the rows into values\r\n                      var values = row.split(options.columnDelimiter);\r\n\r\n                      if (values.length) {\r\n                          each(values, function (value) {\r\n                              obj.data[i].push(value);\r\n                          });\r\n                      }\r\n                  });\r\n              }\r\n          } else if (options.type === \"json\") {\r\n              var json = isJson(options.data);\r\n\r\n              // Valid JSON string\r\n              if (json) {\r\n                  obj = {\r\n                      headings: [],\r\n                      data: []\r\n                  };\r\n\r\n                  each(json, function (data, i) {\r\n                      obj.data[i] = [];\r\n                      each(data, function (value, column) {\r\n                          if (obj.headings.indexOf(column) < 0) {\r\n                              obj.headings.push(column);\r\n                          }\r\n\r\n                          obj.data[i].push(value);\r\n                      });\r\n                  });\r\n              } else {\r\n                  console.warn(\"That's not valid JSON!\");\r\n              }\r\n          }\r\n\r\n          if (isObject(options.data)) {\r\n              obj = options.data;\r\n          }\r\n\r\n          if (obj) {\r\n              // Add the rows\r\n              this.insert(obj);\r\n          }\r\n      }\r\n\r\n      return false;\r\n  };\r\n  /**\r\n   * Print the table\r\n   * @return {void}\r\n   */\r\n  proto.print = function () {\r\n      var headings = this.activeHeadings;\r\n      var rows = this.activeRows;\r\n      var table = createElement(\"table\");\r\n      var thead = createElement(\"thead\");\r\n      var tbody = createElement(\"tbody\");\r\n\r\n      var tr = createElement(\"tr\");\r\n      each(headings, function (th) {\r\n          tr.appendChild(\r\n              createElement(\"th\", {\r\n                  html: th.textContent\r\n              })\r\n          );\r\n      });\r\n\r\n      thead.appendChild(tr);\r\n\r\n      each(rows, function (row) {\r\n          var tr = createElement(\"tr\");\r\n          each(row.cells, function (cell) {\r\n              tr.appendChild(\r\n                  createElement(\"td\", {\r\n                      html: cell.textContent\r\n                  })\r\n              );\r\n          });\r\n          tbody.appendChild(tr);\r\n      });\r\n\r\n      table.appendChild(thead);\r\n      table.appendChild(tbody);\r\n\r\n      // Open new window\r\n      var w = win.open();\r\n\r\n      // Append the table to the body\r\n      w.document.body.appendChild(table);\r\n\r\n      // Print\r\n      w.print();\r\n  };\r\n\r\n  /**\r\n   * Show a message in the table\r\n   * @param {string} message\r\n   */\r\n  proto.setMessage = function (message) {\r\n      var colspan = 1;\r\n\r\n      if (this.hasRows) {\r\n          colspan = this.data[0].cells.length;\r\n      }\r\n\r\n      classList.add(this.wrapper, \"dataTable-empty\");\r\n\r\n      this.clear(\r\n          createElement(\"tr\", {\r\n              html: '<td class=\"dataTables-empty\" colspan=\"' +\r\n                  colspan +\r\n                  '\">' +\r\n                  message +\r\n                  \"</td>\"\r\n          })\r\n      );\r\n  };\r\n\r\n  /**\r\n   * Columns API access\r\n   * @return {Object} new Columns instance\r\n   */\r\n  proto.columns = function (columns) {\r\n      return new Columns(this, columns);\r\n  };\r\n\r\n  /**\r\n   * Rows API access\r\n   * @return {Object} new Rows instance\r\n   */\r\n  proto.rows = function (rows) {\r\n      return new Rows(this, rows);\r\n  };\r\n\r\n  /**\r\n   * Add custom event listener\r\n   * @param  {String} event\r\n   * @param  {Function} callback\r\n   * @return {Void}\r\n   */\r\n  proto.on = function (event, callback) {\r\n      this.events = this.events || {};\r\n      this.events[event] = this.events[event] || [];\r\n      this.events[event].push(callback);\r\n  };\r\n\r\n  /**\r\n   * Remove custom event listener\r\n   * @param  {String} event\r\n   * @param  {Function} callback\r\n   * @return {Void}\r\n   */\r\n  proto.off = function (event, callback) {\r\n      this.events = this.events || {};\r\n      if (event in this.events === false) return;\r\n      this.events[event].splice(this.events[event].indexOf(callback), 1);\r\n  };\r\n\r\n  /**\r\n   * Fire custom event\r\n   * @param  {String} event\r\n   * @return {Void}\r\n   */\r\n  proto.emit = function (event) {\r\n      this.events = this.events || {};\r\n      if (event in this.events === false) return;\r\n      for (var i = 0; i < this.events[event].length; i++) {\r\n          this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));\r\n      }\r\n  };\r\n\r\n  return DataTable;\r\n});","/*!\r\n * JavaScript Cookie v2.2.0\r\n * https://github.com/js-cookie/js-cookie\r\n *\r\n * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\r\n * Released under the MIT license\r\n */\r\n;(function (factory) {\r\n\tvar registeredInModuleLoader;\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(factory);\r\n\t\tregisteredInModuleLoader = true;\r\n\t}\r\n\tif (typeof exports === 'object') {\r\n\t\tmodule.exports = factory();\r\n\t\tregisteredInModuleLoader = true;\r\n\t}\r\n\tif (!registeredInModuleLoader) {\r\n\t\tvar OldCookies = window.Cookies;\r\n\t\tvar api = window.Cookies = factory();\r\n\t\tapi.noConflict = function () {\r\n\t\t\twindow.Cookies = OldCookies;\r\n\t\t\treturn api;\r\n\t\t};\r\n\t}\r\n}(function () {\r\n\tfunction extend () {\r\n\t\tvar i = 0;\r\n\t\tvar result = {};\r\n\t\tfor (; i < arguments.length; i++) {\r\n\t\t\tvar attributes = arguments[ i ];\r\n\t\t\tfor (var key in attributes) {\r\n\t\t\t\tresult[key] = attributes[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction init (converter) {\r\n\t\tfunction api (key, value, attributes) {\r\n\t\t\tif (typeof document === 'undefined') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Write\r\n\r\n\t\t\tif (arguments.length > 1) {\r\n\t\t\t\tattributes = extend({\r\n\t\t\t\t\tpath: '/'\r\n\t\t\t\t}, api.defaults, attributes);\r\n\r\n\t\t\t\tif (typeof attributes.expires === 'number') {\r\n\t\t\t\t\tattributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We're using \"expires\" because \"max-age\" is not supported by IE\r\n\t\t\t\tattributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar result = JSON.stringify(value);\r\n\t\t\t\t\tif (/^[\\{\\[]/.test(result)) {\r\n\t\t\t\t\t\tvalue = result;\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {}\r\n\r\n\t\t\t\tvalue = converter.write ?\r\n\t\t\t\t\tconverter.write(value, key) :\r\n\t\t\t\t\tencodeURIComponent(String(value))\r\n\t\t\t\t\t\t.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\r\n\r\n\t\t\t\tkey = encodeURIComponent(String(key))\r\n\t\t\t\t\t.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)\r\n\t\t\t\t\t.replace(/[\\(\\)]/g, escape);\r\n\r\n\t\t\t\tvar stringifiedAttributes = '';\r\n\t\t\t\tfor (var attributeName in attributes) {\r\n\t\t\t\t\tif (!attributes[attributeName]) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstringifiedAttributes += '; ' + attributeName;\r\n\t\t\t\t\tif (attributes[attributeName] === true) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Considers RFC 6265 section 5.2:\r\n\t\t\t\t\t// ...\r\n\t\t\t\t\t// 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\r\n\t\t\t\t\t//     character:\r\n\t\t\t\t\t// Consume the characters of the unparsed-attributes up to,\r\n\t\t\t\t\t// not including, the first %x3B (\";\") character.\r\n\t\t\t\t\t// ...\r\n\t\t\t\t\tstringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn (document.cookie = key + '=' + value + stringifiedAttributes);\r\n\t\t\t}\r\n\r\n\t\t\t// Read\r\n\r\n\t\t\tvar jar = {};\r\n\t\t\tvar decode = function (s) {\r\n\t\t\t\treturn s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\r\n\t\t\t};\r\n\t\t\t// To prevent the for loop in the first place assign an empty array\r\n\t\t\t// in case there are no cookies at all.\r\n\t\t\tvar cookies = document.cookie ? document.cookie.split('; ') : [];\r\n\t\t\tvar i = 0;\r\n\r\n\t\t\tfor (; i < cookies.length; i++) {\r\n\t\t\t\tvar parts = cookies[i].split('=');\r\n\t\t\t\tvar cookie = parts.slice(1).join('=');\r\n\r\n\t\t\t\tif (!this.json && cookie.charAt(0) === '\"') {\r\n\t\t\t\t\tcookie = cookie.slice(1, -1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar name = decode(parts[0]);\r\n\t\t\t\t\tcookie = (converter.read || converter)(cookie, name) ||\r\n\t\t\t\t\t\tdecode(cookie);\r\n\r\n\t\t\t\t\tif (this.json) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tcookie = JSON.parse(cookie);\r\n\t\t\t\t\t\t} catch (e) {}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tjar[name] = cookie;\r\n\r\n\t\t\t\t\tif (key === name) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t}\r\n\r\n\t\t\treturn key ? jar[key] : jar;\r\n\t\t}\r\n\r\n\t\tapi.set = api;\r\n\t\tapi.get = function (key) {\r\n\t\t\treturn api.call(api, key);\r\n\t\t};\r\n\t\tapi.getJSON = function (key) {\r\n\t\t\treturn api.call({\r\n\t\t\t\tjson: true\r\n\t\t\t}, key);\r\n\t\t};\r\n\t\tapi.remove = function (key, attributes) {\r\n\t\t\tapi(key, '', extend(attributes, {\r\n\t\t\t\texpires: -1\r\n\t\t\t}));\r\n\t\t};\r\n\r\n\t\tapi.defaults = {};\r\n\r\n\t\tapi.withConverter = init;\r\n\r\n\t\treturn api;\r\n\t}\r\n\r\n\treturn init(function () {});\r\n}));\r\n","/**\r\n * [js-md5]{@link https://github.com/emn178/js-md5}\r\n *\r\n * @namespace md5\r\n * @version 0.7.3\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2014-2017\r\n * @license MIT\r\n */\r\n! function() { \"use strict\";\r\n\r\n    function t(t) { if (t) d[0] = d[16] = d[1] = d[2] = d[3] = d[4] = d[5] = d[6] = d[7] = d[8] = d[9] = d[10] = d[11] = d[12] = d[13] = d[14] = d[15] = 0, this.blocks = d, this.buffer8 = l;\r\n        else if (a) { var r = new ArrayBuffer(68);\r\n            this.buffer8 = new Uint8Array(r), this.blocks = new Uint32Array(r) } else this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0, this.finalized = this.hashed = !1, this.first = !0 } var r = \"input is invalid type\",\r\n        e = \"object\" == typeof window,\r\n        i = e ? window : {};\r\n    i.JS_MD5_NO_WINDOW && (e = !1); var s = !e && \"object\" == typeof self,\r\n        h = !i.JS_MD5_NO_NODE_JS && \"object\" == typeof process && process.versions && process.versions.node;\r\n    h ? i = global : s && (i = self); var f = !i.JS_MD5_NO_COMMON_JS && \"object\" == typeof module && module.exports,\r\n        o = \"function\" == typeof define && define.amd,\r\n        a = !i.JS_MD5_NO_ARRAY_BUFFER && \"undefined\" != typeof ArrayBuffer,\r\n        n = \"0123456789abcdef\".split(\"\"),\r\n        u = [128, 32768, 8388608, -2147483648],\r\n        y = [0, 8, 16, 24],\r\n        c = [\"hex\", \"array\", \"digest\", \"buffer\", \"arrayBuffer\", \"base64\"],\r\n        p = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\"),\r\n        d = [],\r\n        l; if (a) { var A = new ArrayBuffer(68);\r\n        l = new Uint8Array(A), d = new Uint32Array(A) }!i.JS_MD5_NO_NODE_JS && Array.isArray || (Array.isArray = function(t) { return \"[object Array]\" === Object.prototype.toString.call(t) }), !a || !i.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(t) { return \"object\" == typeof t && t.buffer && t.buffer.constructor === ArrayBuffer }); var b = function(r) { return function(e) { return new t(!0).update(e)[r]() } },\r\n        v = function() { var r = b(\"hex\");\r\n            h && (r = w(r)), r.create = function() { return new t }, r.update = function(t) { return r.create().update(t) }; for (var e = 0; e < c.length; ++e) { var i = c[e];\r\n                r[i] = b(i) } return r },\r\n        w = function(t) { var e = eval(\"require('crypto')\"),\r\n                i = eval(\"require('buffer').Buffer\"),\r\n                s = function(s) { if (\"string\" == typeof s) return e.createHash(\"md5\").update(s, \"utf8\").digest(\"hex\"); if (null === s || void 0 === s) throw r; return s.constructor === ArrayBuffer && (s = new Uint8Array(s)), Array.isArray(s) || ArrayBuffer.isView(s) || s.constructor === i ? e.createHash(\"md5\").update(new i(s)).digest(\"hex\") : t(s) }; return s };\r\n    t.prototype.update = function(t) { if (!this.finalized) { var e, i = typeof t; if (\"string\" !== i) { if (\"object\" !== i) throw r; if (null === t) throw r; if (a && t.constructor === ArrayBuffer) t = new Uint8Array(t);\r\n                else if (!(Array.isArray(t) || a && ArrayBuffer.isView(t))) throw r;\r\n                e = !0 } for (var s, h, f = 0, o = t.length, n = this.blocks, u = this.buffer8; f < o;) { if (this.hashed && (this.hashed = !1, n[0] = n[16], n[16] = n[1] = n[2] = n[3] = n[4] = n[5] = n[6] = n[7] = n[8] = n[9] = n[10] = n[11] = n[12] = n[13] = n[14] = n[15] = 0), e)\r\n                    if (a)\r\n                        for (h = this.start; f < o && h < 64; ++f) u[h++] = t[f];\r\n                    else\r\n                        for (h = this.start; f < o && h < 64; ++f) n[h >> 2] |= t[f] << y[3 & h++];\r\n                else if (a)\r\n                    for (h = this.start; f < o && h < 64; ++f)(s = t.charCodeAt(f)) < 128 ? u[h++] = s : s < 2048 ? (u[h++] = 192 | s >> 6, u[h++] = 128 | 63 & s) : s < 55296 || s >= 57344 ? (u[h++] = 224 | s >> 12, u[h++] = 128 | s >> 6 & 63, u[h++] = 128 | 63 & s) : (s = 65536 + ((1023 & s) << 10 | 1023 & t.charCodeAt(++f)), u[h++] = 240 | s >> 18, u[h++] = 128 | s >> 12 & 63, u[h++] = 128 | s >> 6 & 63, u[h++] = 128 | 63 & s);\r\n                else\r\n                    for (h = this.start; f < o && h < 64; ++f)(s = t.charCodeAt(f)) < 128 ? n[h >> 2] |= s << y[3 & h++] : s < 2048 ? (n[h >> 2] |= (192 | s >> 6) << y[3 & h++], n[h >> 2] |= (128 | 63 & s) << y[3 & h++]) : s < 55296 || s >= 57344 ? (n[h >> 2] |= (224 | s >> 12) << y[3 & h++], n[h >> 2] |= (128 | s >> 6 & 63) << y[3 & h++], n[h >> 2] |= (128 | 63 & s) << y[3 & h++]) : (s = 65536 + ((1023 & s) << 10 | 1023 & t.charCodeAt(++f)), n[h >> 2] |= (240 | s >> 18) << y[3 & h++], n[h >> 2] |= (128 | s >> 12 & 63) << y[3 & h++], n[h >> 2] |= (128 | s >> 6 & 63) << y[3 & h++], n[h >> 2] |= (128 | 63 & s) << y[3 & h++]);\r\n                this.lastByteIndex = h, this.bytes += h - this.start, h >= 64 ? (this.start = h - 64, this.hash(), this.hashed = !0) : this.start = h } return this.bytes > 4294967295 && (this.hBytes += this.bytes / 4294967296 << 0, this.bytes = this.bytes % 4294967296), this } }, t.prototype.finalize = function() { if (!this.finalized) { this.finalized = !0; var t = this.blocks,\r\n                r = this.lastByteIndex;\r\n            t[r >> 2] |= u[3 & r], r >= 56 && (this.hashed || this.hash(), t[0] = t[16], t[16] = t[1] = t[2] = t[3] = t[4] = t[5] = t[6] = t[7] = t[8] = t[9] = t[10] = t[11] = t[12] = t[13] = t[14] = t[15] = 0), t[14] = this.bytes << 3, t[15] = this.hBytes << 3 | this.bytes >>> 29, this.hash() } }, t.prototype.hash = function() { var t, r, e, i, s, h, f = this.blocks;\r\n        this.first ? r = ((r = ((t = ((t = f[0] - 680876937) << 7 | t >>> 25) - 271733879 << 0) ^ (e = ((e = (-271733879 ^ (i = ((i = (-1732584194 ^ 2004318071 & t) + f[1] - 117830708) << 12 | i >>> 20) + t << 0) & (-271733879 ^ t)) + f[2] - 1126478375) << 17 | e >>> 15) + i << 0) & (i ^ t)) + f[3] - 1316259209) << 22 | r >>> 10) + e << 0 : (t = this.h0, r = this.h1, e = this.h2, r = ((r += ((t = ((t += ((i = this.h3) ^ r & (e ^ i)) + f[0] - 680876936) << 7 | t >>> 25) + r << 0) ^ (e = ((e += (r ^ (i = ((i += (e ^ t & (r ^ e)) + f[1] - 389564586) << 12 | i >>> 20) + t << 0) & (t ^ r)) + f[2] + 606105819) << 17 | e >>> 15) + i << 0) & (i ^ t)) + f[3] - 1044525330) << 22 | r >>> 10) + e << 0), r = ((r += ((t = ((t += (i ^ r & (e ^ i)) + f[4] - 176418897) << 7 | t >>> 25) + r << 0) ^ (e = ((e += (r ^ (i = ((i += (e ^ t & (r ^ e)) + f[5] + 1200080426) << 12 | i >>> 20) + t << 0) & (t ^ r)) + f[6] - 1473231341) << 17 | e >>> 15) + i << 0) & (i ^ t)) + f[7] - 45705983) << 22 | r >>> 10) + e << 0, r = ((r += ((t = ((t += (i ^ r & (e ^ i)) + f[8] + 1770035416) << 7 | t >>> 25) + r << 0) ^ (e = ((e += (r ^ (i = ((i += (e ^ t & (r ^ e)) + f[9] - 1958414417) << 12 | i >>> 20) + t << 0) & (t ^ r)) + f[10] - 42063) << 17 | e >>> 15) + i << 0) & (i ^ t)) + f[11] - 1990404162) << 22 | r >>> 10) + e << 0, r = ((r += ((t = ((t += (i ^ r & (e ^ i)) + f[12] + 1804603682) << 7 | t >>> 25) + r << 0) ^ (e = ((e += (r ^ (i = ((i += (e ^ t & (r ^ e)) + f[13] - 40341101) << 12 | i >>> 20) + t << 0) & (t ^ r)) + f[14] - 1502002290) << 17 | e >>> 15) + i << 0) & (i ^ t)) + f[15] + 1236535329) << 22 | r >>> 10) + e << 0, r = ((r += ((i = ((i += (r ^ e & ((t = ((t += (e ^ i & (r ^ e)) + f[1] - 165796510) << 5 | t >>> 27) + r << 0) ^ r)) + f[6] - 1069501632) << 9 | i >>> 23) + t << 0) ^ t & ((e = ((e += (t ^ r & (i ^ t)) + f[11] + 643717713) << 14 | e >>> 18) + i << 0) ^ i)) + f[0] - 373897302) << 20 | r >>> 12) + e << 0, r = ((r += ((i = ((i += (r ^ e & ((t = ((t += (e ^ i & (r ^ e)) + f[5] - 701558691) << 5 | t >>> 27) + r << 0) ^ r)) + f[10] + 38016083) << 9 | i >>> 23) + t << 0) ^ t & ((e = ((e += (t ^ r & (i ^ t)) + f[15] - 660478335) << 14 | e >>> 18) + i << 0) ^ i)) + f[4] - 405537848) << 20 | r >>> 12) + e << 0, r = ((r += ((i = ((i += (r ^ e & ((t = ((t += (e ^ i & (r ^ e)) + f[9] + 568446438) << 5 | t >>> 27) + r << 0) ^ r)) + f[14] - 1019803690) << 9 | i >>> 23) + t << 0) ^ t & ((e = ((e += (t ^ r & (i ^ t)) + f[3] - 187363961) << 14 | e >>> 18) + i << 0) ^ i)) + f[8] + 1163531501) << 20 | r >>> 12) + e << 0, r = ((r += ((i = ((i += (r ^ e & ((t = ((t += (e ^ i & (r ^ e)) + f[13] - 1444681467) << 5 | t >>> 27) + r << 0) ^ r)) + f[2] - 51403784) << 9 | i >>> 23) + t << 0) ^ t & ((e = ((e += (t ^ r & (i ^ t)) + f[7] + 1735328473) << 14 | e >>> 18) + i << 0) ^ i)) + f[12] - 1926607734) << 20 | r >>> 12) + e << 0, r = ((r += ((h = (i = ((i += ((s = r ^ e) ^ (t = ((t += (s ^ i) + f[5] - 378558) << 4 | t >>> 28) + r << 0)) + f[8] - 2022574463) << 11 | i >>> 21) + t << 0) ^ t) ^ (e = ((e += (h ^ r) + f[11] + 1839030562) << 16 | e >>> 16) + i << 0)) + f[14] - 35309556) << 23 | r >>> 9) + e << 0, r = ((r += ((h = (i = ((i += ((s = r ^ e) ^ (t = ((t += (s ^ i) + f[1] - 1530992060) << 4 | t >>> 28) + r << 0)) + f[4] + 1272893353) << 11 | i >>> 21) + t << 0) ^ t) ^ (e = ((e += (h ^ r) + f[7] - 155497632) << 16 | e >>> 16) + i << 0)) + f[10] - 1094730640) << 23 | r >>> 9) + e << 0, r = ((r += ((h = (i = ((i += ((s = r ^ e) ^ (t = ((t += (s ^ i) + f[13] + 681279174) << 4 | t >>> 28) + r << 0)) + f[0] - 358537222) << 11 | i >>> 21) + t << 0) ^ t) ^ (e = ((e += (h ^ r) + f[3] - 722521979) << 16 | e >>> 16) + i << 0)) + f[6] + 76029189) << 23 | r >>> 9) + e << 0, r = ((r += ((h = (i = ((i += ((s = r ^ e) ^ (t = ((t += (s ^ i) + f[9] - 640364487) << 4 | t >>> 28) + r << 0)) + f[12] - 421815835) << 11 | i >>> 21) + t << 0) ^ t) ^ (e = ((e += (h ^ r) + f[15] + 530742520) << 16 | e >>> 16) + i << 0)) + f[2] - 995338651) << 23 | r >>> 9) + e << 0, r = ((r += ((i = ((i += (r ^ ((t = ((t += (e ^ (r | ~i)) + f[0] - 198630844) << 6 | t >>> 26) + r << 0) | ~e)) + f[7] + 1126891415) << 10 | i >>> 22) + t << 0) ^ ((e = ((e += (t ^ (i | ~r)) + f[14] - 1416354905) << 15 | e >>> 17) + i << 0) | ~t)) + f[5] - 57434055) << 21 | r >>> 11) + e << 0, r = ((r += ((i = ((i += (r ^ ((t = ((t += (e ^ (r | ~i)) + f[12] + 1700485571) << 6 | t >>> 26) + r << 0) | ~e)) + f[3] - 1894986606) << 10 | i >>> 22) + t << 0) ^ ((e = ((e += (t ^ (i | ~r)) + f[10] - 1051523) << 15 | e >>> 17) + i << 0) | ~t)) + f[1] - 2054922799) << 21 | r >>> 11) + e << 0, r = ((r += ((i = ((i += (r ^ ((t = ((t += (e ^ (r | ~i)) + f[8] + 1873313359) << 6 | t >>> 26) + r << 0) | ~e)) + f[15] - 30611744) << 10 | i >>> 22) + t << 0) ^ ((e = ((e += (t ^ (i | ~r)) + f[6] - 1560198380) << 15 | e >>> 17) + i << 0) | ~t)) + f[13] + 1309151649) << 21 | r >>> 11) + e << 0, r = ((r += ((i = ((i += (r ^ ((t = ((t += (e ^ (r | ~i)) + f[4] - 145523070) << 6 | t >>> 26) + r << 0) | ~e)) + f[11] - 1120210379) << 10 | i >>> 22) + t << 0) ^ ((e = ((e += (t ^ (i | ~r)) + f[2] + 718787259) << 15 | e >>> 17) + i << 0) | ~t)) + f[9] - 343485551) << 21 | r >>> 11) + e << 0, this.first ? (this.h0 = t + 1732584193 << 0, this.h1 = r - 271733879 << 0, this.h2 = e - 1732584194 << 0, this.h3 = i + 271733878 << 0, this.first = !1) : (this.h0 = this.h0 + t << 0, this.h1 = this.h1 + r << 0, this.h2 = this.h2 + e << 0, this.h3 = this.h3 + i << 0) }, t.prototype.hex = function() { this.finalize(); var t = this.h0,\r\n            r = this.h1,\r\n            e = this.h2,\r\n            i = this.h3; return n[t >> 4 & 15] + n[15 & t] + n[t >> 12 & 15] + n[t >> 8 & 15] + n[t >> 20 & 15] + n[t >> 16 & 15] + n[t >> 28 & 15] + n[t >> 24 & 15] + n[r >> 4 & 15] + n[15 & r] + n[r >> 12 & 15] + n[r >> 8 & 15] + n[r >> 20 & 15] + n[r >> 16 & 15] + n[r >> 28 & 15] + n[r >> 24 & 15] + n[e >> 4 & 15] + n[15 & e] + n[e >> 12 & 15] + n[e >> 8 & 15] + n[e >> 20 & 15] + n[e >> 16 & 15] + n[e >> 28 & 15] + n[e >> 24 & 15] + n[i >> 4 & 15] + n[15 & i] + n[i >> 12 & 15] + n[i >> 8 & 15] + n[i >> 20 & 15] + n[i >> 16 & 15] + n[i >> 28 & 15] + n[i >> 24 & 15] }, t.prototype.toString = t.prototype.hex, t.prototype.digest = function() { this.finalize(); var t = this.h0,\r\n            r = this.h1,\r\n            e = this.h2,\r\n            i = this.h3; return [255 & t, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255, 255 & r, r >> 8 & 255, r >> 16 & 255, r >> 24 & 255, 255 & e, e >> 8 & 255, e >> 16 & 255, e >> 24 & 255, 255 & i, i >> 8 & 255, i >> 16 & 255, i >> 24 & 255] }, t.prototype.array = t.prototype.digest, t.prototype.arrayBuffer = function() { this.finalize(); var t = new ArrayBuffer(16),\r\n            r = new Uint32Array(t); return r[0] = this.h0, r[1] = this.h1, r[2] = this.h2, r[3] = this.h3, t }, t.prototype.buffer = t.prototype.arrayBuffer, t.prototype.base64 = function() { for (var t, r, e, i = \"\", s = this.array(), h = 0; h < 15;) t = s[h++], r = s[h++], e = s[h++], i += p[t >>> 2] + p[63 & (t << 4 | r >>> 4)] + p[63 & (r << 2 | e >>> 6)] + p[63 & e]; return t = s[h], i += p[t >>> 2] + p[t << 4 & 63] + \"==\" }; var _ = v();\r\n    f ? module.exports = _ : (i.md5 = _, o && define(function() { return _ })) }();","/* jshint laxbreak: true */\r\n/* experimental: [asyncawait, asyncreqawait] */\r\n\r\nexport function modalDialog(title, message, options) {\r\n    \"use strict\";\r\n\r\n    let messageContent = \"\";\r\n    //let ModalDialogObject = {};\r\n\r\n    if (typeof options !== \"object\") {\r\n        options = {};\r\n    }\r\n\r\n    console.log(\"window.modalDialogAlert: \", window.modalDialogAlert);\r\n    console.log(\r\n        \".ModalDialog-alert: \",\r\n        document.querySelector(\".ModalDialog-alert\")\r\n    );\r\n\r\n    //if (window.modalDialogAlert.element) delete window.modalDialogAlert;\r\n    if (document.querySelector(\"#ModalDialog-wrap\")) {\r\n        let el = document.querySelector(\"#ModalDialog-wrap\");\r\n        el.parentNode.removeChild(el);\r\n    }\r\n    if (document.querySelector(\".ModalDialog-alert\")) {\r\n        let el = document.querySelector(\".ModalDialog-alert\");\r\n        el.parentNode.removeChild(el);\r\n    }\r\n\r\n    if (window.modalDialogAlert) {\r\n        if (window.modalDialogAlert.element) delete window.modalDialogAlert;\r\n        delete window.modalDialogAlert;\r\n    }\r\n    if (!window.modalDialogAlert) {\r\n        var ModalDialogObject = {\r\n            element: null,\r\n            cancelElement: null,\r\n            confirmElement: null\r\n        };\r\n        ModalDialogObject.element = document.querySelector(\"#ModalDialog-alert\");\r\n    }\r\n\r\n    // Define default options\r\n    ModalDialogObject.type =\r\n        options.type !== undefined ? options.type : \"OkCancel\";\r\n    ModalDialogObject.width =\r\n        options.width !== undefined ? options.width : \"640px\";\r\n    ModalDialogObject.cancel =\r\n        options.cancel !== undefined ? options.cancel : false;\r\n    ModalDialogObject.cancelText =\r\n        options.cancelText !== undefined ? options.cancelText : \"Cancel\";\r\n    ModalDialogObject.confirm =\r\n        options.confirm !== undefined ? options.confirm : true;\r\n    ModalDialogObject.confirmText =\r\n        options.confirmText !== undefined ? options.confirmText : \"Confirm\";\r\n\r\n    ModalDialogObject.cancelCallBack = function(event) {\r\n        document.body.classList.remove(\"modal-dialog-open\");\r\n        window.modalDialogAlert.element.style.display = \"none\";\r\n        // Cancel callback\r\n        if (typeof options.cancelCallBack === \"function\") {\r\n            let el = document.querySelector(\"#ModalDialog-wrap\");\r\n            el.parentNode.removeChild(el);\r\n            options.cancelCallBack(event);\r\n        }\r\n\r\n        // Cancelled\r\n        return false;\r\n    };\r\n\r\n    // Close alert on click outside\r\n    /* if (document.querySelector(\".ModalDialog-mask\")) {\r\n      document\r\n        .querySelector(\".ModalDialog-mask\")\r\n        .addEventListener(\"click\", function(event) {\r\n          document.body.classList.remove(\"modal-dialog-open\");\r\n          window.modalDialogAlert.element.style.display = \"none\";\r\n          // Cancel callback\r\n          if (typeof options.cancelCallBack === \"function\") {\r\n            let el = document.querySelector(\"#ModalDialog-wrap\");\r\n            el.parentNode.removeChild(el);\r\n            options.cancelCallBack(event);\r\n          }\r\n          // Clicked outside\r\n          return false;\r\n        });\r\n    } */\r\n\r\n    ModalDialogObject.message = message;\r\n    ModalDialogObject.title = title;\r\n\r\n    ModalDialogObject.confirmCallBack = function(event) {\r\n      let el = document.querySelector(\"#ModalDialog-wrap\");\r\n\r\n        // Confirm callback\r\n        if (typeof options.confirmCallBack === \"function\") {\r\n            switch (ModalDialogObject.type) {\r\n                case \"prompt\":\r\n                    document.body.classList.remove(\"modal-dialog-open\");\r\n                    window.modalDialogAlert.element.style.display = \"none\"; \r\n                    el.parentNode.removeChild(el);\r\n                    options.confirmCallBack(event, ModalDialogObject.inputId.value.trim());\r\n                    break;\r\n                case \"changePassword\":\r\n                    console.log(ModalDialogObject.newpassword);\r\n                    document.body.classList.remove(\"modal-dialog-open\");\r\n                    window.modalDialogAlert.element.style.display = \"none\"; \r\n                    el.parentNode.removeChild(el);\r\n                    options.confirmCallBack(\r\n                        event,\r\n                        ModalDialogObject.newpassword.value.trim(),\r\n                        ModalDialogObject.newpassword2.value.trim()\r\n                    );\r\n                    break;\r\n                    case \"shareFile\":\r\n                    options.confirmCallBack(\r\n                        event,\r\n                        {\r\n                          destUserName: ModalDialogObject.destUserName.value.trim(),\r\n                          FileExpirateDate: ModalDialogObject.FileExpirateDate.value.trim(),\r\n                          delFileAfterExpired: ModalDialogObject.delFileAfterExpired.checked\r\n                        }\r\n                    );\r\n                    break;    \r\n                default:\r\n                    document.body.classList.remove(\"modal-dialog-open\");\r\n                    window.modalDialogAlert.element.style.display = \"none\"; \r\n                    el.parentNode.removeChild(el);\r\n                    options.confirmCallBack(event);\r\n\r\n            }\r\n        }\r\n\r\n        // Confirmed\r\n        return true;\r\n    };\r\n\r\n    ModalDialogObject._IfUsed = function(event) {\r\n        let el = event.target;\r\n        if (el.value.trim() !== '') {\r\n            el.classList.add('used');\r\n        } else {\r\n            el.classList.remove('used');\r\n        }\r\n    };\r\n\r\n    // Button Close Window Dialog\r\n    ModalDialogObject.ModalClose = function(event) {\r\n        let el = document.querySelector(\"#ModalDialog-wrap\");\r\n        el.parentNode.removeChild(el);\r\n        /* document.body.classList.remove(\"modal-dialog-open\");\r\n        window.modalDialogAlert.element.style.display = \"none\"; */\r\n    };\r\n\r\n\r\n    // Window Dialog content\r\n    if (!ModalDialogObject.element) {\r\n        let htmlContent = \"\";\r\n\r\n        htmlContent =\r\n            '<div class=\"ModalDialog-alert\" id=\"ModalDialog-alert\">' +\r\n            '<div class=\"ModalDialog-mask\"></div>' +\r\n            '<div class=\"ModalDialog-body\" aria-relevant=\"all\">' +\r\n            '<div class=\"ModalDialog-title\">' +\r\n            ModalDialogObject.title +\r\n            \"</div>\" +\r\n            '<a class=\"ModalDialog-close\" id=\"ModalDialogClose\" href=\"#\"></a>';\r\n\r\n        console.log(\"ModalDialogObject.type: \", ModalDialogObject.type);\r\n\r\n        // Body content\r\n\r\n        switch (ModalDialogObject.type) {\r\n            case \"prompt\":\r\n                messageContent =\r\n                    '<div class=\"ModalDialog-container\">' +\r\n                    '<div class=\"ModalDialog-content\" id=\"ModalDialog-content\">' +\r\n                    '<div class=\"ModalDialog-input-field\">' +\r\n                    '<input id=\"inputId\" class=\"ModalDialog-input\" type=\"text\">' +\r\n                    '<label for=\"inputId\" class=\"ModalDialog-label\">' +\r\n                    ModalDialogObject.message +\r\n                    '</label>' +\r\n                    '</div>' +\r\n                    '</div>' +\r\n                    '</div>';\r\n                break;\r\n            case \"changePassword\":\r\n                messageContent =\r\n                    '<div class=\"ModalDialog-container\">' +\r\n                    '<div class=\"ModalDialog-content\" id=\"ModalDialog-content\">' +\r\n                    ModalDialogObject.message +\r\n                    '</div>' +\r\n                    '</div>';\r\n                break;\r\n            case \"prompt\":\r\n                break;\r\n            case \"prompt\":\r\n                break;\r\n            default:\r\n                messageContent =\r\n                    '<div class=\"ModalDialog-container\">' +\r\n                    '<div class=\"ModalDialog-content\" id=\"ModalDialog-content\">' +\r\n                    ModalDialogObject.message +\r\n                    '</div>' +\r\n                    '</div>';\r\n        }\r\n\r\n        // Button container content \r\n        htmlContent += messageContent +\r\n            '<div class=\"ModalDialog-button\">';\r\n        if (ModalDialogObject.cancel || true) {\r\n            htmlContent +=\r\n                '<a href=\"javascript:;\" class=\"btn2-unify ModalDialog-button-cancel\"  id=\"ModalDialog-button-cancel\">' +\r\n                ModalDialogObject.cancelText +\r\n                \"</a>\";\r\n        }\r\n\r\n        if (ModalDialogObject.confirm || true) {\r\n            htmlContent +=\r\n                '<a href=\"javascript:;\" class=\"btn2-unify ModalDialog-button-confirm\" id=\"ModalDialog-button-confirm\">' +\r\n                ModalDialogObject.confirmText +\r\n                \"</a>\";\r\n        }\r\n\r\n        htmlContent += '</div></div></div>';\r\n        ModalDialogObject.html = htmlContent;\r\n\r\n\r\n        // Add content to DOM\r\n        var element = document.createElement(\"div\");\r\n        element.id = \"ModalDialog-wrap\";\r\n        element.innerHTML = htmlContent;\r\n        document.body.appendChild(element);\r\n\r\n        ModalDialogObject.modalClose = document.querySelector(\"#ModalDialogClose\");\r\n        ModalDialogObject.element = document.querySelector(\".ModalDialog-alert\");\r\n        ModalDialogObject.cancelElement = document.querySelector(\"#ModalDialog-button-cancel\");\r\n        ModalDialogObject.confirmElement = document.querySelector(\"#ModalDialog-button-confirm\");\r\n\r\n        if (ModalDialogObject.type === \"prompt\") {\r\n            ModalDialogObject.inputId = document.querySelector(\"#inputId\");\r\n            ModalDialogObject.inputId.onblur = ModalDialogObject._IfUsed;\r\n        }\r\n        if (ModalDialogObject.type === \"changePassword\") {\r\n            ModalDialogObject.newpassword = document.querySelector(\"#newpassword\");\r\n            ModalDialogObject.newpassword2 = document.querySelector(\"#newpassword2\");\r\n            ModalDialogObject.newpassword.onblur = ModalDialogObject._IfUsed;\r\n            ModalDialogObject.newpassword2.onblur = ModalDialogObject._IfUsed;\r\n        }\r\n        if (ModalDialogObject.type === \"shareFile\") {\r\n            document.querySelector(\".ModalDialog-body\").classList.add(\"shareFile\");\r\n            ModalDialogObject.destUserName = document.querySelector(\"#destUserName\");\r\n            ModalDialogObject.FileExpirateDate = document.querySelector(\"#FileExpirateDate\");\r\n            ModalDialogObject.delFileAfterExpired = document.querySelector(\"#delFileAfterExpired\");\r\n            ModalDialogObject.destUserName.onblur = ModalDialogObject._IfUsed;\r\n        }\r\n        // Enabled cancel button callback\r\n        if (ModalDialogObject.cancel) {\r\n            document.querySelector(\"#ModalDialog-button-cancel\").style.display = \"block\";\r\n        } else {\r\n            document.querySelector(\"#ModalDialog-button-cancel\").style.display = \"none\";\r\n        }\r\n\r\n        // Enabled cancel button callback\r\n        if (ModalDialogObject.confirm) {\r\n            document.querySelector(\"#ModalDialog-button-confirm\").style.display = \"block\";\r\n        } else {\r\n            document.querySelector(\"#ModalDialog-button-confirm\").style.display = \"none\";\r\n        }\r\n\r\n\r\n\r\n        ModalDialogObject.modalClose.onclick = ModalDialogObject.ModalClose;\r\n        ModalDialogObject.cancelElement.onclick = ModalDialogObject.cancelCallBack;\r\n        ModalDialogObject.confirmElement.onclick = ModalDialogObject.confirmCallBack;\r\n\r\n        window.modalDialogAlert = ModalDialogObject;\r\n    }\r\n\r\n\r\n}","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if (process.env.NODE_ENV !== 'test' &&\n        typeof window !== 'undefined' &&\n        window.XDomainRequest && !('withCredentials' in request) &&\n        !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || (request.readyState !== 4 && !xDomain)) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar defaults = require('./../defaults');\nvar utils = require('./../utils');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\nvar isBuffer = require('is-buffer');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n","\"use strict\";\n\nrequire(\"core-js/shim\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/fn/regexp/escape\");\n\nif (global._babelPolyfill) {\n  throw new Error(\"only one instance of babel-polyfill is allowed\");\n}\nglobal._babelPolyfill = true;\n\nvar DEFINE_PROPERTY = \"defineProperty\";\nfunction define(O, key, value) {\n  O[key] || Object[DEFINE_PROPERTY](O, key, {\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\ndefine(String.prototype, \"padLeft\", \"\".padStart);\ndefine(String.prototype, \"padRight\", \"\".padEnd);\n\n\"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill\".split(\",\").forEach(function (key) {\n  [][key] && define(Array, key, Function.call.bind([][key]));\n});","require('../../modules/core.regexp.escape');\nmodule.exports = require('../../modules/_core').RegExp.escape;\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","var cof = require('./_cof');\nmodule.exports = function (it, msg) {\n  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n  return +it;\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","var forOf = require('./_for-of');\n\nmodule.exports = function (iter, ITERATOR) {\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","var aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar toLength = require('./_to-length');\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require('./_classof');\nvar from = require('./_array-from-iterable');\nmodule.exports = function (NAME) {\n  return function toJSON() {\n    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};\n","'use strict';\nvar redefineAll = require('./_redefine-all');\nvar getWeak = require('./_meta').getWeak;\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar createArrayMethod = require('./_array-methods');\nvar $has = require('./_has');\nvar validate = require('./_validate-collection');\nvar arrayFind = createArrayMethod(5);\nvar arrayFindIndex = createArrayMethod(6);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (that) {\n  return that._l || (that._l = new UncaughtFrozenStore());\n};\nvar UncaughtFrozenStore = function () {\n  this.a = [];\n};\nvar findUncaughtFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;      // collection type\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var data = getWeak(anObject(key), true);\n    if (data === true) uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar redefineAll = require('./_redefine-all');\nvar meta = require('./_meta');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar $iterDetect = require('./_iter-detect');\nvar setToStringTag = require('./_set-to-string-tag');\nvar inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","var core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar fails = require('./_fails');\nvar getTime = Date.prototype.getTime;\nvar $toISOString = Date.prototype.toISOString;\n\nvar lz = function (num) {\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\nmodule.exports = (fails(function () {\n  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  $toISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var d = this;\n  var y = d.getUTCFullYear();\n  var m = d.getUTCMilliseconds();\n  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n} : $toISOString;\n","'use strict';\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\nvar NUMBER = 'number';\n\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n  return toPrimitive(anObject(this), hint != NUMBER);\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","'use strict';\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar isArray = require('./_is-array');\nvar isObject = require('./_is-object');\nvar toLength = require('./_to-length');\nvar ctx = require('./_ctx');\nvar IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');\n\nfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n  var element, spreadable;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      spreadable = false;\n      if (isObject(element)) {\n        spreadable = element[IS_CONCAT_SPREADABLE];\n        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n      }\n\n      if (spreadable && depth > 0) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n}\n\nmodule.exports = flattenIntoArray;\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = false;\n","// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n","// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n","// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n","// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  if (\n    arguments.length === 0\n      // eslint-disable-next-line no-self-compare\n      || x != x\n      // eslint-disable-next-line no-self-compare\n      || inLow != inLow\n      // eslint-disable-next-line no-self-compare\n      || inHigh != inHigh\n      // eslint-disable-next-line no-self-compare\n      || outLow != outLow\n      // eslint-disable-next-line no-self-compare\n      || outHigh != outHigh\n  ) return NaN;\n  if (x === Infinity || x === -Infinity) return x;\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n};\n","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var Map = require('./es6.map');\nvar $export = require('./_export');\nvar shared = require('./_shared')('metadata');\nvar store = shared.store || (shared.store = new (require('./es6.weak-map'))());\n\nvar getOrCreateMetadataMap = function (target, targetKey, create) {\n  var targetMetadata = store.get(target);\n  if (!targetMetadata) {\n    if (!create) return undefined;\n    store.set(target, targetMetadata = new Map());\n  }\n  var keyMetadata = targetMetadata.get(targetKey);\n  if (!keyMetadata) {\n    if (!create) return undefined;\n    targetMetadata.set(targetKey, keyMetadata = new Map());\n  } return keyMetadata;\n};\nvar ordinaryHasOwnMetadata = function (MetadataKey, O, P) {\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n};\nvar ordinaryGetOwnMetadata = function (MetadataKey, O, P) {\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n};\nvar ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {\n  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n};\nvar ordinaryOwnMetadataKeys = function (target, targetKey) {\n  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);\n  var keys = [];\n  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });\n  return keys;\n};\nvar toMetaKey = function (it) {\n  return it === undefined || typeof it == 'symbol' ? it : String(it);\n};\nvar exp = function (O) {\n  $export($export.S, 'Reflect', O);\n};\n\nmodule.exports = {\n  store: store,\n  map: getOrCreateMetadataMap,\n  has: ordinaryHasOwnMetadata,\n  get: ordinaryGetOwnMetadata,\n  set: ordinaryDefineOwnMetadata,\n  keys: ordinaryOwnMetadataKeys,\n  key: toMetaKey,\n  exp: exp\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","'use strict';\n// Forced replacement prototype accessors methods\nmodule.exports = require('./_library') || !require('./_fails')(function () {\n  var K = Math.random();\n  // In FF throws only define methods\n  // eslint-disable-next-line no-undef, no-useless-call\n  __defineSetter__.call(null, K, function () { /* empty */ });\n  delete require('./_global')[K];\n});\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","var getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n","// all object keys, includes non-enumerable and symbols\nvar gOPN = require('./_object-gopn');\nvar gOPS = require('./_object-gops');\nvar anObject = require('./_an-object');\nvar Reflect = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n","var $parseInt = require('./_global').parseInt;\nvar $trim = require('./_string-trim').trim;\nvar ws = require('./_string-ws');\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","module.exports = function (regExp, replace) {\n  var replacer = replace === Object(replace) ? function (part) {\n    return replace[part];\n  } : replace;\n  return function (it) {\n    return String(it).replace(regExp, replacer);\n  };\n};\n","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar ctx = require('./_ctx');\nvar forOf = require('./_for-of');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = ctx(mapFn, arguments[2], 2);\n      forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n};\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { of: function of() {\n    var length = arguments.length;\n    var A = new Array(length);\n    while (length--) A[length] = arguments[length];\n    return new this(A);\n  } });\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","// https://github.com/benjamingr/RexExp.escape\nvar $export = require('./_export');\nvar $re = require('./_replacer')(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });\n\nrequire('./_add-to-unscopables')('copyWithin');\n","'use strict';\nvar $export = require('./_export');\nvar $every = require('./_array-methods')(4);\n\n$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments[1]);\n  }\n});\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","'use strict';\nvar $export = require('./_export');\nvar $filter = require('./_array-methods')(2);\n\n$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\nvar $export = require('./_export');\nvar $forEach = require('./_array-methods')(0);\nvar STRICT = require('./_strict-method')([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $indexOf = require('./_array-includes')(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {\n  join: function join(separator) {\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $map = require('./_array-methods')(1);\n\n$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar html = require('./_html');\nvar cof = require('./_cof');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * require('./_fails')(function () {\n  if (html) arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end) {\n    var len = toLength(this.length);\n    var klass = cof(this);\n    end = end === undefined ? len : end;\n    if (klass == 'Array') return arraySlice.call(this, begin, end);\n    var start = toAbsoluteIndex(begin, len);\n    var upTo = toAbsoluteIndex(end, len);\n    var size = toLength(upTo - start);\n    var cloned = new Array(size);\n    var i = 0;\n    for (; i < size; i++) cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $some = require('./_array-methods')(3);\n\n$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","require('./_set-species')('Array');\n","// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = require('./_export');\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n","// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar $export = require('./_export');\nvar toISOString = require('./_date-to-iso-string');\n\n// PhantomJS / old WebKit has a broken implementations\n$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n  toISOString: toISOString\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n","var TO_PRIMITIVE = require('./_wks')('toPrimitive');\nvar proto = Date.prototype;\n\nif (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));\n","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = require('./_export');\n\n$export($export.P, 'Function', { bind: require('./_bind') });\n","'use strict';\nvar isObject = require('./_is-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar HAS_INSTANCE = require('./_wks')('hasInstance');\nvar FunctionProto = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n  if (typeof this != 'function' || !isObject(O)) return false;\n  if (!isObject(this.prototype)) return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n  return false;\n} });\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n","// 20.2.2.3 Math.acosh(x)\nvar $export = require('./_export');\nvar log1p = require('./_math-log1p');\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n","// 20.2.2.5 Math.asinh(x)\nvar $export = require('./_export');\nvar $asinh = Math.asinh;\n\nfunction asinh(x) {\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0\n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n","// 20.2.2.7 Math.atanh(x)\nvar $export = require('./_export');\nvar $atanh = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0\n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x) {\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n","// 20.2.2.9 Math.cbrt(x)\nvar $export = require('./_export');\nvar sign = require('./_math-sign');\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x) {\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n","// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n","// 20.2.2.12 Math.cosh(x)\nvar $export = require('./_export');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n","// 20.2.2.14 Math.expm1(x)\nvar $export = require('./_export');\nvar $expm1 = require('./_math-expm1');\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n","// 20.2.2.16 Math.fround(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { fround: require('./_math-fround') });\n","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export');\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n","// 20.2.2.21 Math.log10(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n","// 20.2.2.20 Math.log1p(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { log1p: require('./_math-log1p') });\n","// 20.2.2.22 Math.log2(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log2: function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n});\n","// 20.2.2.28 Math.sign(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { sign: require('./_math-sign') });\n","// 20.2.2.30 Math.sinh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require('./_fails')(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n","// 20.2.2.33 Math.tanh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x) {\n    var a = expm1(x = +x);\n    var b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n","// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n","// 20.1.2.2 Number.isFinite(number)\nvar $export = require('./_export');\nvar _isFinite = require('./_global').isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it) {\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","// 20.1.2.5 Number.isSafeInteger(number)\nvar $export = require('./_export');\nvar isInteger = require('./_is-integer');\nvar abs = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number) {\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n","// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n","// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n","'use strict';\nvar $export = require('./_export');\nvar toInteger = require('./_to-integer');\nvar aNumberValue = require('./_a-number-value');\nvar repeat = require('./_string-repeat');\nvar $toFixed = 1.0.toFixed;\nvar floor = Math.floor;\nvar data = [0, 0, 0, 0, 0, 0];\nvar ERROR = 'Number.toFixed: incorrect invocation!';\nvar ZERO = '0';\n\nvar multiply = function (n, c) {\n  var i = -1;\n  var c2 = c;\n  while (++i < 6) {\n    c2 += n * data[i];\n    data[i] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\nvar divide = function (n) {\n  var i = 6;\n  var c = 0;\n  while (--i >= 0) {\n    c += data[i];\n    data[i] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\nvar numToString = function () {\n  var i = 6;\n  var s = '';\n  while (--i >= 0) {\n    if (s !== '' || i === 0 || data[i] !== 0) {\n      var t = String(data[i]);\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n    }\n  } return s;\n};\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\n$export($export.P + $export.F * (!!$toFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !require('./_fails')(function () {\n  // V8 ~ Android 4.3-\n  $toFixed.call({});\n})), 'Number', {\n  toFixed: function toFixed(fractionDigits) {\n    var x = aNumberValue(this, ERROR);\n    var f = toInteger(fractionDigits);\n    var s = '';\n    var m = ZERO;\n    var e, z, j, k;\n    if (f < 0 || f > 20) throw RangeError(ERROR);\n    // eslint-disable-next-line no-self-compare\n    if (x != x) return 'NaN';\n    if (x <= -1e21 || x >= 1e21) return String(x);\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n    if (x > 1e-21) {\n      e = log(x * pow(2, 69, 1)) - 69;\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = f;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        m = numToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        m = numToString() + repeat.call(ZERO, f);\n      }\n    }\n    if (f > 0) {\n      k = m.length;\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n    } else {\n      m = s + m;\n    } return m;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $fails = require('./_fails');\nvar aNumberValue = require('./_a-number-value');\nvar $toPrecision = 1.0.toPrecision;\n\n$export($export.P + $export.F * ($fails(function () {\n  // IE7-\n  return $toPrecision.call(1, undefined) !== '1';\n}) || !$fails(function () {\n  // V8 ~ Android 4.3-\n  $toPrecision.call({});\n})), 'Number', {\n  toPrecision: function toPrecision(precision) {\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n  }\n});\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function () {\n  return require('./_object-gopn-ext').f;\n});\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', { is: require('./_same-value') });\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n","// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar rApply = (require('./_global').Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !require('./_fails')(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP = require('./_object-dp');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * require('./_fails')(function () {\n  // eslint-disable-next-line no-undef\n  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes) {\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export = require('./_export');\nvar gOPD = require('./_object-gopd').f;\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey) {\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n","'use strict';\n// 26.1.5 Reflect.enumerate(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar Enumerate = function (iterated) {\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = [];      // keys\n  var key;\n  for (key in iterated) keys.push(key);\n};\nrequire('./_iter-create')(Enumerate, 'Object', function () {\n  var that = this;\n  var keys = that._k;\n  var key;\n  do {\n    if (that._i >= keys.length) return { value: undefined, done: true };\n  } while (!((key = keys[that._i++]) in that._t));\n  return { value: key, done: false };\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target) {\n    return new Enumerate(target);\n  }\n});\n","// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD = require('./_object-gopd');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n","// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export = require('./_export');\nvar getProto = require('./_object-gpo');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target) {\n    return getProto(anObject(target));\n  }\n});\n","// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\n\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var desc, proto;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', { get: get });\n","// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey) {\n    return propertyKey in target;\n  }\n});\n","// 26.1.10 Reflect.isExtensible(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target) {\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n","// 26.1.11 Reflect.ownKeys(target)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });\n","// 26.1.12 Reflect.preventExtensions(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target) {\n    anObject(target);\n    try {\n      if ($preventExtensions) $preventExtensions(target);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export = require('./_export');\nvar setProto = require('./_set-proto');\n\nif (setProto) $export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto) {\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP = require('./_object-dp');\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar createDesc = require('./_property-desc');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\n\nfunction set(target, propertyKey, V /* , receiver */) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDesc = gOPD.f(anObject(target), propertyKey);\n  var existingDescriptor, proto;\n  if (!ownDesc) {\n    if (isObject(proto = getPrototypeOf(target))) {\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if (has(ownDesc, 'value')) {\n    if (ownDesc.writable === false || !isObject(receiver)) return false;\n    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {\n      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n      existingDescriptor.value = V;\n      dP.f(receiver, propertyKey, existingDescriptor);\n    } else dP.f(receiver, propertyKey, createDesc(0, V));\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', { set: set });\n","var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n","// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n","// @@search logic\nrequire('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {\n  // 21.1.3.15 String.prototype.search(regexp)\n  return [function search(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[SEARCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n  }, $search];\n});\n","// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {\n  'use strict';\n  var isRegExp = require('./_is-regexp');\n  var _split = $split;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX = 'lastIndex';\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while (match = separatorCopy.exec(string)) {\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          // eslint-disable-next-line no-loop-func\n          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {\n            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;\n          });\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    $split = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit) {\n    var O = defined(this);\n    var fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n","'use strict';\n// B.2.3.4 String.prototype.blink()\nrequire('./_string-html')('blink', function (createHTML) {\n  return function blink() {\n    return createHTML(this, 'blink', '', '');\n  };\n});\n","'use strict';\n// B.2.3.5 String.prototype.bold()\nrequire('./_string-html')('bold', function (createHTML) {\n  return function bold() {\n    return createHTML(this, 'b', '', '');\n  };\n});\n","'use strict';\nvar $export = require('./_export');\nvar $at = require('./_string-at')(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos) {\n    return $at(this, pos);\n  }\n});\n","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","'use strict';\n// B.2.3.7 String.prototype.fontcolor(color)\nrequire('./_string-html')('fontcolor', function (createHTML) {\n  return function fontcolor(color) {\n    return createHTML(this, 'font', 'color', color);\n  };\n});\n","'use strict';\n// B.2.3.8 String.prototype.fontsize(size)\nrequire('./_string-html')('fontsize', function (createHTML) {\n  return function fontsize(size) {\n    return createHTML(this, 'font', 'size', size);\n  };\n});\n","var $export = require('./_export');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export = require('./_export');\nvar context = require('./_string-context');\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\n// B.2.3.9 String.prototype.italics()\nrequire('./_string-html')('italics', function (createHTML) {\n  return function italics() {\n    return createHTML(this, 'i', '', '');\n  };\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n","var $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\n// B.2.3.12 String.prototype.strike()\nrequire('./_string-html')('strike', function (createHTML) {\n  return function strike() {\n    return createHTML(this, 'strike', '', '');\n  };\n});\n","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n","'use strict';\n// B.2.3.14 String.prototype.sup()\nrequire('./_string-html')('sup', function (createHTML) {\n  return function sup() {\n    return createHTML(this, 'sup', '', '');\n  };\n});\n","'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire('./_string-trim')('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","'use strict';\nvar $export = require('./_export');\nvar $typed = require('./_typed');\nvar buffer = require('./_typed-buffer');\nvar anObject = require('./_an-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar isObject = require('./_is-object');\nvar ArrayBuffer = require('./_global').ArrayBuffer;\nvar speciesConstructor = require('./_species-constructor');\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * require('./_fails')(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n    while (first < fin) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\nrequire('./_set-species')(ARRAY_BUFFER);\n","var $export = require('./_export');\n$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {\n  DataView: require('./_typed-buffer').DataView\n});\n","require('./_typed-array')('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n","'use strict';\nvar each = require('./_array-methods')(0);\nvar redefine = require('./_redefine');\nvar meta = require('./_meta');\nvar assign = require('./_object-assign');\nvar weak = require('./_collection-weak');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar validate = require('./_validate-collection');\nvar WEAK_MAP = 'WeakMap';\nvar getWeak = meta.getWeak;\nvar isExtensible = Object.isExtensible;\nvar uncaughtFrozenStore = weak.ufstore;\nvar tmp = {};\nvar InternalMap;\n\nvar wrapper = function (get) {\n  return function WeakMap() {\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key) {\n    if (isObject(key)) {\n      var data = getWeak(key);\n      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value) {\n    return weak.def(validate(this, WEAK_MAP), key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {\n  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function (key) {\n    var proto = $WeakMap.prototype;\n    var method = proto[key];\n    redefine(proto, key, function (a, b) {\n      // store frozen objects on internal weakmap shim\n      if (isObject(a) && !isExtensible(a)) {\n        if (!this._f) this._f = new InternalMap();\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n","'use strict';\nvar weak = require('./_collection-weak');\nvar validate = require('./_validate-collection');\nvar WEAK_SET = 'WeakSet';\n\n// 23.4 WeakSet Objects\nrequire('./_collection')(WEAK_SET, function (get) {\n  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value) {\n    return weak.def(validate(this, WEAK_SET), value, true);\n  }\n}, weak, false, true);\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\nvar $export = require('./_export');\nvar flattenIntoArray = require('./_flatten-into-array');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar aFunction = require('./_a-function');\nvar arraySpeciesCreate = require('./_array-species-create');\n\n$export($export.P, 'Array', {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen, A;\n    aFunction(callbackfn);\n    sourceLen = toLength(O.length);\n    A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n    return A;\n  }\n});\n\nrequire('./_add-to-unscopables')('flatMap');\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten\nvar $export = require('./_export');\nvar flattenIntoArray = require('./_flatten-into-array');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar arraySpeciesCreate = require('./_array-species-create');\n\n$export($export.P, 'Array', {\n  flatten: function flatten(/* depthArg = 1 */) {\n    var depthArg = arguments[0];\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n\nrequire('./_add-to-unscopables')('flatten');\n","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n","// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\nvar $export = require('./_export');\nvar microtask = require('./_microtask')();\nvar process = require('./_global').process;\nvar isNode = require('./_cof')(process) == 'process';\n\n$export($export.G, {\n  asap: function asap(fn) {\n    var domain = isNode && process.domain;\n    microtask(domain ? domain.bind(fn) : fn);\n  }\n});\n","// https://github.com/ljharb/proposal-is-error\nvar $export = require('./_export');\nvar cof = require('./_cof');\n\n$export($export.S, 'Error', {\n  isError: function isError(it) {\n    return cof(it) === 'Error';\n  }\n});\n","// https://github.com/tc39/proposal-global\nvar $export = require('./_export');\n\n$export($export.G, { global: require('./_global') });\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\nrequire('./_set-collection-from')('Map');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\nrequire('./_set-collection-of')('Map');\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clamp: function clamp(x, lower, upper) {\n    return Math.min(upper, Math.max(lower, x));\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar RAD_PER_DEG = 180 / Math.PI;\n\n$export($export.S, 'Math', {\n  degrees: function degrees(radians) {\n    return radians * RAD_PER_DEG;\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar scale = require('./_math-scale');\nvar fround = require('./_math-fround');\n\n$export($export.S, 'Math', {\n  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {\n    return fround(scale(x, inLow, inHigh, outLow, outHigh));\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  iaddh: function iaddh(x0, x1, y0, y1) {\n    var $x0 = x0 >>> 0;\n    var $x1 = x1 >>> 0;\n    var $y0 = y0 >>> 0;\n    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  imulh: function imulh(u, v) {\n    var UINT16 = 0xffff;\n    var $u = +u;\n    var $v = +v;\n    var u0 = $u & UINT16;\n    var v0 = $v & UINT16;\n    var u1 = $u >> 16;\n    var v1 = $v >> 16;\n    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  isubh: function isubh(x0, x1, y0, y1) {\n    var $x0 = x0 >>> 0;\n    var $x1 = x1 >>> 0;\n    var $y0 = y0 >>> 0;\n    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar DEG_PER_RAD = Math.PI / 180;\n\n$export($export.S, 'Math', {\n  radians: function radians(degrees) {\n    return degrees * DEG_PER_RAD;\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { scale: require('./_math-scale') });\n","// http://jfbastien.github.io/papers/Math.signbit.html\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { signbit: function signbit(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;\n} });\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  umulh: function umulh(u, v) {\n    var UINT16 = 0xffff;\n    var $u = +u;\n    var $v = +v;\n    var u0 = $u & UINT16;\n    var v0 = $v & UINT16;\n    var u1 = $u >>> 16;\n    var v1 = $v >>> 16;\n    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar aFunction = require('./_a-function');\nvar $defineProperty = require('./_object-dp');\n\n// B.2.2.2 Object.prototype.__defineGetter__(P, getter)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __defineGetter__: function __defineGetter__(P, getter) {\n    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar aFunction = require('./_a-function');\nvar $defineProperty = require('./_object-dp');\n\n// B.2.2.3 Object.prototype.__defineSetter__(P, setter)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __defineSetter__: function __defineSetter__(P, setter) {\n    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });\n  }\n});\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = require('./_export');\nvar ownKeys = require('./_own-keys');\nvar toIObject = require('./_to-iobject');\nvar gOPD = require('./_object-gopd');\nvar createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\nvar getPrototypeOf = require('./_object-gpo');\nvar getOwnPropertyDescriptor = require('./_object-gopd').f;\n\n// B.2.2.4 Object.prototype.__lookupGetter__(P)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __lookupGetter__: function __lookupGetter__(P) {\n    var O = toObject(this);\n    var K = toPrimitive(P, true);\n    var D;\n    do {\n      if (D = getOwnPropertyDescriptor(O, K)) return D.get;\n    } while (O = getPrototypeOf(O));\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\nvar getPrototypeOf = require('./_object-gpo');\nvar getOwnPropertyDescriptor = require('./_object-gopd').f;\n\n// B.2.2.5 Object.prototype.__lookupSetter__(P)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __lookupSetter__: function __lookupSetter__(P) {\n    var O = toObject(this);\n    var K = toPrimitive(P, true);\n    var D;\n    do {\n      if (D = getOwnPropertyDescriptor(O, K)) return D.set;\n    } while (O = getPrototypeOf(O));\n  }\n});\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","'use strict';\n// https://github.com/zenparsing/es-observable\nvar $export = require('./_export');\nvar global = require('./_global');\nvar core = require('./_core');\nvar microtask = require('./_microtask')();\nvar OBSERVABLE = require('./_wks')('observable');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar anInstance = require('./_an-instance');\nvar redefineAll = require('./_redefine-all');\nvar hide = require('./_hide');\nvar forOf = require('./_for-of');\nvar RETURN = forOf.RETURN;\n\nvar getMethod = function (fn) {\n  return fn == null ? undefined : aFunction(fn);\n};\n\nvar cleanupSubscription = function (subscription) {\n  var cleanup = subscription._c;\n  if (cleanup) {\n    subscription._c = undefined;\n    cleanup();\n  }\n};\n\nvar subscriptionClosed = function (subscription) {\n  return subscription._o === undefined;\n};\n\nvar closeSubscription = function (subscription) {\n  if (!subscriptionClosed(subscription)) {\n    subscription._o = undefined;\n    cleanupSubscription(subscription);\n  }\n};\n\nvar Subscription = function (observer, subscriber) {\n  anObject(observer);\n  this._c = undefined;\n  this._o = observer;\n  observer = new SubscriptionObserver(this);\n  try {\n    var cleanup = subscriber(observer);\n    var subscription = cleanup;\n    if (cleanup != null) {\n      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };\n      else aFunction(cleanup);\n      this._c = cleanup;\n    }\n  } catch (e) {\n    observer.error(e);\n    return;\n  } if (subscriptionClosed(this)) cleanupSubscription(this);\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() { closeSubscription(this); }\n});\n\nvar SubscriptionObserver = function (subscription) {\n  this._s = subscription;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscription = this._s;\n    if (!subscriptionClosed(subscription)) {\n      var observer = subscription._o;\n      try {\n        var m = getMethod(observer.next);\n        if (m) return m.call(observer, value);\n      } catch (e) {\n        try {\n          closeSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      }\n    }\n  },\n  error: function error(value) {\n    var subscription = this._s;\n    if (subscriptionClosed(subscription)) throw value;\n    var observer = subscription._o;\n    subscription._o = undefined;\n    try {\n      var m = getMethod(observer.error);\n      if (!m) throw value;\n      value = m.call(observer, value);\n    } catch (e) {\n      try {\n        cleanupSubscription(subscription);\n      } finally {\n        throw e;\n      }\n    } cleanupSubscription(subscription);\n    return value;\n  },\n  complete: function complete(value) {\n    var subscription = this._s;\n    if (!subscriptionClosed(subscription)) {\n      var observer = subscription._o;\n      subscription._o = undefined;\n      try {\n        var m = getMethod(observer.complete);\n        value = m ? m.call(observer, value) : undefined;\n      } catch (e) {\n        try {\n          cleanupSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      } cleanupSubscription(subscription);\n      return value;\n    }\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);\n};\n\nredefineAll($Observable.prototype, {\n  subscribe: function subscribe(observer) {\n    return new Subscription(observer, this._f);\n  },\n  forEach: function forEach(fn) {\n    var that = this;\n    return new (core.Promise || global.Promise)(function (resolve, reject) {\n      aFunction(fn);\n      var subscription = that.subscribe({\n        next: function (value) {\n          try {\n            return fn(value);\n          } catch (e) {\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  }\n});\n\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = typeof this === 'function' ? this : $Observable;\n    var method = getMethod(anObject(x)[OBSERVABLE]);\n    if (method) {\n      var observable = anObject(method.call(x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n    return new C(function (observer) {\n      var done = false;\n      microtask(function () {\n        if (!done) {\n          try {\n            if (forOf(x, false, function (it) {\n              observer.next(it);\n              if (done) return RETURN;\n            }) === RETURN) return;\n          } catch (e) {\n            if (done) throw e;\n            observer.error(e);\n            return;\n          } observer.complete();\n        }\n      });\n      return function () { done = true; };\n    });\n  },\n  of: function of() {\n    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];\n    return new (typeof this === 'function' ? this : $Observable)(function (observer) {\n      var done = false;\n      microtask(function () {\n        if (!done) {\n          for (var j = 0; j < items.length; ++j) {\n            observer.next(items[j]);\n            if (done) return;\n          } observer.complete();\n        }\n      });\n      return function () { done = true; };\n    });\n  }\n});\n\nhide($Observable.prototype, OBSERVABLE, function () { return this; });\n\n$export($export.G, { Observable: $Observable });\n\nrequire('./_set-species')('Observable');\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar toMetaKey = metadata.key;\nvar ordinaryDefineOwnMetadata = metadata.set;\n\nmetadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {\n  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar toMetaKey = metadata.key;\nvar getOrCreateMetadataMap = metadata.map;\nvar store = metadata.store;\n\nmetadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {\n  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);\n  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);\n  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;\n  if (metadataMap.size) return true;\n  var targetMetadata = store.get(target);\n  targetMetadata['delete'](targetKey);\n  return !!targetMetadata.size || store['delete'](target);\n} });\n","var Set = require('./es6.set');\nvar from = require('./_array-from-iterable');\nvar metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryOwnMetadataKeys = metadata.keys;\nvar toMetaKey = metadata.key;\n\nvar ordinaryMetadataKeys = function (O, P) {\n  var oKeys = ordinaryOwnMetadataKeys(O, P);\n  var parent = getPrototypeOf(O);\n  if (parent === null) return oKeys;\n  var pKeys = ordinaryMetadataKeys(parent, P);\n  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n};\n\nmetadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {\n  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar ordinaryGetOwnMetadata = metadata.get;\nvar toMetaKey = metadata.key;\n\nvar ordinaryGetMetadata = function (MetadataKey, O, P) {\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n};\n\nmetadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryOwnMetadataKeys = metadata.keys;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {\n  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryGetOwnMetadata = metadata.get;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryGetOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar toMetaKey = metadata.key;\n\nvar ordinaryHasMetadata = function (MetadataKey, O, P) {\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if (hasOwn) return true;\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n};\n\nmetadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryHasOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var $metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar toMetaKey = $metadata.key;\nvar ordinaryDefineOwnMetadata = $metadata.set;\n\n$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {\n  return function decorator(target, targetKey) {\n    ordinaryDefineOwnMetadata(\n      metadataKey, metadataValue,\n      (targetKey !== undefined ? anObject : aFunction)(target),\n      toMetaKey(targetKey)\n    );\n  };\n} });\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\nrequire('./_set-collection-from')('Set');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\nrequire('./_set-collection-of')('Set');\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });\n","'use strict';\n// https://github.com/mathiasbynens/String.prototype.at\nvar $export = require('./_export');\nvar $at = require('./_string-at')(true);\n\n$export($export.P, 'String', {\n  at: function at(pos) {\n    return $at(this, pos);\n  }\n});\n","'use strict';\n// https://tc39.github.io/String.prototype.matchAll/\nvar $export = require('./_export');\nvar defined = require('./_defined');\nvar toLength = require('./_to-length');\nvar isRegExp = require('./_is-regexp');\nvar getFlags = require('./_flags');\nvar RegExpProto = RegExp.prototype;\n\nvar $RegExpStringIterator = function (regexp, string) {\n  this._r = regexp;\n  this._s = string;\n};\n\nrequire('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {\n  var match = this._r.exec(this._s);\n  return { value: match, done: match === null };\n});\n\n$export($export.P, 'String', {\n  matchAll: function matchAll(regexp) {\n    defined(this);\n    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');\n    var S = String(this);\n    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);\n    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n    rx.lastIndex = toLength(regexp.lastIndex);\n    return new $RegExpStringIterator(rx, S);\n  }\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\n$export($export.P + $export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(userAgent), 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\n$export($export.P + $export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(userAgent), 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimLeft', function ($trim) {\n  return function trimLeft() {\n    return $trim(this, 1);\n  };\n}, 'trimStart');\n","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimRight', function ($trim) {\n  return function trimRight() {\n    return $trim(this, 2);\n  };\n}, 'trimEnd');\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","// https://github.com/tc39/proposal-global\nvar $export = require('./_export');\n\n$export($export.S, 'System', { global: require('./_global') });\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from\nrequire('./_set-collection-from')('WeakMap');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of\nrequire('./_set-collection-of')('WeakMap');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from\nrequire('./_set-collection-from')('WeakSet');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of\nrequire('./_set-collection-of')('WeakSet');\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","var $export = require('./_export');\nvar $task = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n","// ie9- setTimeout & setInterval additional parameters fix\nvar global = require('./_global');\nvar $export = require('./_export');\nvar userAgent = require('./_user-agent');\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\nvar wrap = function (set) {\n  return function (fn, time /* , ...args */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : false;\n    return set(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n    } : fn, time);\n  };\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout: wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n","require('./modules/es6.symbol');\nrequire('./modules/es6.object.create');\nrequire('./modules/es6.object.define-property');\nrequire('./modules/es6.object.define-properties');\nrequire('./modules/es6.object.get-own-property-descriptor');\nrequire('./modules/es6.object.get-prototype-of');\nrequire('./modules/es6.object.keys');\nrequire('./modules/es6.object.get-own-property-names');\nrequire('./modules/es6.object.freeze');\nrequire('./modules/es6.object.seal');\nrequire('./modules/es6.object.prevent-extensions');\nrequire('./modules/es6.object.is-frozen');\nrequire('./modules/es6.object.is-sealed');\nrequire('./modules/es6.object.is-extensible');\nrequire('./modules/es6.object.assign');\nrequire('./modules/es6.object.is');\nrequire('./modules/es6.object.set-prototype-of');\nrequire('./modules/es6.object.to-string');\nrequire('./modules/es6.function.bind');\nrequire('./modules/es6.function.name');\nrequire('./modules/es6.function.has-instance');\nrequire('./modules/es6.parse-int');\nrequire('./modules/es6.parse-float');\nrequire('./modules/es6.number.constructor');\nrequire('./modules/es6.number.to-fixed');\nrequire('./modules/es6.number.to-precision');\nrequire('./modules/es6.number.epsilon');\nrequire('./modules/es6.number.is-finite');\nrequire('./modules/es6.number.is-integer');\nrequire('./modules/es6.number.is-nan');\nrequire('./modules/es6.number.is-safe-integer');\nrequire('./modules/es6.number.max-safe-integer');\nrequire('./modules/es6.number.min-safe-integer');\nrequire('./modules/es6.number.parse-float');\nrequire('./modules/es6.number.parse-int');\nrequire('./modules/es6.math.acosh');\nrequire('./modules/es6.math.asinh');\nrequire('./modules/es6.math.atanh');\nrequire('./modules/es6.math.cbrt');\nrequire('./modules/es6.math.clz32');\nrequire('./modules/es6.math.cosh');\nrequire('./modules/es6.math.expm1');\nrequire('./modules/es6.math.fround');\nrequire('./modules/es6.math.hypot');\nrequire('./modules/es6.math.imul');\nrequire('./modules/es6.math.log10');\nrequire('./modules/es6.math.log1p');\nrequire('./modules/es6.math.log2');\nrequire('./modules/es6.math.sign');\nrequire('./modules/es6.math.sinh');\nrequire('./modules/es6.math.tanh');\nrequire('./modules/es6.math.trunc');\nrequire('./modules/es6.string.from-code-point');\nrequire('./modules/es6.string.raw');\nrequire('./modules/es6.string.trim');\nrequire('./modules/es6.string.iterator');\nrequire('./modules/es6.string.code-point-at');\nrequire('./modules/es6.string.ends-with');\nrequire('./modules/es6.string.includes');\nrequire('./modules/es6.string.repeat');\nrequire('./modules/es6.string.starts-with');\nrequire('./modules/es6.string.anchor');\nrequire('./modules/es6.string.big');\nrequire('./modules/es6.string.blink');\nrequire('./modules/es6.string.bold');\nrequire('./modules/es6.string.fixed');\nrequire('./modules/es6.string.fontcolor');\nrequire('./modules/es6.string.fontsize');\nrequire('./modules/es6.string.italics');\nrequire('./modules/es6.string.link');\nrequire('./modules/es6.string.small');\nrequire('./modules/es6.string.strike');\nrequire('./modules/es6.string.sub');\nrequire('./modules/es6.string.sup');\nrequire('./modules/es6.date.now');\nrequire('./modules/es6.date.to-json');\nrequire('./modules/es6.date.to-iso-string');\nrequire('./modules/es6.date.to-string');\nrequire('./modules/es6.date.to-primitive');\nrequire('./modules/es6.array.is-array');\nrequire('./modules/es6.array.from');\nrequire('./modules/es6.array.of');\nrequire('./modules/es6.array.join');\nrequire('./modules/es6.array.slice');\nrequire('./modules/es6.array.sort');\nrequire('./modules/es6.array.for-each');\nrequire('./modules/es6.array.map');\nrequire('./modules/es6.array.filter');\nrequire('./modules/es6.array.some');\nrequire('./modules/es6.array.every');\nrequire('./modules/es6.array.reduce');\nrequire('./modules/es6.array.reduce-right');\nrequire('./modules/es6.array.index-of');\nrequire('./modules/es6.array.last-index-of');\nrequire('./modules/es6.array.copy-within');\nrequire('./modules/es6.array.fill');\nrequire('./modules/es6.array.find');\nrequire('./modules/es6.array.find-index');\nrequire('./modules/es6.array.species');\nrequire('./modules/es6.array.iterator');\nrequire('./modules/es6.regexp.constructor');\nrequire('./modules/es6.regexp.to-string');\nrequire('./modules/es6.regexp.flags');\nrequire('./modules/es6.regexp.match');\nrequire('./modules/es6.regexp.replace');\nrequire('./modules/es6.regexp.search');\nrequire('./modules/es6.regexp.split');\nrequire('./modules/es6.promise');\nrequire('./modules/es6.map');\nrequire('./modules/es6.set');\nrequire('./modules/es6.weak-map');\nrequire('./modules/es6.weak-set');\nrequire('./modules/es6.typed.array-buffer');\nrequire('./modules/es6.typed.data-view');\nrequire('./modules/es6.typed.int8-array');\nrequire('./modules/es6.typed.uint8-array');\nrequire('./modules/es6.typed.uint8-clamped-array');\nrequire('./modules/es6.typed.int16-array');\nrequire('./modules/es6.typed.uint16-array');\nrequire('./modules/es6.typed.int32-array');\nrequire('./modules/es6.typed.uint32-array');\nrequire('./modules/es6.typed.float32-array');\nrequire('./modules/es6.typed.float64-array');\nrequire('./modules/es6.reflect.apply');\nrequire('./modules/es6.reflect.construct');\nrequire('./modules/es6.reflect.define-property');\nrequire('./modules/es6.reflect.delete-property');\nrequire('./modules/es6.reflect.enumerate');\nrequire('./modules/es6.reflect.get');\nrequire('./modules/es6.reflect.get-own-property-descriptor');\nrequire('./modules/es6.reflect.get-prototype-of');\nrequire('./modules/es6.reflect.has');\nrequire('./modules/es6.reflect.is-extensible');\nrequire('./modules/es6.reflect.own-keys');\nrequire('./modules/es6.reflect.prevent-extensions');\nrequire('./modules/es6.reflect.set');\nrequire('./modules/es6.reflect.set-prototype-of');\nrequire('./modules/es7.array.includes');\nrequire('./modules/es7.array.flat-map');\nrequire('./modules/es7.array.flatten');\nrequire('./modules/es7.string.at');\nrequire('./modules/es7.string.pad-start');\nrequire('./modules/es7.string.pad-end');\nrequire('./modules/es7.string.trim-left');\nrequire('./modules/es7.string.trim-right');\nrequire('./modules/es7.string.match-all');\nrequire('./modules/es7.symbol.async-iterator');\nrequire('./modules/es7.symbol.observable');\nrequire('./modules/es7.object.get-own-property-descriptors');\nrequire('./modules/es7.object.values');\nrequire('./modules/es7.object.entries');\nrequire('./modules/es7.object.define-getter');\nrequire('./modules/es7.object.define-setter');\nrequire('./modules/es7.object.lookup-getter');\nrequire('./modules/es7.object.lookup-setter');\nrequire('./modules/es7.map.to-json');\nrequire('./modules/es7.set.to-json');\nrequire('./modules/es7.map.of');\nrequire('./modules/es7.set.of');\nrequire('./modules/es7.weak-map.of');\nrequire('./modules/es7.weak-set.of');\nrequire('./modules/es7.map.from');\nrequire('./modules/es7.set.from');\nrequire('./modules/es7.weak-map.from');\nrequire('./modules/es7.weak-set.from');\nrequire('./modules/es7.global');\nrequire('./modules/es7.system.global');\nrequire('./modules/es7.error.is-error');\nrequire('./modules/es7.math.clamp');\nrequire('./modules/es7.math.deg-per-rad');\nrequire('./modules/es7.math.degrees');\nrequire('./modules/es7.math.fscale');\nrequire('./modules/es7.math.iaddh');\nrequire('./modules/es7.math.isubh');\nrequire('./modules/es7.math.imulh');\nrequire('./modules/es7.math.rad-per-deg');\nrequire('./modules/es7.math.radians');\nrequire('./modules/es7.math.scale');\nrequire('./modules/es7.math.umulh');\nrequire('./modules/es7.math.signbit');\nrequire('./modules/es7.promise.finally');\nrequire('./modules/es7.promise.try');\nrequire('./modules/es7.reflect.define-metadata');\nrequire('./modules/es7.reflect.delete-metadata');\nrequire('./modules/es7.reflect.get-metadata');\nrequire('./modules/es7.reflect.get-metadata-keys');\nrequire('./modules/es7.reflect.get-own-metadata');\nrequire('./modules/es7.reflect.get-own-metadata-keys');\nrequire('./modules/es7.reflect.has-metadata');\nrequire('./modules/es7.reflect.has-own-metadata');\nrequire('./modules/es7.reflect.metadata');\nrequire('./modules/es7.asap');\nrequire('./modules/es7.observable');\nrequire('./modules/web.timers');\nrequire('./modules/web.immediate');\nrequire('./modules/web.dom.iterable');\nmodule.exports = require('./modules/_core');\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","/*\n *  base64.js\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? module.exports = factory(global)\n        : typeof define === 'function' && define.amd\n        ? define(factory) : factory(global)\n}((\n    typeof self !== 'undefined' ? self\n        : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n: this\n), function(global) {\n    'use strict';\n    // existing version for noConflict()\n    var _Base64 = global.Base64;\n    var version = \"2.4.9\";\n    // if node.js and NOT React Native, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = eval(\"require('buffer').Buffer\");\n        } catch (err) {\n            buffer = undefined;\n        }\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                   + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = buffer ?\n        buffer.from && Uint8Array && buffer.from !== Uint8Array.from\n        ? function (u) {\n            return (u.constructor === buffer.constructor ? u : buffer.from(u))\n                .toString('base64')\n        }\n        :  function (u) {\n            return (u.constructor === buffer.constructor ? u : new  buffer(u))\n                .toString('base64')\n        }\n        : function (u) { return btoa(utob(u)) }\n    ;\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(String(u))\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = new RegExp([\n        '[\\xC0-\\xDF][\\x80-\\xBF]',\n        '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n        '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n    ].join('|'), 'g');\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/[\\s\\S]{1,4}/g, cb_decode);\n    };\n    var _decode = buffer ?\n        buffer.from && Uint8Array && buffer.from !== Uint8Array.from\n        ? function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : buffer.from(a, 'base64')).toString();\n        }\n        : function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : new buffer(a, 'base64')).toString();\n        }\n        : function(a) { return btou(atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict,\n        __buffer__: buffer\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], function(){ return global.Base64 });\n    }\n    // that's it!\n    return {Base64: global.Base64}\n}));\n","//! moment.js\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months['standalone'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        if (!m) {\n            return isArray(this._weekdays) ? this._weekdays :\n                this._weekdays['standalone'];\n        }\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('k',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  'undefined') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year': output = monthDiff(this, that) / 12; break;\n            case 'month': output = monthDiff(this, that); break;\n            case 'quarter': output = monthDiff(this, that) / 3; break;\n            case 'second': output = (this - that) / 1e3; break; // 1000\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\n                seconds < thresholds.s   && ['ss', seconds] ||\n                minutes <= 1             && ['m']           ||\n                minutes < thresholds.m   && ['mm', minutes] ||\n                hours   <= 1             && ['h']           ||\n                hours   < thresholds.h   && ['hh', hours]   ||\n                days    <= 1             && ['d']           ||\n                days    < thresholds.d   && ['dd', days]    ||\n                months  <= 1             && ['M']           ||\n                months  < thresholds.M   && ['MM', months]  ||\n                years   <= 1             && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        var totalSign = total < 0 ? '-' : '';\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return totalSign + 'P' +\n            (Y ? ymSign + Y + 'Y' : '') +\n            (M ? ymSign + M + 'M' : '') +\n            (D ? daysSign + D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? hmsSign + h + 'H' : '') +\n            (m ? hmsSign + m + 'M' : '') +\n            (s ? hmsSign + s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.22.2';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'YYYY-[W]WW',                             // <input type=\"week\" />\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}