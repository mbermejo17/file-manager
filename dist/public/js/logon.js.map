{"version":3,"names":[],"mappings":"","sources":["logon.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nvar toString = Object.prototype.toString\r\n\r\nmodule.exports = function(val){\r\n  switch (toString.call(val)) {\r\n    case '[object Function]': return 'function'\r\n    case '[object Date]': return 'date'\r\n    case '[object RegExp]': return 'regexp'\r\n    case '[object Arguments]': return 'arguments'\r\n    case '[object Array]': return 'array'\r\n    case '[object String]': return 'string'\r\n  }\r\n\r\n  if (typeof val == 'object' && val && typeof val.length == 'number') {\r\n    try {\r\n      if (typeof val.callee == 'function') return 'arguments';\r\n    } catch (ex) {\r\n      if (ex instanceof TypeError) {\r\n        return 'arguments';\r\n      }\r\n    }\r\n  }\r\n\r\n  if (val === null) return 'null'\r\n  if (val === undefined) return 'undefined'\r\n  if (val && val.nodeType === 1) return 'element'\r\n  if (val === Object(val)) return 'object'\r\n\r\n  return typeof val\r\n}\r\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar _ajax = require('./vendor/ajax');\n\nvar _ajax2 = _interopRequireDefault(_ajax);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function (c, d) {\n    var waiting = d.querySelector('#waiting');\n    var READY_STATE_COMPLETE = 4;\n    var OK = 200;\n    var NOT_FOUND = 404;\n    var preload = d.querySelector('#loader');\n    var main = d.querySelector('#main');\n    var loginbutton = d.querySelector('#login-button');\n    var Base64 = {\n        _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n        encode: function encode(e) {\n            var t = '';\n            var n, r, i, s, o, u, a;\n            var f = 0;\n            e = Base64._utf8_encode(e);\n            while (f < e.length) {\n                n = e.charCodeAt(f++);\n                r = e.charCodeAt(f++);\n                i = e.charCodeAt(f++);\n                s = n >> 2;\n                o = (n & 3) << 4 | r >> 4;\n                u = (r & 15) << 2 | i >> 6;\n                a = i & 63;\n                if (isNaN(r)) {\n                    u = a = 64;\n                } else if (isNaN(i)) {\n                    a = 64;\n                }\n                t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a);\n            }\n            return t;\n        },\n        decode: function decode(e) {\n            var t = '';\n            var n, r, i;\n            var s, o, u, a;\n            var f = 0;\n            e = e.replace(/[^A-Za-z0-9+/=]/g, '');\n            while (f < e.length) {\n                s = this._keyStr.indexOf(e.charAt(f++));\n                o = this._keyStr.indexOf(e.charAt(f++));\n                u = this._keyStr.indexOf(e.charAt(f++));\n                a = this._keyStr.indexOf(e.charAt(f++));\n                n = s << 2 | o >> 4;\n                r = (o & 15) << 4 | u >> 2;\n                i = (u & 3) << 6 | a;\n                t = t + String.fromCharCode(n);\n                if (u != 64) {\n                    t = t + String.fromCharCode(r);\n                }\n                if (a != 64) {\n                    t = t + String.fromCharCode(i);\n                }\n            }\n            t = Base64._utf8_decode(t);\n            return t;\n        },\n        _utf8_encode: function _utf8_encode(e) {\n            e = e.replace(/rn/g, 'n');\n            var t = '';\n            for (var n = 0; n < e.length; n++) {\n                var r = e.charCodeAt(n);\n                if (r < 128) {\n                    t += String.fromCharCode(r);\n                } else if (r > 127 && r < 2048) {\n                    t += String.fromCharCode(r >> 6 | 192);\n                    t += String.fromCharCode(r & 63 | 128);\n                } else {\n                    t += String.fromCharCode(r >> 12 | 224);\n                    t += String.fromCharCode(r >> 6 & 63 | 128);\n                    t += String.fromCharCode(r & 63 | 128);\n                }\n            }\n            return t;\n        },\n        _utf8_decode: function _utf8_decode(e) {\n            var t = '';\n            var n = 0;\n            var r = c1 = c2 = 0;\n            while (n < e.length) {\n                r = e.charCodeAt(n);\n                if (r < 128) {\n                    t += String.fromCharCode(r);\n                    n++;\n                } else if (r > 191 && r < 224) {\n                    c2 = e.charCodeAt(n + 1);\n                    t += String.fromCharCode((r & 31) << 6 | c2 & 63);\n                    n += 2;\n                } else {\n                    c2 = e.charCodeAt(n + 1);\n                    c3 = e.charCodeAt(n + 2);\n                    t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n                    n += 3;\n                }\n            }\n            return t;\n        }\n    };\n\n    c(loginbutton);\n\n    function submit(e) {\n        e.preventDefault();\n        var username = d.querySelector('#username').value;\n        var password = d.querySelector('#password').value;\n        var form = d.querySelector('#formLogon');\n        d.querySelector('#password').value = Base64.encode(password);\n\n        (0, _ajax2.default)({\n            type: 'POST',\n            url: '/filemanager/logon',\n            data: { username: username, password: Base64.encode(password) },\n            ajaxtimeout: 40000,\n            beforeSend: function beforeSend() {\n                waiting.style.display = 'block';\n            },\n            success: function success(data) {\n                console.log(JSON.parse(data));\n\n                var _JSON$parse = JSON.parse(data),\n                    status = _JSON$parse.status,\n                    message = _JSON$parse.message;\n\n                if (status === 'FAIL') {\n                    d.querySelector('#message').innerHTML = message;\n                } else {\n                    d.location.href = message;\n                }\n            },\n            complete: function complete(xhr, status) {\n                console.log(xhr, status);\n                waiting.style.display = 'none';\n            },\n            error: function error(xhr, err) {\n                if (err === 'timeout') {\n                    console.log('Timeout Error');\n                } else {\n                    console.log(xhr, err);\n                }\n            }\n        });\n    }\n    main.style.display = 'block';\n    preload.style.display = 'none';\n    loginbutton.addEventListener('click', submit);\n})(console.log, document);\n\n},{\"./vendor/ajax\":3}],3:[function(require,module,exports){\n'use strict';\n\nvar type;\ntry {\n  type = require('type-of');\n} catch (ex) {\n  // hide from browserify\n  var r = require;\n  type = r('type');\n}\n\nvar jsonpID = 0;\nvar document = window.document;\nvar key;\nvar name;\n// var rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi\nvar scriptTypeRE = /^(?:text|application)\\/javascript/i;\nvar xmlTypeRE = /^(?:text|application)\\/xml/i;\nvar jsonType = 'application/json';\nvar htmlType = 'text/html';\nvar blankRE = /^\\s*$/;\n\nvar ajax = module.exports = function (options) {\n  var settings = extend({}, options || {});\n  for (key in ajax.settings) {\n    if (settings[key] === undefined) settings[key] = ajax.settings[key];\n  }\n\n  ajaxStart(settings);\n\n  if (!settings.crossDomain) {\n    settings.crossDomain = /^([\\w-]+:)?\\/\\/([^\\/]+)/.test(settings.url) && RegExp.$2 !== window.location.host;\n  }\n\n  var dataType = settings.dataType;\n  var hasPlaceholder = /=\\?/.test(settings.url);\n  if (dataType === 'jsonp' || hasPlaceholder) {\n    if (!hasPlaceholder) settings.url = appendQuery(settings.url, 'callback=?');\n    return ajax.JSONP(settings);\n  }\n\n  if (!settings.url) settings.url = window.location.toString();\n  serializeData(settings);\n\n  var mime = settings.accepts[dataType];\n  var baseHeaders = {};\n  var protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol;\n  var xhr = ajax.settings.xhr();\n  var abortTimeout;\n\n  if (settings.ajaxtimeout) xhr.timeout = settings.ajaxtimeout;\n  if (!settings.crossDomain) baseHeaders['X-Requested-With'] = 'XMLHttpRequest';\n  if (mime) {\n    baseHeaders['Accept'] = mime;\n    if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0];\n    xhr.overrideMimeType && xhr.overrideMimeType(mime);\n  }\n  if (settings.contentType || settings.data && settings.type.toUpperCase() !== 'GET') {\n    baseHeaders['Content-Type'] = settings.contentType || 'application/x-www-form-urlencoded';\n  }\n  settings.headers = extend(baseHeaders, settings.headers || {});\n  xhr.ontimeout = function () {\n    ajaxError(null, 'timeout', xhr, settings);\n  };\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      clearTimeout(abortTimeout);\n      var result;\n      var error = false;\n      if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304 || xhr.status === 0 && protocol === 'file:') {\n        dataType = dataType || mimeToDataType(xhr.getResponseHeader('content-type'));\n        result = xhr.responseText;\n\n        try {\n          if (dataType === 'script') (1, eval)(result);else if (dataType === 'xml') result = xhr.responseXML;else if (dataType === 'json') result = blankRE.test(result) ? null : JSON.parse(result);\n        } catch (e) {\n          error = e;\n        }\n\n        if (error) ajaxError(error, 'parsererror', xhr, settings);else ajaxSuccess(result, xhr, settings);\n      } else {\n        if (xhr.status !== 0) {\n          ajaxError(null, 'error', xhr, settings);\n        }\n      }\n    }\n  };\n\n  var async = 'async' in settings ? settings.async : true;\n  xhr.open(settings.type, settings.url, async);\n\n  for (name in settings.headers) {\n    xhr.setRequestHeader(name, settings.headers[name]);\n  }if (ajaxBeforeSend(xhr, settings) === false) {\n    xhr.abort();\n    return false;\n  }\n\n  /* if (settings.timeout > 0) abortTimeout = setTimeout(function() {\n      xhr.onreadystatechange = empty\n      xhr.abort()\n      ajaxError(null, 'timeout', xhr, settings)\n  }, settings.timeout) */\n\n  // avoid sending empty string (#319)\n  xhr.send(settings.data ? settings.data : null);\n  return xhr;\n};\n\n// trigger a custom event and return false if it was cancelled\nfunction triggerAndReturn(context, eventName, data) {\n  // todo: Fire off some events\n  // var event = $.Event(eventName)\n  // $(context).trigger(event, data)\n  return true; //! event.defaultPrevented\n}\n\n// trigger an Ajax \"global\" event\nfunction triggerGlobal(settings, context, eventName, data) {\n  if (settings.global) return triggerAndReturn(context || document, eventName, data);\n}\n\n// Number of active Ajax requests\najax.active = 0;\n\nfunction ajaxStart(settings) {\n  if (settings.global && ajax.active++ === 0) triggerGlobal(settings, null, 'ajaxStart');\n}\n\nfunction ajaxStop(settings) {\n  if (settings.global && ! --ajax.active) triggerGlobal(settings, null, 'ajaxStop');\n}\n\n// triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable\nfunction ajaxBeforeSend(xhr, settings) {\n  var context = settings.context;\n  if (settings.beforeSend.call(context, xhr, settings) === false || triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false) {\n    return false;\n  }\n\n  triggerGlobal(settings, context, 'ajaxSend', [xhr, settings]);\n}\n\nfunction ajaxSuccess(data, xhr, settings) {\n  var context = settings.context;\n  var status = 'success';\n  settings.success.call(context, data, status, xhr);\n  triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data]);\n  ajaxComplete(status, xhr, settings);\n}\n// type: \"timeout\", \"error\", \"abort\", \"parsererror\"\nfunction ajaxError(error, type, xhr, settings) {\n  var context = settings.context;\n  settings.error.call(context, xhr, type, error);\n  triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error]);\n  ajaxComplete(type, xhr, settings);\n}\n// status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"\nfunction ajaxComplete(status, xhr, settings) {\n  var context = settings.context;\n  settings.complete.call(context, xhr, status);\n  triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings]);\n  ajaxStop(settings);\n}\n\n// Empty function, used as default callback\nfunction empty() {}\n\najax.JSONP = function (options) {\n  if (!('type' in options)) return ajax(options);\n  var callbackName = 'jsonp' + ++jsonpID;\n  var script = document.createElement('script');\n  var abort = function abort() {\n    // todo: remove script\n    // $(script).remove()\n    if (callbackName in window) window[callbackName] = empty;\n    ajaxComplete('abort', xhr, options);\n  };\n  var xhr = { abort: abort };\n  var abortTimeout;\n  var head = document.getElementsByTagName('head')[0] || document.documentElement;\n\n  if (options.error) {\n    script.onerror = function () {\n      xhr.abort();\n      options.error();\n    };\n  }\n\n  window[callbackName] = function (data) {\n    clearTimeout(abortTimeout);\n    // todo: remove script\n    // $(script).remove()\n    delete window[callbackName];\n    ajaxSuccess(data, xhr, options);\n  };\n\n  serializeData(options);\n  script.src = options.url.replace(/=\\?/, '=' + callbackName);\n\n  // Use insertBefore instead of appendChild to circumvent an IE6 bug.\n  // This arises when a base node is used (see jQuery bugs #2709 and #4378).\n  head.insertBefore(script, head.firstChild);\n\n  if (options.timeout > 0) {\n    abortTimeout = setTimeout(function () {\n      xhr.abort();\n      ajaxComplete('timeout', xhr, options);\n    }, options.timeout);\n  }\n\n  return xhr;\n};\n\najax.settings = {\n  // Default type of request\n  type: 'GET',\n  // Callback that is executed before request\n  beforeSend: empty,\n  // Callback that is executed if the request succeeds\n  success: empty,\n  // Callback that is executed the the server drops error\n  error: empty,\n  // Callback that is executed on request complete (both: error and success)\n  complete: empty,\n  // The context for the callbacks\n  context: null,\n  // Whether to trigger \"global\" Ajax events\n  global: true,\n  // Transport\n  xhr: function xhr() {\n    return new window.XMLHttpRequest();\n  },\n  // MIME types mapping\n  accepts: {\n    script: 'text/javascript, application/javascript',\n    json: jsonType,\n    xml: 'application/xml, text/xml',\n    html: htmlType,\n    text: 'text/plain'\n  },\n  // Whether the request is to another domain\n  crossDomain: false,\n  // Default timeout\n  timeout: 0\n};\n\nfunction mimeToDataType(mime) {\n  return mime && (mime === htmlType ? 'html' : mime === jsonType ? 'json' : scriptTypeRE.test(mime) ? 'script' : xmlTypeRE.test(mime) && 'xml') || 'text';\n}\n\nfunction appendQuery(url, query) {\n  return (url + '&' + query).replace(/[&?]{1,2}/, '?');\n}\n\n// serialize payload and append it to the URL for GET requests\nfunction serializeData(options) {\n  if (type(options.data) === 'object') options.data = param(options.data);\n  if (options.data && (!options.type || options.type.toUpperCase() === 'GET')) {\n    options.url = appendQuery(options.url, options.data);\n  }\n}\n\najax.get = function (url, success) {\n  return ajax({ url: url, success: success });\n};\n\najax.post = function (url, data, success, dataType) {\n  if (type(data) === 'function') {\n    dataType = dataType || success;\n    success = data;\n    data = null;\n  }\n  return ajax({ type: 'POST', url: url, data: data, success: success, dataType: dataType });\n};\n\najax.getJSON = function (url, success) {\n  return ajax({ url: url, success: success, dataType: 'json' });\n};\n\nvar escape = encodeURIComponent;\n\nfunction serialize(params, obj, traditional, scope) {\n  var array = type(obj) === 'array';\n  for (var key in obj) {\n    var value = obj[key];\n\n    if (scope) key = traditional ? scope : scope + '[' + (array ? '' : key) + ']';\n    // handle data in serializeArray() format\n    if (!scope && array) params.add(value.name, value.value);\n    // recurse into nested objects\n    else if (traditional ? type(value) === 'array' : type(value) === 'object') {\n        serialize(params, value, traditional, key);\n      } else params.add(key, value);\n  }\n}\n\nfunction param(obj, traditional) {\n  var params = [];\n  params.add = function (k, v) {\n    this.push(escape(k) + '=' + escape(v));\n  };\n  serialize(params, obj, traditional);\n  return params.join('&').replace('%20', '+');\n}\n\nfunction extend(target) {\n  var slice = Array.prototype.slice;\n  slice.call(arguments, 1).forEach(function (source) {\n    for (key in source) {\n      if (source[key] !== undefined) {\n        target[key] = source[key];\n      }\n    }\n  });\n  return target;\n}\n\n},{\"type-of\":1}]},{},[2]);\n"],"file":"logon.js"}